{"version":3,"sources":["boxed_expression_editor/index.tsx","boxed_expression_editor/api/BuiltinAggregation.ts","boxed_expression_editor/api/ContextEntry.ts","boxed_expression_editor/api/DataType.ts","boxed_expression_editor/api/HitPolicy.ts","boxed_expression_editor/api/LogicType.ts","boxed_expression_editor/i18n/locales/en.ts","boxed_expression_editor/i18n/setup.ts","index.tsx","boxed_expression_editor/api/index.ts","boxed_expression_editor/i18n/index.ts","boxed_expression_editor/api/Table.ts","boxed_expression_editor/components/PopoverMenu/PopoverMenu.tsx","boxed_expression_editor/context/BoxedExpressionGlobalContext.tsx","boxed_expression_editor/components/EditExpressionMenu/EditExpressionMenu.tsx","boxed_expression_editor/components/Resizer/Resizer.tsx","boxed_expression_editor/components/LiteralExpression/LiteralExpression.tsx","boxed_expression_editor/components/Table/TableBody.tsx","boxed_expression_editor/components/Table/TableHandlerMenu.tsx","boxed_expression_editor/components/Table/TableHandler.tsx","boxed_expression_editor/components/Table/TableHeader.tsx","boxed_expression_editor/components/Table/Table.tsx","boxed_expression_editor/components/Table/EditableCell.tsx","boxed_expression_editor/components/RelationExpression/RelationExpression.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryExpression.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryExpressionCell.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryInfo.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryInfoCell.tsx","boxed_expression_editor/components/ContextExpression/ContextExpression.tsx","boxed_expression_editor/components/DecisionTableExpression/DecisionTableExpression.tsx","boxed_expression_editor/components/ListExpression/ListExpression.tsx","boxed_expression_editor/components/InvocationExpression/InvocationExpression.tsx","boxed_expression_editor/components/LogicTypeSelector/LogicTypeSelector.tsx","boxed_expression_editor/hooks/Hooks.ts","boxed_expression_editor/components/ExpressionContainer/ExpressionContainer.tsx","boxed_expression_editor/components/BoxedExpressionEditor/BoxedExpressionEditor.tsx"],"names":["window","renderBoxedExpressionEditor","selector","definition","ReactDOM","expressionDefinition","selectedExpression","document","getElementById","BuiltinAggregation","DEFAULT_ENTRY_INFO_MIN_WIDTH","DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH","getHandlerConfiguration","i18n","groupName","group","items","name","rowOperations","insertAbove","type","TableOperation","RowInsertAbove","insertBelow","RowInsertBelow","delete","RowDelete","clear","RowClear","generateNextAvailableEntryName","contextEntries","namePrefix","lastIndex","length","candidateName","entryWithCandidateName","_","entryInfo","getEntryKey","row","original","resetEntry","entryExpression","uid","DataType","HitPolicy","LogicType","en","en_common","choose","columnOperations","insertLeft","insertRight","columns","context","contextEntry","dataType","decisionTable","editContextEntry","editExpression","editRelation","enterFunction","function","invocation","list","literalExpression","parameters","relation","rows","selectExpression","selectLogicType","boxedExpressionEditorI18nDefaults","locale","dictionary","boxedExpressionEditorDictionaries","Map","BoxedExpressionEditorI18nContext","React","useBoxedExpressionEditorI18n","useContext","App","Undefined","useState","updatedExpression","setUpdatedExpression","beeApi","resetExpressionDefinition","broadcastLiteralExpressionDefinition","broadcastRelationExpressionDefinition","broadcastContextExpressionDefinition","broadcastListExpressionDefinition","broadcastInvocationExpressionDefinition","className","JSON","stringify","TableHeaderVisibility","PopoverMenu","children","arrowPlacement","body","title","appendTo","hasAutoWidth","Popover","data-ouia-component-id","position","distance","id","reference","headerContent","bodyContent","BoxedExpressionGlobalContext","EXPRESSION_NAME","EditExpressionMenu","nameField","dataTypeField","selectedDataType","selectedExpressionName","onExpressionUpdate","globalContext","boxedExpressionEditorRef","current","undefined","dataTypeSelectOpen","setDataTypeSelectOpen","setDataType","expressionName","setExpressionName","useEffect","onExpressionNameChange","useCallback","event","target","value","onDataTypeSelect","selection","getDataTypes","Object","values","key","SelectOption","onDataTypeFilter","e","input","RegExp","exception","filter","child","test","props","onDataTypeSelectToggle","isOpen","onChange","onBlur","placeholder","Select","ouiaId","variant","SelectVariant","typeahead","typeAheadAriaLabel","onToggle","onSelect","onFilter","selections","hasInlineFilter","inlineFilterPlaceholderText","DRAWER_SPLITTER_ELEMENT","Resizer","height","minHeight","minWidth","onHorizontalResizeStop","width","targetHeight","resizerHandler","useMemo","onResizeStop","data","size","minConstraints","axis","handle","LiteralExpression","content","onUpdatingNameAndDataType","isHeadless","onUpdatingRecursiveExpression","useRef","expressionDataType","literalExpressionContent","literalExpressionWidth","spreadLiteralExpressionDefinition","logicType","onContentChange","renderElementWithResizeHandler","element","renderLiteralExpressionHeader","getBodyContent","TextArea","defaultValue","aria-label","TableBody","tableInstance","headerVisibility","Full","getRowKey","getColumnKey","renderCellResizer","cell","column","canResizeOnCell","getResizerProps","renderCell","cellIndex","rowIndex","cellType","canResize","Td","getCellProps","getTdProps","render","renderBodyRow","Tr","getRowProps","cells","map","renderAdditiveRow","role","childIndex","style","allColumns","Tbody","None","getTableBodyProps","prepareRow","TableHandlerMenu","handlerConfiguration","allowedOperations","onOperation","Menu","itemId","groupOperation","MenuGroup","label","operation","MenuList","MenuItem","isDisabled","TableHandler","columnPrefix","tableColumns","lastSelectedColumnIndex","lastSelectedRowIndex","tableRows","onRowsUpdate","onRowAdding","showTableHandler","setShowTableHandler","tableHandlerTarget","tableHandlerAllowedOperations","resetRowCustomFunction","onColumnsUpdate","selectedColumnIndex","setSelectedColumnIndex","selectedRowIndex","setSelectedRowIndex","insertBefore","elements","index","slice","insertAfter","deleteAt","generateNextAvailableColumnName","accessor","generateNextAvailableColumn","updateColumnsThenRows","handlingOperation","tableOperation","ColumnInsertLeft","ColumnInsertRight","ColumnDelete","hasNoPadding","showClose","isVisible","shouldClose","shouldOpen","showFunction","TableHeader","editColumnLabel","skipLastHeaderGroup","updateColumnNameInRows","prevColumnName","newColumnName","tableCells","assignedCellValue","onColumnNameOrDataTypeUpdate","columnIndex","updatedTableColumns","renderCountColumn","Th","getHeaderProps","data-ouia-component-type","renderHeaderCellInfo","headerCellElement","renderResizableHeaderCell","getThProps","renderColumn","isCountColumn","getHeaderGroups","headerGroups","renderHeaderGroups","headerGroup","getHeaderGroupProps","headers","renderAtLevelInHeaderGroups","level","Thead","noWrap","LastLevel","SecondToLastLevel","NO_TABLE_CONTEXT_MENU_CLASS","Table","tableId","defaultCell","headerLevels","tableRef","numberOfRowsColumn","generateNumberOfRowsSubColumnRecursively","disableResizing","hideFilter","setTableHandlerTarget","parseInt","toString","setTableHandlerAllowedOperations","setLastSelectedColumnIndex","setLastSelectedRowIndex","onColumnsUpdateCallback","onRowsUpdateCallback","onCellUpdate","columnId","updatedTableCells","onRowUpdate","updatedRow","updatedRows","defaultColumn","Cell","cellRef","initialValue","setValue","EditableCell","contextMenuIsAvailable","targetIsContainedInCurrentTable","closest","contextMenuAvailableForTarget","classList","contains","tableHandlerStateUpdate","currentlyOpenedHandlerCallback","setCurrentlyOpenedHandlerCallback","useTable","onContextMenu","handlerOnHeaderIsAvailable","disableHandlerOnHeader","preventDefault","useBlockLayout","useResizeColumns","resizeNestedColumns","updatedWidth","updatedColumn","splice","finishedResizing","state","columnResizing","isResizingColumn","columnWidths","updatedColumnWidth","TableComposable","getTableProps","ref","RelationExpression","relationProps","spreadRelationExpressionDefinition","convertColumnsForTheTable","convertRowsForTheTable","tableRow","onSavingRows","push","onSavingColumns","columnInstance","ContextEntryExpression","expression","onExpressionResetting","expressionContainerRef","expressionChangedExternally","getLogicTypeSelectorRef","onLogicTypeUpdating","onLogicTypeResetting","getPlacementRef","ContextEntryExpressionCell","ContextEntryInfo","onContextEntryUpdate","entryName","setEntryName","entryDataType","setEntryDataType","onEntryNameOrDataTypeUpdate","ContextEntryInfoCell","setEntryInfo","DEFAULT_CONTEXT_ENTRY_NAME","DEFAULT_CONTEXT_ENTRY_DATA_TYPE","ContextExpression","result","entryInfoWidth","entryExpressionWidth","resultExpression","setResultExpression","infoWidth","setInfoWidth","expressionWidth","setExpressionWidth","setColumns","setRows","expressionColumn","prevExpressionColumn","getHeaderVisibility","updatedDefinition","Context","DecisionTableExpression","ListExpression","generateLiteralExpression","item","listItems","setListItems","listExpressionWidth","listTableGetRowKey","spreadListExpressionDefinition","List","listItem","DEFAULT_PARAMETER_DATA_TYPE","InvocationExpression","bindingEntries","invokedFunction","functionDefinition","spreadInvocationExpressionDefinition","onFunctionDefinitionChange","onFunctionDefinitionBlur","updatedExpressionColumn","LogicTypeSelector","nextId","isLogicTypeSelected","logicTypeSelected","setLogicTypeSelected","wrapperRef","xPos","setXPos","yPos","setYPos","contextMenuVisible","setContextMenuVisible","hideContextMenu","showContextMenu","pageX","pageY","addEventListener","removeEventListener","contextMenuRef","contextMenuXPos","contextMenuYPos","contextMenuVisibility","setContextMenuVisibility","useContextMenuHandler","renderExpression","Relation","DecisionTable","Invocation","Function","getLogicTypesWithoutUndefined","renderLogicTypeItems","getArrowPlacement","getAppendToPlacement","onLogicTypeSelect","buildLogicSelectorMenu","executeClearAction","buildContextMenu","top","left","Button","isSmall","ButtonVariant","primary","onClick","ExpressionContainer","setSelectedExpression","updateExpressionNameAndDataType","updatedName","updatedDataType","previousSelectedExpression","BoxedExpressionEditor","defaults","dictionaries","initialLocale","navigator","language","ctx","Provider"],"mappings":"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","file":"static/js/main.1235ddbf.chunk.js","sourcesContent":["/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BoxedExpressionEditor } from \"./components\";\nimport * as React from \"react\";\nimport { ExpressionProps } from \"./api\";\nimport * as ReactDOM from \"react-dom\";\n\nexport * from \"./components\";\nexport * from \"./api\";\n\nwindow.renderBoxedExpressionEditor = (selector: string, definition: ExpressionProps) => {\n  ReactDOM.render(\n    <BoxedExpressionEditor expressionDefinition={{ selectedExpression: definition }} />,\n    document.getElementById(selector)\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum BuiltinAggregation {\n  Sum = \"+\",\n  Count = \"#\",\n  Min = \"<\",\n  Max = \">\",\n}\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataType } from \"./DataType\";\nimport { ExpressionProps } from \"./ExpressionProps\";\nimport * as _ from \"lodash\";\nimport { DataRecord, Row } from \"react-table\";\nimport { TableHandlerConfiguration, TableOperation } from \"./Table\";\nimport { BoxedExpressionEditorI18n } from \"../i18n\";\n\nexport interface ContextEntryRecord {\n  entryInfo: {\n    /** Entry name */\n    name: string;\n    /** Entry data type */\n    dataType: DataType;\n  };\n  /** Entry expression */\n  entryExpression: ExpressionProps;\n  /** Callback to be invoked on expression resetting */\n  onExpressionResetting?: () => void;\n}\n\nexport type ContextEntries = ContextEntryRecord[];\n\nexport const DEFAULT_ENTRY_INFO_MIN_WIDTH = 150;\nexport const DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH = 370;\n\nexport const getHandlerConfiguration = (\n  i18n: BoxedExpressionEditorI18n,\n  groupName: string\n): TableHandlerConfiguration => [\n  {\n    group: groupName,\n    items: [\n      { name: i18n.rowOperations.insertAbove, type: TableOperation.RowInsertAbove },\n      { name: i18n.rowOperations.insertBelow, type: TableOperation.RowInsertBelow },\n      { name: i18n.rowOperations.delete, type: TableOperation.RowDelete },\n      { name: i18n.rowOperations.clear, type: TableOperation.RowClear },\n    ],\n  },\n];\n\nexport const generateNextAvailableEntryName = (\n  contextEntries: ContextEntries,\n  namePrefix: string,\n  lastIndex: number = contextEntries.length\n): string => {\n  const candidateName = `${namePrefix}-${lastIndex}`;\n  const entryWithCandidateName = _.find(contextEntries, { entryInfo: { name: candidateName } });\n  return entryWithCandidateName\n    ? generateNextAvailableEntryName(contextEntries, namePrefix, lastIndex + 1)\n    : candidateName;\n};\n\nexport const getEntryKey = (row: Row): string => (row.original as ContextEntryRecord).entryInfo.name;\n\nexport const resetEntry = (row: DataRecord): DataRecord => ({\n  entryInfo: row.entryInfo,\n  entryExpression: { uid: (row.entryExpression as ExpressionProps).uid },\n});\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum DataType {\n  Undefined = \"<Undefined>\",\n  Any = \"Any\",\n  Boolean = \"boolean\",\n  Context = \"context\",\n  Date = \"date\",\n  DateTime = \"date and time\",\n  DateTimeDuration = \"days and time duration\",\n  Number = \"number\",\n  String = \"string\",\n  Time = \"time\",\n  YearsMonthsDuration = \"years and months duration\",\n}\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum HitPolicy {\n  Unique = \"UNIQUE\",\n  First = \"FIRST\",\n  Priority = \"PRIORITY\",\n  Any = \"ANY\",\n  Collect = \"COLLECT\",\n  RuleOrder = \"RULE ORDER\",\n  OutputOrder = \"OUTPUT ORDER\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogicType {\n  Undefined = \"<Undefined>\",\n  LiteralExpression = \"Literal expression\",\n  Context = \"Context\",\n  DecisionTable = \"Decision Table\",\n  Relation = \"Relation\",\n  Function = \"Function\",\n  Invocation = \"Invocation\",\n  List = \"List\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BoxedExpressionEditorI18n } from \"..\";\nimport { en as en_common } from \"@kogito-tooling/i18n-common-dictionary\";\n\nexport const en: BoxedExpressionEditorI18n = {\n  ...en_common,\n  choose: \"Choose...\",\n  clear: \"Clear\",\n  columnOperations: {\n    delete: \"Delete\",\n    insertLeft: \"Insert left\",\n    insertRight: \"Insert right\",\n  },\n  columns: \"COLUMNS\",\n  context: \"Context\",\n  contextEntry: \"CONTEXT ENTRY\",\n  dataType: \"Data Type\",\n  decisionTable: \"Decision Table\",\n  editContextEntry: \"Edit Context Entry\",\n  editExpression: \"Edit Expression\",\n  editRelation: \"Edit Relation\",\n  enterFunction: \"Enter function\",\n  function: \"Function\",\n  invocation: \"Invocation\",\n  list: \"List\",\n  literalExpression: \"Literal expression\",\n  name: \"Name\",\n  parameters: \"PARAMETERS\",\n  relation: \"Relation\",\n  rowOperations: {\n    clear: \"Clear\",\n    delete: \"Delete\",\n    insertAbove: \"Insert above\",\n    insertBelow: \"Insert below\",\n  },\n  rows: \"ROWS\",\n  selectExpression: \"Select expression\",\n  selectLogicType: \"Select logic type\",\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { en } from \"./locales\";\nimport { I18nContextType } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { BoxedExpressionEditorI18n } from \"./BoxedExpressionEditorI18n\";\nimport { I18nDefaults, I18nDictionaries } from \"@kogito-tooling/i18n/dist/core\";\n\nexport const boxedExpressionEditorI18nDefaults: I18nDefaults<BoxedExpressionEditorI18n> = {\n  locale: \"en\",\n  dictionary: en,\n};\nexport const boxedExpressionEditorDictionaries: I18nDictionaries<BoxedExpressionEditorI18n> = new Map([[\"en\", en]]);\nexport const BoxedExpressionEditorI18nContext = React.createContext<I18nContextType<BoxedExpressionEditorI18n>>(\n  {} as never\n);\n\nexport function useBoxedExpressionEditorI18n(): I18nContextType<BoxedExpressionEditorI18n> {\n  return useContext(BoxedExpressionEditorI18nContext);\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// noinspection ES6PreferShortImport\nimport {\n  BoxedExpressionEditor,\n  ContextProps,\n  DataType,\n  ExpressionContainerProps,\n  ExpressionProps,\n  InvocationProps,\n  ListProps,\n  LiteralExpressionProps,\n  RelationProps,\n} from \"./boxed_expression_editor\";\n\nexport const App: React.FunctionComponent = () => {\n  //This definition comes directly from the decision node\n  const selectedExpression: ExpressionProps = {\n    name: \"Expression Name\",\n    dataType: DataType.Undefined,\n  };\n\n  const [updatedExpression, setUpdatedExpression] = useState(selectedExpression);\n\n  const expressionDefinition: ExpressionContainerProps = { selectedExpression };\n\n  //Defining global function that will be available in the Window namespace and used by the BoxedExpressionEditor component\n  window.beeApi = {\n    resetExpressionDefinition: (definition: ExpressionProps) => setUpdatedExpression(definition),\n    broadcastLiteralExpressionDefinition: (definition: LiteralExpressionProps) => setUpdatedExpression(definition),\n    broadcastRelationExpressionDefinition: (definition: RelationProps) => setUpdatedExpression(definition),\n    broadcastContextExpressionDefinition: (definition: ContextProps) => setUpdatedExpression(definition),\n    broadcastListExpressionDefinition: (definition: ListProps) => setUpdatedExpression(definition),\n    broadcastInvocationExpressionDefinition: (definition: InvocationProps) => setUpdatedExpression(definition),\n  };\n\n  return (\n    <div className=\"showcase\">\n      <div className=\"boxed-expression\">\n        <BoxedExpressionEditor expressionDefinition={expressionDefinition} />\n      </div>\n      <div className=\"updated-json\">\n        <p className=\"disclaimer\">\n          ⚠ Currently, JSON gets updated only for literal expression, relation, context, list and invocation logic types\n        </p>\n        <pre>{JSON.stringify(updatedExpression, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./BoxedExpressionEditor\";\nexport * from \"./BuiltinAggregation\";\nexport * from \"./ContextEntry\";\nexport * from \"./DataType\";\nexport * from \"./DecisionTableRule\";\nexport * from \"./ExpressionProps\";\nexport * from \"./HitPolicy\";\nexport * from \"./LogicType\";\nexport * from \"./Table\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./BoxedExpressionEditorI18n\";\nexport * from \"./setup\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataType } from \"./DataType\";\nimport * as React from \"react\";\nimport { Column as ReactTableColumn, DataRecord, Row as ReactTableRow } from \"react-table\";\n\nexport interface TableProps {\n  /** Table identifier, useful for nested structures */\n  tableId?: string;\n  /** Optional children element to be appended below the table content */\n  children?: React.ReactElement[];\n  /** The prefix to be used for the column name */\n  columnPrefix?: string;\n  /** Optional label to be used for the edit popover that appears when clicking on column header */\n  editColumnLabel?: string;\n  /** For each column there is a default component to be used to render the related cell */\n  defaultCell?: {\n    [columnName: string]: React.FunctionComponent<CellProps>;\n  };\n  /** Table's columns */\n  columns: ReactTableColumn[];\n  /** Table's cells */\n  rows: DataRecord[];\n  /** Function to be executed when columns are modified */\n  onColumnsUpdate?: (columns: ReactTableColumn[]) => void;\n  /** Function to be executed when one or more rows are modified */\n  onRowsUpdate?: (rows: DataRecord[]) => void;\n  /** Function to be executed when adding a new row to the table */\n  onRowAdding?: () => DataRecord;\n  /** Custom configuration for the table handler */\n  handlerConfiguration: TableHandlerConfiguration;\n  /** The way in which the header will be rendered */\n  headerVisibility?: TableHeaderVisibility;\n  /** Number of levels in the header, 0-based */\n  headerLevels?: number;\n  /** True, for skipping the creation in the DOM of the last defined header group */\n  skipLastHeaderGroup?: boolean;\n  /** Custom function for getting row key prop, and avoid using the row index */\n  getRowKey?: (row: ReactTableRow) => string;\n  /** Custom function for getting column key prop, and avoid using the column index */\n  getColumnKey?: (column: ReactTableColumn) => string;\n  /** Custom function called for manually resetting a row */\n  resetRowCustomFunction?: (row: DataRecord) => DataRecord;\n}\n\n/** Possible status for the visibility of the Table's Header */\nexport enum TableHeaderVisibility {\n  Full,\n  LastLevel,\n  SecondToLastLevel,\n  None,\n}\n\n/** Table allowed operations */\nexport enum TableOperation {\n  ColumnInsertLeft,\n  ColumnInsertRight,\n  ColumnDelete,\n  RowInsertAbove,\n  RowInsertBelow,\n  RowDelete,\n  RowClear,\n}\n\nexport interface GroupOperations {\n  /** Name of the group (localized) */\n  group: string;\n  /** Collection of operations belonging to this group */\n  items: {\n    /** Name of the operation (localized) */\n    name: string;\n    /** Type of the operation */\n    type: TableOperation;\n  }[];\n}\n\nexport type TableHandlerConfiguration = GroupOperations[];\n\nexport type AllowedOperations = TableOperation[];\n\nexport type Row = string[];\n\nexport type Rows = Row[];\n\nexport interface Column {\n  /** Column name */\n  name: string;\n  /** Column data type */\n  dataType: DataType;\n  /** Column width */\n  width?: string | number;\n}\n\nexport type Columns = Column[];\n\nexport interface CellProps {\n  /** Cell's row properties */\n  row: { index: number };\n  /** Cell's column properties */\n  column: { id: string };\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { Popover } from \"@patternfly/react-core\";\nimport \"./PopoverMenu.css\";\n\nexport interface PopoverMenuProps {\n  /** Optional children element to be considered for triggering the popover */\n  children?: React.ReactElement;\n  /** Title of the popover menu */\n  title: string;\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement?: () => HTMLElement;\n  /** The content of the popover itself */\n  body: React.ReactNode;\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /** Additional classname to be used for the popover */\n  className?: string;\n  /** True to have width automatically computed */\n  hasAutoWidth?: boolean;\n}\n\nexport const PopoverMenu: React.FunctionComponent<PopoverMenuProps> = ({\n  children,\n  arrowPlacement,\n  body,\n  title,\n  appendTo,\n  className,\n  hasAutoWidth,\n}: PopoverMenuProps) => {\n  return (\n    <Popover\n      data-ouia-component-id=\"expression-popover-menu\"\n      className={`popover-menu-selector${className ? \" \" + className : \"\"}`}\n      hasAutoWidth={hasAutoWidth}\n      position=\"bottom\"\n      distance={0}\n      id=\"menu-selector\"\n      reference={arrowPlacement}\n      appendTo={appendTo}\n      headerContent={\n        <div className=\"selector-menu-title\" data-ouia-component-id=\"expression-popover-menu-title\">\n          {title}\n        </div>\n      }\n      bodyContent={body}\n    >\n      {children}\n    </Popover>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nexport interface BoxedExpressionGlobalContextProps {\n  boxedExpressionEditorRef: React.RefObject<HTMLDivElement>;\n  currentlyOpenedHandlerCallback: React.Dispatch<React.SetStateAction<boolean>>;\n  setCurrentlyOpenedHandlerCallback: React.Dispatch<\n    React.SetStateAction<React.Dispatch<React.SetStateAction<boolean>>>\n  >;\n}\n\nexport const BoxedExpressionGlobalContext = React.createContext<BoxedExpressionGlobalContextProps>(\n  {} as BoxedExpressionGlobalContextProps\n);\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./EditExpressionMenu.css\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { DataType, ExpressionProps } from \"../../api\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport * as _ from \"lodash\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\n\nexport interface EditExpressionMenuProps {\n  /** Optional children element to be considered for triggering the edit expression menu */\n  children?: React.ReactElement;\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement?: () => HTMLElement;\n  /** The label for the field 'Name' */\n  nameField?: string;\n  /** The label for the field 'Data Type' */\n  dataTypeField?: string;\n  /** The title of the popover menu */\n  title?: string;\n  /** The pre-selected data type */\n  selectedDataType?: DataType;\n  /** The pre-selected expression name */\n  selectedExpressionName: string;\n  /** Function to be called when the expression gets updated, passing the most updated version of it */\n  onExpressionUpdate: (expression: ExpressionProps) => void;\n}\n\nexport const EXPRESSION_NAME = \"Expression Name\";\n\nexport const EditExpressionMenu: React.FunctionComponent<EditExpressionMenuProps> = ({\n  children,\n  appendTo,\n  arrowPlacement,\n  title,\n  nameField,\n  dataTypeField,\n  selectedDataType = DataType.Undefined,\n  selectedExpressionName,\n  onExpressionUpdate,\n}: EditExpressionMenuProps) => {\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n  const { i18n } = useBoxedExpressionEditorI18n();\n  title = title ?? i18n.editExpression;\n  nameField = nameField ?? i18n.name;\n  dataTypeField = dataTypeField ?? i18n.dataType;\n  appendTo = appendTo ?? globalContext.boxedExpressionEditorRef?.current ?? undefined;\n\n  const [dataTypeSelectOpen, setDataTypeSelectOpen] = useState(false);\n  const [dataType, setDataType] = useState(selectedDataType);\n  const [expressionName, setExpressionName] = useState(selectedExpressionName);\n\n  useEffect(() => {\n    setExpressionName(selectedExpressionName);\n  }, [selectedExpressionName]);\n\n  useEffect(() => {\n    setDataType(selectedDataType);\n  }, [selectedDataType]);\n\n  const onExpressionNameChange = useCallback(\n    (event) => {\n      setExpressionName(event.target.value);\n      if (event.type === \"blur\") {\n        onExpressionUpdate({\n          name: event.target.value,\n          dataType,\n        });\n      }\n    },\n    [dataType, onExpressionUpdate]\n  );\n\n  const onDataTypeSelect = useCallback(\n    (event, selection) => {\n      setDataTypeSelectOpen(false);\n      setDataType(selection);\n      onExpressionUpdate({\n        name: expressionName,\n        dataType: selection,\n      });\n    },\n    [expressionName, onExpressionUpdate]\n  );\n\n  const getDataTypes = useCallback(() => {\n    return _.map(Object.values(DataType), (key) => (\n      <SelectOption key={key} value={key}>\n        {key}\n      </SelectOption>\n    ));\n  }, []);\n\n  const onDataTypeFilter = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      let input: RegExp;\n      try {\n        input = new RegExp(e.target.value, \"i\");\n      } catch (exception) {\n        return getDataTypes();\n      }\n      return e.target.value !== \"\" ? getDataTypes().filter((child) => input.test(child.props.value)) : getDataTypes();\n    },\n    [getDataTypes]\n  );\n\n  const onDataTypeSelectToggle = useCallback((isOpen) => setDataTypeSelectOpen(isOpen), []);\n\n  return (\n    <PopoverMenu\n      title={title}\n      arrowPlacement={arrowPlacement}\n      appendTo={appendTo}\n      body={\n        <div className=\"edit-expression-menu\">\n          <div className=\"expression-name\">\n            <label>{nameField}</label>\n            <input\n              type=\"text\"\n              id=\"expression-name\"\n              data-ouia-component-id=\"edit-expression-name\"\n              value={expressionName}\n              onChange={onExpressionNameChange}\n              onBlur={onExpressionNameChange}\n              className=\"form-control pf-c-form-control\"\n              placeholder={EXPRESSION_NAME}\n            />\n          </div>\n          <div className=\"expression-data-type\">\n            <label>{dataTypeField}</label>\n            <Select\n              ouiaId=\"edit-expression-data-type\"\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={i18n.choose}\n              onToggle={onDataTypeSelectToggle}\n              onSelect={onDataTypeSelect}\n              onFilter={onDataTypeFilter}\n              isOpen={dataTypeSelectOpen}\n              selections={dataType}\n              hasInlineFilter\n              inlineFilterPlaceholderText={i18n.choose}\n            >\n              {getDataTypes()}\n            </Select>\n          </div>\n        </div>\n      }\n    >\n      {children}\n    </PopoverMenu>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./Resizer.css\";\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { ResizableBox } from \"react-resizable\";\n\nexport interface ResizerProps {\n  width: number;\n  height: number | \"100%\";\n  minWidth: number;\n  minHeight?: number;\n  onHorizontalResizeStop: (width: number) => void;\n  children?: React.ReactElement;\n}\n\nexport const DRAWER_SPLITTER_ELEMENT = (\n  <div className=\"pf-c-drawer__splitter pf-m-vertical\">\n    <div className=\"pf-c-drawer__splitter-handle\" />\n  </div>\n);\n\nexport const Resizer: React.FunctionComponent<ResizerProps> = ({\n  children,\n  height,\n  minHeight = 0,\n  minWidth,\n  onHorizontalResizeStop,\n  width,\n}) => {\n  const targetHeight = height === \"100%\" ? 0 : height;\n\n  const resizerHandler = useMemo(() => <div className=\"pf-c-drawer\">{DRAWER_SPLITTER_ELEMENT}</div>, []);\n\n  const onResizeStop = useCallback((e, data) => onHorizontalResizeStop(data.size.width), [onHorizontalResizeStop]);\n\n  return (\n    <ResizableBox\n      className={`${height === \"100%\" ? \"height-based-on-content\" : \"\"}`}\n      width={width}\n      height={targetHeight}\n      minConstraints={[minWidth, minHeight]}\n      axis=\"x\"\n      onResizeStop={onResizeStop}\n      handle={resizerHandler}\n    >\n      {children}\n    </ResizableBox>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./LiteralExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { DataType, ExpressionProps, LiteralExpressionProps, LogicType } from \"../../api\";\nimport { TextArea } from \"@patternfly/react-core\";\nimport { EditExpressionMenu, EXPRESSION_NAME } from \"../EditExpressionMenu\";\nimport { Resizer } from \"../Resizer\";\n\nexport const LiteralExpression: React.FunctionComponent<LiteralExpressionProps> = ({\n  uid,\n  content = \"\",\n  dataType = DataType.Undefined,\n  name = EXPRESSION_NAME,\n  onUpdatingNameAndDataType,\n  isHeadless = false,\n  onUpdatingRecursiveExpression,\n  width,\n}: LiteralExpressionProps) => {\n  const HEADER_WIDTH = 250;\n  const HEADER_HEIGHT = 40;\n\n  const expressionName = useRef<string>(name);\n  const expressionDataType = useRef<DataType>(dataType);\n  const literalExpressionContent = useRef<string>(content);\n  const literalExpressionWidth = useRef<number>(width || HEADER_WIDTH);\n\n  const spreadLiteralExpressionDefinition = useCallback(() => {\n    const expressionDefinition: LiteralExpressionProps = {\n      uid,\n      name: expressionName.current,\n      dataType: expressionDataType.current,\n      logicType: LogicType.LiteralExpression,\n      content: literalExpressionContent.current,\n      ...(!isHeadless && literalExpressionWidth.current !== HEADER_WIDTH\n        ? { width: literalExpressionWidth.current }\n        : {}),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(expressionDefinition)\n      : window.beeApi?.broadcastLiteralExpressionDefinition?.(expressionDefinition);\n  }, [isHeadless, onUpdatingRecursiveExpression, uid]);\n\n  const onExpressionUpdate = useCallback(\n    ({ dataType = DataType.Undefined, name = EXPRESSION_NAME }: ExpressionProps) => {\n      expressionName.current = name;\n      expressionDataType.current = dataType;\n      onUpdatingNameAndDataType?.(name, dataType);\n      spreadLiteralExpressionDefinition();\n    },\n    [onUpdatingNameAndDataType, spreadLiteralExpressionDefinition]\n  );\n\n  const onContentChange = useCallback(\n    (event) => {\n      literalExpressionContent.current = event.target.value;\n      spreadLiteralExpressionDefinition();\n    },\n    [spreadLiteralExpressionDefinition]\n  );\n\n  const onHorizontalResizeStop = useCallback(\n    (width) => {\n      literalExpressionWidth.current = width;\n      spreadLiteralExpressionDefinition();\n    },\n    [spreadLiteralExpressionDefinition]\n  );\n\n  const renderElementWithResizeHandler = useCallback(\n    (element) => (\n      <Resizer\n        width={literalExpressionWidth.current}\n        height={HEADER_HEIGHT}\n        minWidth={HEADER_WIDTH}\n        minHeight={HEADER_HEIGHT}\n        onHorizontalResizeStop={onHorizontalResizeStop}\n      >\n        {element}\n      </Resizer>\n    ),\n    [onHorizontalResizeStop]\n  );\n\n  const renderLiteralExpressionHeader = useMemo(() => {\n    return (\n      <div className=\"literal-expression-header\">\n        {renderElementWithResizeHandler(\n          <EditExpressionMenu\n            selectedExpressionName={expressionName.current}\n            selectedDataType={expressionDataType.current}\n            onExpressionUpdate={onExpressionUpdate}\n          >\n            <div className=\"expression-info\">\n              <p className=\"expression-name pf-u-text-truncate\">{expressionName.current}</p>\n              <p className=\"expression-data-type pf-u-text-truncate\">({expressionDataType.current})</p>\n            </div>\n          </EditExpressionMenu>\n        )}\n      </div>\n    );\n  }, [onExpressionUpdate, renderElementWithResizeHandler]);\n\n  const getBodyContent = useMemo(\n    () => (\n      <TextArea\n        defaultValue={literalExpressionContent.current}\n        onBlur={onContentChange}\n        aria-label=\"literal-expression-content\"\n      />\n    ),\n    [onContentChange]\n  );\n\n  useEffect(() => {\n    /** Function executed only the first time the component is loaded */\n    spreadLiteralExpressionDefinition();\n  }, [spreadLiteralExpressionDefinition]);\n\n  return (\n    <div className=\"literal-expression\">\n      {!isHeadless ? renderLiteralExpressionHeader : null}\n      <div className=\"literal-expression-body\">{getBodyContent}</div>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { TableHeaderVisibility } from \"../../api\";\nimport { Cell, Column, Row, TableInstance } from \"react-table\";\nimport { DRAWER_SPLITTER_ELEMENT } from \"../Resizer\";\n\nexport interface TableBodyProps {\n  /** Table instance */\n  tableInstance: TableInstance;\n  /** The way in which the header will be rendered */\n  headerVisibility?: TableHeaderVisibility;\n  /** Optional children element to be appended below the table content */\n  children?: React.ReactElement[];\n  /** Custom function for getting row key prop, and avoid using the row index */\n  getRowKey: (row: Row) => string;\n  /** Custom function for getting column key prop, and avoid using the column index */\n  getColumnKey: (column: Column) => string;\n}\n\nexport const TableBody: React.FunctionComponent<TableBodyProps> = ({\n  tableInstance,\n  children,\n  headerVisibility = TableHeaderVisibility.Full,\n  getRowKey,\n  getColumnKey,\n}) => {\n  const renderCellResizer = useCallback(\n    (cell: Cell) => (\n      <div\n        className=\"pf-c-drawer drawer-on-body\"\n        {...(cell.column.canResizeOnCell ? cell.column.getResizerProps() : {})}\n      >\n        {DRAWER_SPLITTER_ELEMENT}\n      </div>\n    ),\n    []\n  );\n\n  const renderCell = useCallback(\n    (cellIndex: number, cell: Cell, rowIndex: number) => {\n      const cellType = cellIndex === 0 ? \"counter-cell\" : \"data-cell\";\n      const canResize = cell.column.canResizeOnCell ? \"has-resizer\" : \"\";\n      return (\n        <Td\n          {...(cellIndex === 0 ? {} : cell.getCellProps())}\n          {...tableInstance.getTdProps(cellIndex, rowIndex)}\n          key={`${getColumnKey(cell.column)}-${cellIndex}`}\n          data-ouia-component-id={\"expression-column-\" + cellIndex}\n          className={`${cellType} ${canResize}`}\n        >\n          {cellIndex === 0 ? rowIndex + 1 : cell.render(\"Cell\")}\n          {cell.column.canResizeOnCell ? renderCellResizer(cell) : null}\n        </Td>\n      );\n    },\n    [getColumnKey, renderCellResizer, tableInstance]\n  );\n\n  const renderBodyRow = useCallback(\n    (row: Row, rowIndex: number) => (\n      <Tr\n        className=\"table-row\"\n        {...row.getRowProps()}\n        key={`${getRowKey(row)}-${rowIndex}`}\n        ouiaId={\"expression-row-\" + rowIndex}\n      >\n        {row.cells.map((cell: Cell, cellIndex: number) => renderCell(cellIndex, cell, rowIndex))}\n      </Tr>\n    ),\n    [getRowKey, renderCell]\n  );\n\n  const renderAdditiveRow = useMemo(\n    () => (\n      <Tr className=\"table-row additive-row\">\n        <Td role=\"cell\" className=\"empty-cell\">\n          <br />\n        </Td>\n        {children?.map((child, childIndex) => {\n          return (\n            <Td\n              role=\"cell\"\n              key={childIndex}\n              className=\"row-remainder-content\"\n              style={{\n                width: tableInstance.allColumns[childIndex + 1].width,\n                minWidth: tableInstance.allColumns[childIndex + 1].minWidth,\n              }}\n            >\n              {child}\n            </Td>\n          );\n        })}\n      </Tr>\n    ),\n    [children, tableInstance.allColumns]\n  );\n\n  return (\n    <Tbody\n      className={`${headerVisibility === TableHeaderVisibility.None ? \"missing-header\" : \"\"}`}\n      {...tableInstance.getTableBodyProps()}\n    >\n      {tableInstance.rows.map((row: Row, rowIndex: number) => {\n        tableInstance.prepareRow(row);\n        return renderBodyRow(row, rowIndex);\n      })}\n      {children ? renderAdditiveRow : null}\n    </Tbody>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./TableHandlerMenu.css\";\nimport * as React from \"react\";\nimport { Menu, MenuGroup, MenuItem, MenuList } from \"@patternfly/react-core\";\nimport { AllowedOperations, TableHandlerConfiguration, TableOperation } from \"../../api\";\nimport * as _ from \"lodash\";\n\nexport interface TableHandlerMenuProps {\n  /** Handler menu groups and items */\n  handlerConfiguration: TableHandlerConfiguration;\n  /** Dynamic Allowed operations */\n  allowedOperations: AllowedOperations;\n  /** Function to be executed when an operation gets selected */\n  onOperation: (operation: TableOperation) => void;\n}\n\nexport const TableHandlerMenu: React.FunctionComponent<TableHandlerMenuProps> = ({\n  handlerConfiguration,\n  allowedOperations,\n  onOperation,\n}) => {\n  return (\n    <Menu\n      ouiaId=\"expression-table-handler-menu\"\n      className=\"table-handler-menu\"\n      onSelect={(event, itemId) => onOperation(itemId)}\n    >\n      {handlerConfiguration.map((groupOperation) => (\n        <MenuGroup\n          key={groupOperation.group}\n          label={groupOperation.group}\n          className={\n            _.every(groupOperation.items, (operation) => !_.includes(allowedOperations, operation.type))\n              ? \"no-allowed-actions-in-group\"\n              : \"\"\n          }\n        >\n          <MenuList>\n            {groupOperation.items.map((operation) => (\n              <MenuItem\n                data-ouia-component-id={\"expression-table-handler-menu-\" + operation.name}\n                key={operation.type}\n                itemId={operation.type}\n                isDisabled={!_.includes(allowedOperations, operation.type)}\n              >\n                {operation.name}\n              </MenuItem>\n            ))}\n          </MenuList>\n        </MenuGroup>\n      ))}\n    </Menu>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { DataType, TableHandlerConfiguration, TableOperation } from \"../../api\";\nimport * as _ from \"lodash\";\nimport { Column, ColumnInstance, DataRecord } from \"react-table\";\nimport { Popover } from \"@patternfly/react-core\";\nimport { TableHandlerMenu } from \"./TableHandlerMenu\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\n\nexport interface TableHandlerProps {\n  /** The prefix to be used for the column name */\n  columnPrefix: string;\n  /** Columns instance */\n  tableColumns: React.MutableRefObject<Column[]>;\n  /** Last selected column index */\n  lastSelectedColumnIndex: number;\n  /** Last selected row index */\n  lastSelectedRowIndex: number;\n  /** Rows instance */\n  tableRows: React.MutableRefObject<DataRecord[]>;\n  /** Function to be executed when one or more rows are modified */\n  onRowsUpdate: (rows: DataRecord[]) => void;\n  /** Function to be executed when adding a new row to the table */\n  onRowAdding: () => DataRecord;\n  /** Show/hide table handler */\n  showTableHandler: boolean;\n  /** Function to programmatically show/hide table handler */\n  setShowTableHandler: React.Dispatch<React.SetStateAction<boolean>>;\n  /** Target for showing the table handler  */\n  tableHandlerTarget: HTMLElement;\n  /** Custom configuration for the table handler */\n  handlerConfiguration: TableHandlerConfiguration;\n  /** Table handler allowed operations */\n  tableHandlerAllowedOperations: TableOperation[];\n  /** Custom function called for manually resetting a row */\n  resetRowCustomFunction?: (row: DataRecord) => DataRecord;\n  /** Function to be executed when columns are modified */\n  onColumnsUpdate: (columns: Column[]) => void;\n}\n\nexport const TableHandler: React.FunctionComponent<TableHandlerProps> = ({\n  columnPrefix,\n  tableColumns,\n  lastSelectedColumnIndex,\n  lastSelectedRowIndex,\n  tableRows,\n  onRowsUpdate,\n  onRowAdding,\n  showTableHandler,\n  setShowTableHandler,\n  tableHandlerTarget,\n  handlerConfiguration,\n  tableHandlerAllowedOperations,\n  resetRowCustomFunction = () => ({}),\n  onColumnsUpdate,\n}) => {\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const [selectedColumnIndex, setSelectedColumnIndex] = useState(lastSelectedColumnIndex);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(lastSelectedRowIndex);\n\n  useEffect(() => {\n    setSelectedColumnIndex(lastSelectedColumnIndex);\n  }, [lastSelectedColumnIndex]);\n\n  useEffect(() => {\n    setSelectedRowIndex(lastSelectedRowIndex);\n  }, [lastSelectedRowIndex]);\n\n  const insertBefore = <T extends unknown>(elements: T[], index: number, element: T) => {\n    return [...elements.slice(0, index), element, ...elements.slice(index)];\n  };\n\n  const insertAfter = <T extends unknown>(elements: T[], index: number, element: T) => {\n    return [...elements.slice(0, index + 1), element, ...elements.slice(index + 1)];\n  };\n\n  const deleteAt = <T extends unknown>(elements: T[], index: number) => {\n    return [...elements.slice(0, index), ...elements.slice(index + 1)];\n  };\n\n  const clearAt = <T extends unknown>(elements: T[], index: number) => {\n    return [\n      ...elements.slice(0, index),\n      resetRowCustomFunction(elements[index] as DataRecord),\n      ...elements.slice(index + 1),\n    ];\n  };\n\n  const generateNextAvailableColumnName: (lastIndex: number) => string = useCallback(\n    (lastIndex) => {\n      const candidateName = `${columnPrefix}${lastIndex}`;\n      const columnWithCandidateName = _.find(tableColumns.current, { accessor: candidateName });\n      return columnWithCandidateName ? generateNextAvailableColumnName(lastIndex + 1) : candidateName;\n    },\n    [columnPrefix, tableColumns]\n  );\n\n  const generateNextAvailableColumn = useCallback(\n    (columns: Column[]) => {\n      return {\n        accessor: generateNextAvailableColumnName(columns.length),\n        label: generateNextAvailableColumnName(columns.length),\n        dataType: DataType.Undefined,\n      } as ColumnInstance;\n    },\n    [generateNextAvailableColumnName]\n  );\n\n  /** These column operations have impact also on the collection of cells */\n  const updateColumnsThenRows = useCallback(\n    (columns) => {\n      onColumnsUpdate(columns);\n      onRowsUpdate(tableRows.current);\n    },\n    [onColumnsUpdate, onRowsUpdate, tableRows]\n  );\n\n  const handlingOperation = useCallback(\n    (tableOperation: TableOperation) => {\n      switch (tableOperation) {\n        case TableOperation.ColumnInsertLeft:\n          updateColumnsThenRows(\n            insertBefore(tableColumns.current, selectedColumnIndex, generateNextAvailableColumn(tableColumns.current))\n          );\n          break;\n        case TableOperation.ColumnInsertRight:\n          updateColumnsThenRows(\n            insertAfter(tableColumns.current, selectedColumnIndex, generateNextAvailableColumn(tableColumns.current))\n          );\n          break;\n        case TableOperation.ColumnDelete:\n          updateColumnsThenRows(deleteAt(tableColumns.current, selectedColumnIndex));\n          break;\n        case TableOperation.RowInsertAbove:\n          onRowsUpdate(insertBefore(tableRows.current, selectedRowIndex, onRowAdding()));\n          break;\n        case TableOperation.RowInsertBelow:\n          onRowsUpdate(insertAfter(tableRows.current, selectedRowIndex, onRowAdding()));\n          break;\n        case TableOperation.RowDelete:\n          onRowsUpdate(deleteAt(tableRows.current, selectedRowIndex));\n          break;\n        case TableOperation.RowClear:\n          onRowsUpdate(clearAt(tableRows.current, selectedRowIndex));\n          break;\n      }\n      setShowTableHandler(false);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      generateNextAvailableColumn,\n      updateColumnsThenRows,\n      onRowAdding,\n      onRowsUpdate,\n      selectedColumnIndex,\n      selectedRowIndex,\n      setShowTableHandler,\n      tableColumns,\n      tableRows,\n    ]\n  );\n\n  return useMemo(\n    () => (\n      <Popover\n        className=\"table-handler\"\n        hasNoPadding\n        showClose={false}\n        distance={5}\n        position={\"right\"}\n        isVisible={showTableHandler}\n        shouldClose={() => setShowTableHandler(false)}\n        shouldOpen={(showFunction) => showFunction?.()}\n        reference={() => tableHandlerTarget}\n        appendTo={globalContext.boxedExpressionEditorRef?.current ?? undefined}\n        bodyContent={\n          <TableHandlerMenu\n            handlerConfiguration={handlerConfiguration}\n            allowedOperations={tableHandlerAllowedOperations}\n            onOperation={handlingOperation}\n          />\n        }\n      />\n    ),\n    [\n      showTableHandler,\n      globalContext.boxedExpressionEditorRef,\n      handlerConfiguration,\n      tableHandlerAllowedOperations,\n      handlingOperation,\n      setShowTableHandler,\n      tableHandlerTarget,\n    ]\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { Th, Thead, Tr } from \"@patternfly/react-table\";\nimport * as _ from \"lodash\";\nimport { Column, ColumnInstance, DataRecord, HeaderGroup, TableInstance } from \"react-table\";\nimport { EditExpressionMenu } from \"../EditExpressionMenu\";\nimport { DataType, TableHeaderVisibility } from \"../../api\";\nimport { DRAWER_SPLITTER_ELEMENT } from \"../Resizer\";\n\nexport interface TableHeaderProps {\n  /** Table instance */\n  tableInstance: TableInstance;\n  /** Rows instance */\n  tableRows: React.MutableRefObject<DataRecord[]>;\n  /** Function to be executed when one or more rows are modified */\n  onRowsUpdate: (rows: DataRecord[]) => void;\n  /** Optional label to be used for the edit popover that appears when clicking on column header */\n  editColumnLabel?: string;\n  /** The way in which the header will be rendered */\n  headerVisibility?: TableHeaderVisibility;\n  /** True, for skipping the creation in the DOM of the last defined header group */\n  skipLastHeaderGroup: boolean;\n  /** Custom function for getting column key prop, and avoid using the column index */\n  getColumnKey: (column: Column) => string;\n  /** Columns instance */\n  tableColumns: React.MutableRefObject<Column[]>;\n  /** Function to be executed when columns are modified */\n  onColumnsUpdate: (columns: Column[]) => void;\n}\n\nexport const TableHeader: React.FunctionComponent<TableHeaderProps> = ({\n  tableInstance,\n  tableRows,\n  onRowsUpdate,\n  editColumnLabel,\n  headerVisibility = TableHeaderVisibility.Full,\n  skipLastHeaderGroup,\n  getColumnKey,\n  tableColumns,\n  onColumnsUpdate,\n}) => {\n  const updateColumnNameInRows = useCallback(\n    (prevColumnName: string, newColumnName: string) =>\n      onRowsUpdate(\n        _.map(tableRows.current, (tableCells) => {\n          const assignedCellValue = tableCells[prevColumnName]!;\n          delete tableCells[prevColumnName];\n          tableCells[newColumnName] = assignedCellValue;\n          return tableCells;\n        })\n      ),\n    [onRowsUpdate, tableRows]\n  );\n\n  const onColumnNameOrDataTypeUpdate = useCallback(\n    (columnIndex: number) => {\n      return ({ name = \"\", dataType = DataType.Undefined }) => {\n        const prevColumnName = (tableColumns.current[columnIndex] as ColumnInstance).accessor as string;\n        const updatedTableColumns = [...tableColumns.current] as ColumnInstance[];\n        updatedTableColumns[columnIndex].label = name;\n        updatedTableColumns[columnIndex].accessor = name;\n        updatedTableColumns[columnIndex].dataType = dataType;\n        onColumnsUpdate(updatedTableColumns);\n        if (name !== prevColumnName) {\n          updateColumnNameInRows(prevColumnName, name);\n        }\n      };\n    },\n    [onColumnsUpdate, tableColumns, updateColumnNameInRows]\n  );\n\n  const renderCountColumn = useCallback(\n    (column: ColumnInstance, columnIndex: number) => (\n      <Th\n        {...column.getHeaderProps()}\n        className=\"fixed-column no-clickable-cell\"\n        key={`${getColumnKey(column)}-${columnIndex}`}\n      >\n        <div className=\"header-cell\" data-ouia-component-type=\"expression-column-header\">\n          {column.label}\n        </div>\n      </Th>\n    ),\n    [getColumnKey]\n  );\n\n  const renderHeaderCellInfo = useCallback(\n    (column) => (\n      <div className=\"header-cell-info\" data-ouia-component-type=\"expression-column-header-cell-info\">\n        {column.headerCellElement ? column.headerCellElement : <p className=\"pf-u-text-truncate\">{column.label}</p>}\n        {column.dataType ? <p className=\"pf-u-text-truncate data-type\">({column.dataType})</p> : null}\n      </div>\n    ),\n    []\n  );\n\n  const renderResizableHeaderCell = useCallback(\n    (column, columnIndex) => (\n      <Th\n        {...column.getHeaderProps()}\n        {...tableInstance.getThProps(column, columnIndex)}\n        className={`resizable-column ${!column.dataType ? \"no-clickable-cell\" : null}`}\n        key={`${getColumnKey(column)}-${columnIndex}`}\n      >\n        <div className=\"header-cell\" data-ouia-component-type=\"expression-column-header\">\n          {column.dataType ? (\n            <EditExpressionMenu\n              title={editColumnLabel}\n              selectedExpressionName={column.label}\n              selectedDataType={column.dataType}\n              onExpressionUpdate={onColumnNameOrDataTypeUpdate(columnIndex)}\n              key={`${getColumnKey(column)}-${columnIndex}`}\n            >\n              {renderHeaderCellInfo(column)}\n            </EditExpressionMenu>\n          ) : (\n            renderHeaderCellInfo(column)\n          )}\n          <div\n            className={`pf-c-drawer ${!column.canResize ? \"resizer-disabled\" : \"\"}`}\n            {...(column.canResize ? column.getResizerProps() : {})}\n          >\n            {DRAWER_SPLITTER_ELEMENT}\n          </div>\n        </div>\n      </Th>\n    ),\n    [editColumnLabel, getColumnKey, onColumnNameOrDataTypeUpdate, renderHeaderCellInfo, tableInstance]\n  );\n\n  const renderColumn = useCallback(\n    (column: ColumnInstance, columnIndex: number) =>\n      column.isCountColumn ? renderCountColumn(column, columnIndex) : renderResizableHeaderCell(column, columnIndex),\n    [renderCountColumn, renderResizableHeaderCell]\n  );\n\n  const getHeaderGroups = useCallback(\n    (tableInstance) => {\n      return skipLastHeaderGroup ? _.dropRight(tableInstance.headerGroups) : tableInstance.headerGroups;\n    },\n    [skipLastHeaderGroup]\n  );\n\n  const renderHeaderGroups = useMemo(\n    () =>\n      getHeaderGroups(tableInstance).map((headerGroup: HeaderGroup) => (\n        <Tr key={headerGroup.getHeaderGroupProps().key} {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map((column: ColumnInstance, columnIndex: number) => renderColumn(column, columnIndex))}\n        </Tr>\n      )),\n    [getHeaderGroups, renderColumn, tableInstance]\n  );\n\n  const renderAtLevelInHeaderGroups = useCallback(\n    (level: number) => (\n      <Tr>\n        {_.nth(\n          tableInstance.headerGroups as HeaderGroup[],\n          level\n        )!.headers.map((column: ColumnInstance, columnIndex: number) => renderColumn(column, columnIndex))}\n      </Tr>\n    ),\n    [renderColumn, tableInstance.headerGroups]\n  );\n\n  switch (headerVisibility) {\n    case TableHeaderVisibility.Full:\n      return <Thead noWrap>{renderHeaderGroups}</Thead>;\n    case TableHeaderVisibility.LastLevel:\n      return <Thead noWrap>{renderAtLevelInHeaderGroups(-1)}</Thead>;\n    case TableHeaderVisibility.SecondToLastLevel:\n      return <Thead noWrap>{renderAtLevelInHeaderGroups(-2)}</Thead>;\n    default:\n      return null;\n  }\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./Table.css\";\nimport {\n  Column,\n  ColumnInstance,\n  ContextMenuEvent,\n  DataRecord,\n  useBlockLayout,\n  useResizeColumns,\n  useTable,\n} from \"react-table\";\nimport { TableComposable } from \"@patternfly/react-table\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { EditableCell } from \"./EditableCell\";\nimport { TableOperation, TableProps } from \"../../api\";\nimport * as _ from \"lodash\";\nimport { TableBody } from \"./TableBody\";\nimport { TableHandler } from \"./TableHandler\";\nimport { TableHeader } from \"./TableHeader\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\n\nexport const NO_TABLE_CONTEXT_MENU_CLASS = \"no-table-context-menu\";\n\nexport const Table: React.FunctionComponent<TableProps> = ({\n  tableId,\n  children,\n  columnPrefix = \"column-\",\n  editColumnLabel,\n  onColumnsUpdate,\n  onRowsUpdate,\n  onRowAdding = () => ({}),\n  defaultCell,\n  rows,\n  columns,\n  handlerConfiguration,\n  headerVisibility,\n  headerLevels = 0,\n  skipLastHeaderGroup = false,\n  getRowKey = (row) => row.id as string,\n  getColumnKey = (column) => column.id as string,\n  resetRowCustomFunction,\n}: TableProps) => {\n  const NUMBER_OF_ROWS_COLUMN = \"#\";\n  const NUMBER_OF_ROWS_SUBCOLUMN = \"0\";\n\n  const tableRef = useRef<HTMLTableElement>(null);\n\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const generateNumberOfRowsSubColumnRecursively: (column: ColumnInstance, headerLevels: number) => void = (\n    column,\n    headerLevels\n  ) => {\n    if (headerLevels > 0) {\n      _.assign(column, {\n        columns: [\n          {\n            label: NUMBER_OF_ROWS_SUBCOLUMN,\n            accessor: NUMBER_OF_ROWS_SUBCOLUMN,\n            minWidth: 60,\n            width: 60,\n            disableResizing: true,\n            isCountColumn: true,\n            hideFilter: true,\n          },\n        ],\n      });\n\n      generateNumberOfRowsSubColumnRecursively(column.columns[0], headerLevels - 1);\n    }\n  };\n\n  const numberOfRowsColumn = {\n    label: NUMBER_OF_ROWS_COLUMN,\n    accessor: NUMBER_OF_ROWS_COLUMN,\n    width: 60,\n    minWidth: 60,\n    isCountColumn: true,\n  } as ColumnInstance;\n  generateNumberOfRowsSubColumnRecursively(numberOfRowsColumn, headerLevels);\n  const tableColumns = useRef<Column[]>([numberOfRowsColumn, ...columns]);\n  const tableRows = useRef<DataRecord[]>(rows);\n  const [showTableHandler, setShowTableHandler] = useState(false);\n  const [tableHandlerTarget, setTableHandlerTarget] = useState(document.body);\n  const [tableHandlerAllowedOperations, setTableHandlerAllowedOperations] = useState(\n    _.values(TableOperation).map((operation) => parseInt(operation.toString()))\n  );\n  const [lastSelectedColumnIndex, setLastSelectedColumnIndex] = useState(-1);\n  const [lastSelectedRowIndex, setLastSelectedRowIndex] = useState(-1);\n\n  const onColumnsUpdateCallback = useCallback(\n    (columns: Column[]) => {\n      tableColumns.current = columns;\n      onColumnsUpdate?.(columns.slice(1)); //Removing \"# of rows\" column\n    },\n    [onColumnsUpdate]\n  );\n\n  const onRowsUpdateCallback = useCallback(\n    (rows: DataRecord[]) => {\n      tableRows.current = rows;\n      onRowsUpdate?.(rows);\n    },\n    [onRowsUpdate]\n  );\n\n  const onCellUpdate = useCallback(\n    (rowIndex: number, columnId: string, value: string) => {\n      const updatedTableCells = [...tableRows.current];\n      updatedTableCells[rowIndex][columnId] = value;\n      onRowsUpdateCallback(updatedTableCells);\n    },\n    [onRowsUpdateCallback]\n  );\n\n  const onRowUpdate = useCallback(\n    (rowIndex: number, updatedRow: DataRecord) => {\n      const updatedRows = [...tableRows.current];\n      updatedRows[rowIndex] = updatedRow;\n      onRowsUpdateCallback(updatedRows);\n    },\n    [onRowsUpdateCallback]\n  );\n\n  const defaultColumn = {\n    minWidth: 150,\n    width: 150,\n    Cell: useCallback((cellRef) => {\n      const column = cellRef.column as ColumnInstance;\n      if (column.isCountColumn) {\n        return cellRef.value;\n      } else {\n        return defaultCell ? defaultCell[column.id](cellRef) : EditableCell(cellRef);\n      }\n      // Table performance optimization: no need to re-render cells, since nested component themselves will re-render\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []),\n  };\n\n  const contextMenuIsAvailable = (target: HTMLElement) => {\n    const targetIsContainedInCurrentTable = target.closest(\"table\") === tableRef.current;\n    const contextMenuAvailableForTarget = !target.classList.contains(NO_TABLE_CONTEXT_MENU_CLASS);\n    return targetIsContainedInCurrentTable && contextMenuAvailableForTarget;\n  };\n\n  const tableHandlerStateUpdate = (target: HTMLElement, columnIndex: number) => {\n    setTableHandlerTarget(target);\n    globalContext.currentlyOpenedHandlerCallback?.(false);\n    setShowTableHandler(true);\n    globalContext.setCurrentlyOpenedHandlerCallback?.(() => setShowTableHandler);\n    setLastSelectedColumnIndex(columnIndex);\n  };\n\n  const getThProps = (column: ColumnInstance, columnIndex: number) => ({\n    onContextMenu: (e: ContextMenuEvent) => {\n      const target = e.target as HTMLElement;\n      const handlerOnHeaderIsAvailable = !column.disableHandlerOnHeader;\n      if (contextMenuIsAvailable(target) && handlerOnHeaderIsAvailable) {\n        e.preventDefault();\n        setTableHandlerAllowedOperations([\n          TableOperation.ColumnInsertLeft,\n          TableOperation.ColumnInsertRight,\n          ...(tableColumns.current.length > 2 && columnIndex > 0 ? [TableOperation.ColumnDelete] : []),\n        ]);\n        tableHandlerStateUpdate(target, columnIndex);\n      }\n    },\n  });\n\n  const getTdProps = (columnIndex: number, rowIndex: number) => ({\n    onContextMenu: (e: ContextMenuEvent) => {\n      const target = e.target as HTMLElement;\n      if (contextMenuIsAvailable(target)) {\n        e.preventDefault();\n        setTableHandlerAllowedOperations([\n          TableOperation.ColumnInsertLeft,\n          TableOperation.ColumnInsertRight,\n          ...(tableColumns.current.length > 2 && columnIndex > 0 ? [TableOperation.ColumnDelete] : []),\n          TableOperation.RowInsertAbove,\n          TableOperation.RowInsertBelow,\n          ...(tableRows.current.length > 1 ? [TableOperation.RowDelete] : []),\n          TableOperation.RowClear,\n        ]);\n        tableHandlerStateUpdate(target, columnIndex);\n        setLastSelectedRowIndex(rowIndex);\n      }\n    },\n  });\n\n  const tableInstance = useTable(\n    {\n      columns: tableColumns.current,\n      data: tableRows.current,\n      defaultColumn,\n      onCellUpdate,\n      onRowUpdate,\n      getThProps,\n      getTdProps,\n    },\n    useBlockLayout,\n    useResizeColumns\n  );\n\n  const resizeNestedColumns = (columns: ColumnInstance[], accessor: string, updatedWidth: number) => {\n    const columnIndex = _.findIndex(columns, { accessor });\n    if (columnIndex >= 0) {\n      const updatedColumn = { ...columns[columnIndex] };\n      updatedColumn.width = updatedWidth;\n      columns.splice(columnIndex, 1, updatedColumn);\n    } else {\n      _.forEach(columns, (column) => resizeNestedColumns(column.columns, accessor, updatedWidth));\n    }\n  };\n\n  const finishedResizing =\n    tableInstance.state.columnResizing.isResizingColumn === null &&\n    !_.isEmpty(tableInstance.state.columnResizing.columnWidths);\n  useEffect(() => {\n    if (finishedResizing) {\n      _.forEach(tableInstance.state.columnResizing.columnWidths, (updatedColumnWidth, accessor) =>\n        resizeNestedColumns(tableColumns.current as ColumnInstance[], accessor, updatedColumnWidth)\n      );\n      onColumnsUpdateCallback(tableColumns.current);\n    }\n    // Need to consider a change only when resizing is finished (no other dependencies to consider for this useEffect)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [finishedResizing]);\n\n  return (\n    <div className={`table-component ${tableId}`}>\n      <TableComposable variant=\"compact\" {...tableInstance.getTableProps()} ref={tableRef}>\n        <TableHeader\n          tableInstance={tableInstance}\n          editColumnLabel={editColumnLabel}\n          headerVisibility={headerVisibility}\n          skipLastHeaderGroup={skipLastHeaderGroup}\n          tableRows={tableRows}\n          onRowsUpdate={onRowsUpdateCallback}\n          tableColumns={tableColumns}\n          getColumnKey={getColumnKey}\n          onColumnsUpdate={onColumnsUpdateCallback}\n        />\n        <TableBody\n          tableInstance={tableInstance}\n          getRowKey={getRowKey}\n          getColumnKey={getColumnKey}\n          headerVisibility={headerVisibility}\n        >\n          {children}\n        </TableBody>\n      </TableComposable>\n      {showTableHandler ? (\n        <TableHandler\n          tableColumns={tableColumns}\n          columnPrefix={columnPrefix}\n          handlerConfiguration={handlerConfiguration}\n          lastSelectedColumnIndex={lastSelectedColumnIndex}\n          lastSelectedRowIndex={lastSelectedRowIndex}\n          tableRows={tableRows}\n          onRowsUpdate={onRowsUpdateCallback}\n          onRowAdding={onRowAdding}\n          showTableHandler={showTableHandler}\n          setShowTableHandler={setShowTableHandler}\n          tableHandlerAllowedOperations={tableHandlerAllowedOperations}\n          tableHandlerTarget={tableHandlerTarget}\n          resetRowCustomFunction={resetRowCustomFunction}\n          onColumnsUpdate={onColumnsUpdateCallback}\n        />\n      ) : null}\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { ChangeEvent, useCallback, useEffect } from \"react\";\nimport { CellProps } from \"../../api\";\n\nexport interface EditableCellProps extends CellProps {\n  /** Cell's value */\n  value: string;\n  /** Function executed each time a cell gets updated */\n  onCellUpdate: (rowIndex: number, columnId: string, value: string) => void;\n}\n\nexport const EditableCell: React.FunctionComponent<EditableCellProps> = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  onCellUpdate,\n}: EditableCellProps) => {\n  const [value, setValue] = React.useState(initialValue);\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  const onChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setValue(e.target.value);\n  }, []);\n\n  const onBlur = useCallback(() => {\n    onCellUpdate(index, id, value);\n  }, [id, index, value, onCellUpdate]);\n\n  return <textarea value={value || \"\"} onChange={onChange} onBlur={onBlur} />;\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./RelationExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport \"@patternfly/patternfly/utilities/Text/text.css\";\nimport { Column as RelationColumn, DataType, RelationProps, Row, TableOperation } from \"../../api\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport * as _ from \"lodash\";\nimport { Column, ColumnInstance, DataRecord } from \"react-table\";\n\nexport const RelationExpression: React.FunctionComponent<RelationProps> = (relationProps: RelationProps) => {\n  const FIRST_COLUMN_NAME = \"column-1\";\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const handlerConfiguration = [\n    {\n      group: i18n.columns,\n      items: [\n        { name: i18n.columnOperations.insertLeft, type: TableOperation.ColumnInsertLeft },\n        { name: i18n.columnOperations.insertRight, type: TableOperation.ColumnInsertRight },\n        { name: i18n.columnOperations.delete, type: TableOperation.ColumnDelete },\n      ],\n    },\n    {\n      group: i18n.rows,\n      items: [\n        { name: i18n.rowOperations.insertAbove, type: TableOperation.RowInsertAbove },\n        { name: i18n.rowOperations.insertBelow, type: TableOperation.RowInsertBelow },\n        { name: i18n.rowOperations.delete, type: TableOperation.RowDelete },\n      ],\n    },\n  ];\n\n  const tableColumns = useRef<RelationColumn[]>(\n    relationProps.columns === undefined\n      ? [{ name: FIRST_COLUMN_NAME, dataType: DataType.Undefined }]\n      : relationProps.columns\n  );\n\n  const tableRows = useRef<Row[]>(relationProps.rows === undefined ? [[\"\"]] : relationProps.rows);\n\n  const spreadRelationExpressionDefinition = useCallback(() => {\n    const expressionDefinition = {\n      ...relationProps,\n      columns: tableColumns.current,\n      rows: tableRows.current,\n    };\n    relationProps.isHeadless\n      ? relationProps.onUpdatingRecursiveExpression?.(expressionDefinition)\n      : window.beeApi?.broadcastRelationExpressionDefinition?.(expressionDefinition);\n  }, [relationProps]);\n\n  const convertColumnsForTheTable = useCallback(\n    () =>\n      _.map(\n        tableColumns.current,\n        (column: RelationColumn) =>\n          ({\n            label: column.name,\n            accessor: column.name,\n            dataType: column.dataType,\n            ...(column.width ? { width: column.width } : {}),\n          } as Column)\n      ),\n    []\n  );\n\n  const convertRowsForTheTable = useCallback(\n    () =>\n      _.map(tableRows.current, (row) =>\n        _.reduce(\n          tableColumns.current,\n          (tableRow: DataRecord, column, columnIndex) => {\n            tableRow[column.name] = row[columnIndex] || \"\";\n            return tableRow;\n          },\n          {}\n        )\n      ),\n    []\n  );\n\n  const onSavingRows = useCallback(\n    (rows: DataRecord[]) => {\n      tableRows.current = _.map(rows, (tableRow: DataRecord) =>\n        _.reduce(\n          tableColumns.current,\n          (row: string[], column: RelationColumn) => {\n            row.push((tableRow[column.name]! as string) || \"\");\n            return row;\n          },\n          []\n        )\n      );\n      spreadRelationExpressionDefinition();\n    },\n    [spreadRelationExpressionDefinition]\n  );\n\n  const onSavingColumns = useCallback(\n    (columns) => {\n      tableColumns.current = _.map(columns, (columnInstance: ColumnInstance) => ({\n        name: columnInstance.accessor,\n        dataType: columnInstance.dataType,\n        width: columnInstance.width,\n      }));\n      spreadRelationExpressionDefinition();\n    },\n    [spreadRelationExpressionDefinition]\n  );\n\n  useEffect(() => {\n    /** Function executed only the first time the component is loaded */\n    spreadRelationExpressionDefinition();\n  }, [spreadRelationExpressionDefinition]);\n\n  return (\n    <div className=\"relation-expression\">\n      <Table\n        columnPrefix=\"column-\"\n        editColumnLabel={i18n.editRelation}\n        columns={convertColumnsForTheTable()}\n        rows={convertRowsForTheTable()}\n        onColumnsUpdate={onSavingColumns}\n        onRowsUpdate={onSavingRows}\n        handlerConfiguration={handlerConfiguration}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExpressionProps, LogicType } from \"../../api\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { LogicTypeSelector } from \"../LogicTypeSelector\";\nimport * as _ from \"lodash\";\n\nexport interface ContextEntryExpressionProps {\n  /** The expression wrapped by the entry */\n  expression: ExpressionProps;\n  /** Function invoked when updating expression */\n  onUpdatingRecursiveExpression: (expression: ExpressionProps) => void;\n  /** Function invoked when resetting expression */\n  onExpressionResetting?: () => void;\n}\n\nexport const ContextEntryExpression: React.FunctionComponent<ContextEntryExpressionProps> = ({\n  expression,\n  onUpdatingRecursiveExpression,\n  onExpressionResetting,\n}) => {\n  const expressionContainerRef = useRef<HTMLDivElement>(null);\n\n  const entryExpression = useRef(expression);\n\n  const expressionChangedExternally = expression.logicType === undefined;\n  useEffect(() => {\n    entryExpression.current = _.omit(expression, \"isHeadless\");\n    // Every time, for an expression, its logic type is undefined, it means that corresponding entry has been just added\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expressionChangedExternally]);\n\n  const getLogicTypeSelectorRef = useCallback(() => {\n    return expressionContainerRef.current!;\n  }, []);\n\n  const onLogicTypeUpdating = useCallback(\n    (logicType) => {\n      entryExpression.current.logicType = logicType;\n      onUpdatingRecursiveExpression(_.omit(entryExpression.current, \"isHeadless\"));\n    },\n    [onUpdatingRecursiveExpression]\n  );\n\n  const onLogicTypeResetting = useCallback(() => {\n    entryExpression.current.logicType = LogicType.Undefined;\n    onExpressionResetting?.();\n    onUpdatingRecursiveExpression(_.omit(entryExpression.current, \"isHeadless\"));\n  }, [onExpressionResetting, onUpdatingRecursiveExpression]);\n\n  return (\n    <div className=\"entry-expression\" ref={expressionContainerRef}>\n      <LogicTypeSelector\n        isHeadless={true}\n        onUpdatingRecursiveExpression={onUpdatingRecursiveExpression}\n        selectedExpression={entryExpression.current}\n        onLogicTypeUpdating={onLogicTypeUpdating}\n        onLogicTypeResetting={onLogicTypeResetting}\n        getPlacementRef={getLogicTypeSelectorRef}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ContextEntryExpressionCell.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { CellProps, ContextEntries, ExpressionProps } from \"../../api\";\nimport { DataRecord } from \"react-table\";\nimport { ContextEntryExpression } from \"./ContextEntryExpression\";\n\nexport interface ContextEntryExpressionCellProps extends CellProps {\n  data: ContextEntries;\n  onRowUpdate: (rowIndex: number, updatedRow: DataRecord) => void;\n}\n\nexport const ContextEntryExpressionCell: React.FunctionComponent<ContextEntryExpressionCellProps> = ({\n  data,\n  row: { index },\n  onRowUpdate,\n}) => {\n  const contextEntry = data[index];\n\n  const entryExpression = useRef({\n    uid: contextEntry.entryExpression.uid,\n    ...contextEntry.entryExpression,\n  } as ExpressionProps);\n\n  const expressionChangedExternally = contextEntry.entryExpression.logicType === undefined;\n  useEffect(() => {\n    entryExpression.current = contextEntry.entryExpression;\n    onRowUpdate(index, { ...contextEntry, entryExpression: entryExpression.current });\n    // Every time, for an expression, its logic type is undefined, it means that corresponding entry has been just added\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expressionChangedExternally]);\n\n  const onUpdatingRecursiveExpression = useCallback((expression: ExpressionProps) => {\n    entryExpression.current = expression;\n    onRowUpdate(index, { ...contextEntry, entryExpression: expression });\n    // Callback should never change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"context-entry-expression-cell\">\n      <ContextEntryExpression\n        expression={entryExpression.current}\n        onUpdatingRecursiveExpression={onUpdatingRecursiveExpression}\n        onExpressionResetting={contextEntry.onExpressionResetting}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ContextEntryInfo.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { EditExpressionMenu } from \"../EditExpressionMenu\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { DataType } from \"../../api\";\n\nexport interface ContextEntryInfoProps {\n  /** Context Entry info name */\n  name: string;\n  /** Context Entry info dataType */\n  dataType: DataType;\n  /** Callback to be executed when name or dataType get updated */\n  onContextEntryUpdate: (name: string, dataType: DataType) => void;\n}\n\nexport const ContextEntryInfo: React.FunctionComponent<ContextEntryInfoProps> = ({\n  name,\n  dataType,\n  onContextEntryUpdate,\n}) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [entryName, setEntryName] = useState(name);\n\n  const [entryDataType, setEntryDataType] = useState(dataType);\n\n  useEffect(() => {\n    setEntryName(name);\n  }, [name]);\n\n  useEffect(() => {\n    setEntryDataType(dataType);\n  }, [dataType]);\n\n  const onEntryNameOrDataTypeUpdate = useCallback(\n    ({ name, dataType }) => {\n      setEntryName(name);\n      setEntryDataType(dataType);\n      onContextEntryUpdate(name, dataType);\n    },\n    [onContextEntryUpdate]\n  );\n\n  return (\n    <div className=\"entry-info\">\n      <EditExpressionMenu\n        title={i18n.editContextEntry}\n        selectedExpressionName={entryName}\n        selectedDataType={entryDataType}\n        onExpressionUpdate={onEntryNameOrDataTypeUpdate}\n      >\n        <div className=\"entry-definition\">\n          <p className=\"entry-name pf-u-text-truncate\" title={entryName}>\n            {entryName}\n          </p>\n          <p className=\"entry-data-type pf-u-text-truncate\" title={entryDataType}>\n            ({entryDataType})\n          </p>\n        </div>\n      </EditExpressionMenu>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CellProps, ContextEntries } from \"../../api\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { DataRecord } from \"react-table\";\nimport { ContextEntryInfo } from \"./ContextEntryInfo\";\n\nexport interface ContextEntryInfoCellProps extends CellProps {\n  data: ContextEntries;\n  onRowUpdate: (rowIndex: number, updatedRow: DataRecord) => void;\n}\n\nexport const ContextEntryInfoCell: React.FunctionComponent<ContextEntryInfoCellProps> = ({\n  data,\n  row: { index },\n  onRowUpdate,\n}) => {\n  const contextEntry = data[index];\n\n  const [entryInfo, setEntryInfo] = useState(contextEntry.entryInfo);\n\n  useEffect(() => {\n    setEntryInfo(contextEntry.entryInfo);\n  }, [contextEntry.entryInfo]);\n\n  const onContextEntryUpdate = useCallback(\n    (name, dataType) => {\n      onRowUpdate(index, { ...contextEntry, entryInfo: { name, dataType } });\n    },\n    [contextEntry, index, onRowUpdate]\n  );\n\n  return (\n    <div className=\"context-entry-info-cell\">\n      <ContextEntryInfo\n        name={entryInfo.name}\n        dataType={entryInfo.dataType}\n        onContextEntryUpdate={onContextEntryUpdate}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ContextExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  ContextEntries,\n  ContextProps,\n  DataType,\n  DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  ExpressionProps,\n  generateNextAvailableEntryName,\n  getEntryKey,\n  getHandlerConfiguration,\n  LogicType,\n  resetEntry,\n  TableHeaderVisibility,\n} from \"../../api\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { ColumnInstance, DataRecord } from \"react-table\";\nimport { ContextEntryExpressionCell } from \"./ContextEntryExpressionCell\";\nimport * as _ from \"lodash\";\nimport { ContextEntryExpression } from \"./ContextEntryExpression\";\nimport { ContextEntryInfoCell } from \"./ContextEntryInfoCell\";\n\nconst DEFAULT_CONTEXT_ENTRY_NAME = \"ContextEntry-1\";\nconst DEFAULT_CONTEXT_ENTRY_DATA_TYPE = DataType.Undefined;\n\nexport const ContextExpression: React.FunctionComponent<ContextProps> = ({\n  uid,\n  name = DEFAULT_CONTEXT_ENTRY_NAME,\n  dataType = DEFAULT_CONTEXT_ENTRY_DATA_TYPE,\n  onUpdatingNameAndDataType,\n  contextEntries,\n  result = {} as ExpressionProps,\n  entryInfoWidth = DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  entryExpressionWidth = DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  isHeadless = false,\n  onUpdatingRecursiveExpression,\n}) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [resultExpression, setResultExpression] = useState(result);\n  const [infoWidth, setInfoWidth] = useState(entryInfoWidth);\n  const [expressionWidth, setExpressionWidth] = useState(entryExpressionWidth);\n\n  const [columns, setColumns] = useState([\n    {\n      label: name,\n      accessor: name,\n      dataType,\n      disableHandlerOnHeader: true,\n      columns: [\n        {\n          label: \"Name\",\n          accessor: \"entryInfo\",\n          disableHandlerOnHeader: true,\n          width: infoWidth,\n          minWidth: DEFAULT_ENTRY_INFO_MIN_WIDTH,\n        },\n        {\n          label: \"Value\",\n          accessor: \"entryExpression\",\n          disableHandlerOnHeader: true,\n          width: expressionWidth,\n          minWidth: DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n        },\n      ],\n    },\n  ]);\n\n  const [rows, setRows] = useState(\n    contextEntries || [\n      {\n        entryInfo: {\n          name: DEFAULT_CONTEXT_ENTRY_NAME,\n          dataType: DEFAULT_CONTEXT_ENTRY_DATA_TYPE,\n        },\n        entryExpression: {},\n      } as DataRecord,\n    ]\n  );\n\n  const onColumnsUpdate = useCallback(\n    ([expressionColumn]: [ColumnInstance]) => {\n      onUpdatingNameAndDataType?.(expressionColumn.label, expressionColumn.dataType);\n      setExpressionWidth(_.find(expressionColumn.columns, { accessor: \"entryExpression\" })?.width as number);\n      setInfoWidth(_.find(expressionColumn.columns, { accessor: \"entryInfo\" })?.width as number);\n      setColumns(([prevExpressionColumn]) => [\n        {\n          ...prevExpressionColumn,\n          label: expressionColumn.label,\n          accessor: expressionColumn.accessor,\n          dataType: expressionColumn.dataType,\n        },\n      ]);\n    },\n    [onUpdatingNameAndDataType]\n  );\n\n  const onRowAdding = useCallback(\n    () => ({\n      entryInfo: {\n        name: generateNextAvailableEntryName(rows as ContextEntries, \"ContextEntry\"),\n        dataType: DataType.Undefined,\n      },\n      entryExpression: {},\n    }),\n    [rows]\n  );\n\n  const getHeaderVisibility = useCallback(() => {\n    return isHeadless ? TableHeaderVisibility.LastLevel : TableHeaderVisibility.Full;\n  }, [isHeadless]);\n\n  useEffect(() => {\n    const [expressionColumn] = columns;\n    const updatedDefinition: ContextProps = {\n      uid,\n      logicType: LogicType.Context,\n      name: expressionColumn.accessor,\n      dataType: expressionColumn.dataType,\n      contextEntries: rows as ContextEntries,\n      result: _.omit(resultExpression, \"isHeadless\"),\n      ...(infoWidth > DEFAULT_ENTRY_INFO_MIN_WIDTH ? { entryInfoWidth: infoWidth } : {}),\n      ...(expressionWidth > DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH ? { entryExpressionWidth: expressionWidth } : {}),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(_.omit(updatedDefinition, [\"name\", \"dataType\"]))\n      : window.beeApi?.broadcastContextExpressionDefinition?.(updatedDefinition);\n  }, [columns, isHeadless, onUpdatingRecursiveExpression, rows, resultExpression, infoWidth, expressionWidth, uid]);\n\n  return (\n    <div className={`context-expression ${uid}`}>\n      <Table\n        tableId={uid}\n        headerLevels={1}\n        headerVisibility={getHeaderVisibility()}\n        defaultCell={{ entryInfo: ContextEntryInfoCell, entryExpression: ContextEntryExpressionCell }}\n        columns={columns}\n        rows={rows as DataRecord[]}\n        onColumnsUpdate={onColumnsUpdate}\n        onRowAdding={onRowAdding}\n        onRowsUpdate={setRows}\n        handlerConfiguration={getHandlerConfiguration(i18n, i18n.contextEntry)}\n        getRowKey={useCallback(getEntryKey, [])}\n        resetRowCustomFunction={useCallback(resetEntry, [])}\n      >\n        <div className=\"context-result\">{`<result>`}</div>\n        <ContextEntryExpression expression={resultExpression} onUpdatingRecursiveExpression={setResultExpression} />\n      </Table>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DecisionTableProps } from \"../../api\";\nimport * as React from \"react\";\n\nexport const DecisionTableExpression: React.FunctionComponent<DecisionTableProps> = () => {\n  return <div>Decision Table</div>;\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ListExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  ContextEntryRecord,\n  ExpressionProps,\n  ListProps,\n  LiteralExpressionProps,\n  LogicType,\n  TableHandlerConfiguration,\n  TableHeaderVisibility,\n  TableOperation,\n} from \"../../api\";\nimport { ContextEntryExpressionCell } from \"../ContextExpression\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { DataRecord, Row } from \"react-table\";\nimport * as _ from \"lodash\";\nimport { Resizer } from \"../Resizer\";\n\nconst LIST_EXPRESSION_MIN_WIDTH = 430;\n\nexport const ListExpression: React.FunctionComponent<ListProps> = ({\n  isHeadless,\n  items,\n  onUpdatingRecursiveExpression,\n  uid,\n  width = LIST_EXPRESSION_MIN_WIDTH,\n}: ListProps) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const handlerConfiguration: TableHandlerConfiguration = [\n    {\n      group: i18n.rows,\n      items: [\n        { name: i18n.rowOperations.insertAbove, type: TableOperation.RowInsertAbove },\n        { name: i18n.rowOperations.insertBelow, type: TableOperation.RowInsertBelow },\n        { name: i18n.rowOperations.delete, type: TableOperation.RowDelete },\n        { name: i18n.rowOperations.clear, type: TableOperation.RowClear },\n      ],\n    },\n  ];\n\n  const generateLiteralExpression = () => ({ logicType: LogicType.LiteralExpression } as LiteralExpressionProps);\n\n  const [listItems, setListItems] = useState(\n    _.isEmpty(items)\n      ? [\n          {\n            entryExpression: generateLiteralExpression(),\n          } as DataRecord,\n        ]\n      : _.map(items, (item) => ({ entryExpression: item } as DataRecord))\n  );\n\n  const listExpressionWidth = useRef(width);\n\n  const listTableGetRowKey = useCallback((row: Row) => (row.original as ContextEntryRecord).entryExpression.uid!, []);\n\n  const onRowAdding = useCallback(\n    () => ({\n      entryExpression: generateLiteralExpression(),\n    }),\n    []\n  );\n\n  const spreadListExpressionDefinition = useCallback(() => {\n    const updatedDefinition: ListProps = {\n      uid,\n      ...(listExpressionWidth.current !== LIST_EXPRESSION_MIN_WIDTH ? { width: listExpressionWidth.current } : {}),\n      logicType: LogicType.List,\n      items: _.map(listItems, (listItem: DataRecord) => listItem.entryExpression as ExpressionProps),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(updatedDefinition)\n      : window.beeApi?.broadcastListExpressionDefinition?.(updatedDefinition);\n  }, [isHeadless, listItems, onUpdatingRecursiveExpression, uid]);\n\n  const onRowsUpdate = useCallback((rows) => {\n    setListItems(rows);\n  }, []);\n\n  const resetRowCustomFunction = useCallback((row: DataRecord) => {\n    return { entryExpression: { uid: (row.entryExpression as ExpressionProps).uid } };\n  }, []);\n\n  const onHorizontalResizeStop = useCallback(\n    (width) => {\n      listExpressionWidth.current = width;\n      spreadListExpressionDefinition();\n    },\n    [spreadListExpressionDefinition]\n  );\n\n  useEffect(() => {\n    /** Everytime the list of items changes, we need to spread expression's updated definition */\n    spreadListExpressionDefinition();\n  }, [listItems, spreadListExpressionDefinition]);\n\n  return (\n    <div className=\"list-expression\">\n      <Resizer\n        width={listExpressionWidth.current}\n        height=\"100%\"\n        minWidth={LIST_EXPRESSION_MIN_WIDTH}\n        onHorizontalResizeStop={onHorizontalResizeStop}\n      >\n        <Table\n          tableId={uid}\n          headerVisibility={TableHeaderVisibility.None}\n          defaultCell={{ list: ContextEntryExpressionCell }}\n          columns={[{ accessor: \"list\", width: \"100%\" }]}\n          rows={listItems as DataRecord[]}\n          onRowsUpdate={onRowsUpdate}\n          onRowAdding={onRowAdding}\n          handlerConfiguration={handlerConfiguration}\n          getRowKey={listTableGetRowKey}\n          resetRowCustomFunction={resetRowCustomFunction}\n        />\n      </Resizer>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./InvocationExpression.css\";\nimport * as React from \"react\";\nimport { ChangeEvent, useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  ContextEntries,\n  DataType,\n  DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  generateNextAvailableEntryName,\n  getEntryKey,\n  getHandlerConfiguration,\n  InvocationProps,\n  resetEntry,\n  TableHeaderVisibility,\n} from \"../../api\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { ColumnInstance, DataRecord } from \"react-table\";\nimport { ContextEntryExpressionCell, ContextEntryInfoCell } from \"../ContextExpression\";\nimport * as _ from \"lodash\";\n\nconst DEFAULT_PARAMETER_NAME = \"p-1\";\nconst DEFAULT_PARAMETER_DATA_TYPE = DataType.Undefined;\n\nexport const InvocationExpression: React.FunctionComponent<InvocationProps> = ({\n  bindingEntries,\n  dataType = DEFAULT_PARAMETER_DATA_TYPE,\n  entryInfoWidth = DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  entryExpressionWidth = DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  invokedFunction = \"\",\n  isHeadless,\n  logicType,\n  name = DEFAULT_PARAMETER_NAME,\n  onUpdatingNameAndDataType,\n  onUpdatingRecursiveExpression,\n  uid,\n}: InvocationProps) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [rows, setRows] = useState(\n    bindingEntries || [\n      {\n        entryInfo: {\n          name: DEFAULT_PARAMETER_NAME,\n          dataType: DEFAULT_PARAMETER_DATA_TYPE,\n        },\n        entryExpression: {},\n      } as DataRecord,\n    ]\n  );\n\n  const functionDefinition = useRef<string>(invokedFunction);\n\n  const infoWidth = useRef<number>(entryInfoWidth);\n\n  const expressionWidth = useRef<number>(entryExpressionWidth);\n\n  const spreadInvocationExpressionDefinition = useCallback(() => {\n    const [expressionColumn] = columns.current;\n\n    const updatedDefinition: InvocationProps = {\n      uid,\n      logicType,\n      name: expressionColumn.accessor,\n      dataType: expressionColumn.dataType,\n      bindingEntries: rows as ContextEntries,\n      invokedFunction: functionDefinition.current,\n      ...(infoWidth.current > DEFAULT_ENTRY_INFO_MIN_WIDTH ? { entryInfoWidth: infoWidth.current } : {}),\n      ...(expressionWidth.current > DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH\n        ? { entryExpressionWidth: expressionWidth.current }\n        : {}),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(_.omit(updatedDefinition, [\"name\", \"dataType\"]))\n      : window.beeApi?.broadcastInvocationExpressionDefinition?.(updatedDefinition);\n  }, [functionDefinition, isHeadless, logicType, onUpdatingRecursiveExpression, rows, uid]);\n\n  const onFunctionDefinitionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    functionDefinition.current = e.target.value;\n  }, []);\n\n  const onFunctionDefinitionBlur = useCallback(() => {\n    spreadInvocationExpressionDefinition();\n  }, [spreadInvocationExpressionDefinition]);\n\n  const headerCellElement = (\n    <div className=\"function-definition-container\">\n      <input\n        className=\"function-definition pf-u-text-truncate\"\n        type=\"text\"\n        placeholder={i18n.enterFunction}\n        onChange={onFunctionDefinitionChange}\n        onBlur={onFunctionDefinitionBlur}\n        defaultValue={functionDefinition.current}\n      />\n    </div>\n  );\n\n  const columns = useRef<ColumnInstance[]>([\n    {\n      label: name,\n      accessor: name,\n      dataType,\n      disableHandlerOnHeader: true,\n      columns: [\n        {\n          headerCellElement,\n          accessor: \"functionDefinition\",\n          disableHandlerOnHeader: true,\n          columns: [\n            {\n              accessor: \"entryInfo\",\n              disableHandlerOnHeader: true,\n              canResizeOnCell: true,\n              width: infoWidth.current,\n              minWidth: DEFAULT_ENTRY_INFO_MIN_WIDTH,\n            },\n            {\n              accessor: \"entryExpression\",\n              disableHandlerOnHeader: true,\n              canResizeOnCell: true,\n              width: expressionWidth.current,\n              minWidth: DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n            },\n          ],\n        },\n      ],\n    },\n  ] as ColumnInstance[]);\n\n  const onColumnsUpdate = useCallback(\n    ([expressionColumn]: [ColumnInstance]) => {\n      onUpdatingNameAndDataType?.(expressionColumn.label, expressionColumn.dataType);\n      infoWidth.current = _.find(expressionColumn.columns, { accessor: \"entryInfo\" })?.width as number;\n      expressionWidth.current = _.find(expressionColumn.columns, { accessor: \"entryExpression\" })?.width as number;\n      const [updatedExpressionColumn] = columns.current;\n      updatedExpressionColumn.label = expressionColumn.label;\n      updatedExpressionColumn.accessor = expressionColumn.accessor;\n      updatedExpressionColumn.dataType = expressionColumn.dataType;\n      spreadInvocationExpressionDefinition();\n    },\n    [onUpdatingNameAndDataType, spreadInvocationExpressionDefinition]\n  );\n\n  const onRowAdding = useCallback(\n    () => ({\n      entryInfo: {\n        name: generateNextAvailableEntryName(rows as ContextEntries, \"p\"),\n        dataType: DEFAULT_PARAMETER_DATA_TYPE,\n      },\n      entryExpression: {},\n    }),\n    [rows]\n  );\n\n  const getHeaderVisibility = useCallback(() => {\n    return isHeadless ? TableHeaderVisibility.SecondToLastLevel : TableHeaderVisibility.Full;\n  }, [isHeadless]);\n\n  useEffect(() => {\n    /** Everytime the list of items or the function definition change, we need to spread expression's updated definition */\n    spreadInvocationExpressionDefinition();\n  }, [rows, spreadInvocationExpressionDefinition]);\n\n  return (\n    <div className={`invocation-expression ${uid}`}>\n      <Table\n        tableId={uid}\n        headerLevels={2}\n        headerVisibility={getHeaderVisibility()}\n        skipLastHeaderGroup\n        defaultCell={{ entryInfo: ContextEntryInfoCell, entryExpression: ContextEntryExpressionCell }}\n        columns={columns.current}\n        rows={rows as DataRecord[]}\n        onColumnsUpdate={onColumnsUpdate}\n        onRowAdding={onRowAdding}\n        onRowsUpdate={setRows}\n        handlerConfiguration={getHandlerConfiguration(i18n, i18n.parameters)}\n        getRowKey={useCallback(getEntryKey, [])}\n        resetRowCustomFunction={useCallback(resetEntry, [])}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./LogicTypeSelector.css\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  ContextProps,\n  DataType,\n  DecisionTableProps,\n  ExpressionProps,\n  InvocationProps,\n  ListProps,\n  LiteralExpressionProps,\n  LogicType,\n  RelationProps,\n} from \"../../api\";\nimport { LiteralExpression } from \"../LiteralExpression\";\nimport { RelationExpression } from \"../RelationExpression\";\nimport { ContextExpression } from \"../ContextExpression\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { Button, ButtonVariant, Menu, MenuItem, MenuList } from \"@patternfly/react-core\";\nimport * as _ from \"lodash\";\nimport { useContextMenuHandler } from \"../../hooks\";\nimport { NO_TABLE_CONTEXT_MENU_CLASS } from \"../Table\";\nimport nextId from \"react-id-generator\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\nimport { DecisionTableExpression } from \"../DecisionTableExpression\";\nimport { ListExpression } from \"../ListExpression\";\nimport { InvocationExpression } from \"../InvocationExpression\";\n\nexport interface LogicTypeSelectorProps {\n  /** Expression properties */\n  selectedExpression: ExpressionProps;\n  /** Function to be invoked when logic type changes */\n  onLogicTypeUpdating: (logicType: LogicType) => void;\n  /** Function to be invoked when logic type is reset */\n  onLogicTypeResetting: () => void;\n  /** Function to be invoked to update expression's name and datatype */\n  onUpdatingNameAndDataType?: (updatedName: string, updatedDataType: DataType) => void;\n  /** Function to be invoked to retrieve the DOM reference to be used for selector placement */\n  getPlacementRef: () => HTMLDivElement;\n  /** True to have no header for this specific expression component, used in a recursive expression */\n  isHeadless?: boolean;\n  /** When a component is headless, it will call this function to pass its most updated expression definition */\n  onUpdatingRecursiveExpression?: (expression: ExpressionProps) => void;\n}\n\nexport const LogicTypeSelector: React.FunctionComponent<LogicTypeSelectorProps> = ({\n  selectedExpression,\n  onLogicTypeUpdating,\n  onLogicTypeResetting,\n  onUpdatingNameAndDataType,\n  getPlacementRef,\n  isHeadless = false,\n  onUpdatingRecursiveExpression,\n}) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const expression = _.extend(selectedExpression, {\n    uid: selectedExpression.uid || nextId(),\n    isHeadless,\n    onUpdatingNameAndDataType,\n    onUpdatingRecursiveExpression,\n  });\n\n  const isLogicTypeSelected = (logicType?: LogicType) => !_.isEmpty(logicType) && logicType !== LogicType.Undefined;\n\n  const [logicTypeSelected, setLogicTypeSelected] = useState(isLogicTypeSelected(expression.logicType));\n\n  useEffect(() => {\n    setLogicTypeSelected(isLogicTypeSelected(selectedExpression.logicType));\n  }, [selectedExpression.logicType]);\n\n  const {\n    contextMenuRef,\n    contextMenuXPos,\n    contextMenuYPos,\n    contextMenuVisibility,\n    setContextMenuVisibility,\n  } = useContextMenuHandler();\n\n  const renderExpression = useMemo(() => {\n    switch (expression.logicType) {\n      case LogicType.LiteralExpression:\n        return <LiteralExpression {...(expression as LiteralExpressionProps)} />;\n      case LogicType.Relation:\n        return <RelationExpression {...(expression as RelationProps)} />;\n      case LogicType.Context:\n        return <ContextExpression {...(expression as ContextProps)} />;\n      case LogicType.DecisionTable:\n        return <DecisionTableExpression {...(expression as DecisionTableProps)} />;\n      case LogicType.Invocation:\n        return <InvocationExpression {...(expression as InvocationProps)} />;\n      case LogicType.List:\n        return <ListExpression {...(expression as ListProps)} />;\n      case LogicType.Function:\n      default:\n        return expression.logicType;\n    }\n    // logicType is enough for deciding when to re-execute this function\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expression.logicType]);\n\n  const getLogicTypesWithoutUndefined = useCallback(\n    () => Object.values(LogicType).filter((logicType) => logicType !== LogicType.Undefined),\n    []\n  );\n\n  const renderLogicTypeItems = useCallback(\n    () =>\n      _.map(getLogicTypesWithoutUndefined(), (key) => (\n        <MenuItem key={key} itemId={key}>\n          {key}\n        </MenuItem>\n      )),\n    [getLogicTypesWithoutUndefined]\n  );\n\n  const getArrowPlacement = useCallback(() => getPlacementRef() as HTMLElement, [getPlacementRef]);\n\n  const getAppendToPlacement = useCallback(() => {\n    return globalContext.boxedExpressionEditorRef?.current ?? getArrowPlacement;\n  }, [getArrowPlacement, globalContext.boxedExpressionEditorRef]);\n\n  const onLogicTypeSelect = useCallback(\n    (event: MouseEvent, itemId: string) => {\n      setLogicTypeSelected(true);\n      const selectedLogicType = itemId as LogicType;\n      onLogicTypeUpdating(selectedLogicType);\n    },\n    [onLogicTypeUpdating]\n  );\n\n  const buildLogicSelectorMenu = useCallback(\n    () => (\n      <PopoverMenu\n        title={i18n.selectLogicType}\n        arrowPlacement={getArrowPlacement}\n        appendTo={getAppendToPlacement()}\n        className=\"logic-type-popover\"\n        hasAutoWidth\n        body={\n          <Menu onSelect={onLogicTypeSelect}>\n            <MenuList>{renderLogicTypeItems()}</MenuList>\n          </Menu>\n        }\n      />\n    ),\n    [i18n.selectLogicType, getArrowPlacement, getAppendToPlacement, onLogicTypeSelect, renderLogicTypeItems]\n  );\n\n  const executeClearAction = useCallback(() => {\n    setLogicTypeSelected(false);\n    setContextMenuVisibility(false);\n    onLogicTypeResetting();\n  }, [onLogicTypeResetting, setContextMenuVisibility]);\n\n  const buildContextMenu = useCallback(\n    () => (\n      <div\n        className=\"context-menu-container no-table-context-menu\"\n        style={{\n          top: contextMenuYPos,\n          left: contextMenuXPos,\n        }}\n      >\n        <Button\n          isDisabled={!logicTypeSelected}\n          isSmall={true}\n          variant={ButtonVariant.primary}\n          onClick={executeClearAction}\n        >\n          {i18n.clear}\n        </Button>\n      </div>\n    ),\n    [logicTypeSelected, contextMenuXPos, contextMenuYPos, executeClearAction, i18n.clear]\n  );\n\n  return (\n    <div\n      className={`logic-type-selector ${NO_TABLE_CONTEXT_MENU_CLASS} ${\n        logicTypeSelected ? \"logic-type-selected\" : \"logic-type-not-present\"\n      }`}\n      ref={contextMenuRef}\n    >\n      {logicTypeSelected ? renderExpression : i18n.selectExpression}\n      {!logicTypeSelected ? buildLogicSelectorMenu() : null}\n      {contextMenuVisibility ? buildContextMenu() : null}\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RefObject, useCallback, useEffect, useRef, useState } from \"react\";\n\nexport function useContextMenuHandler(): {\n  contextMenuRef: RefObject<HTMLDivElement>;\n  contextMenuXPos: string;\n  contextMenuYPos: string;\n  contextMenuVisibility: boolean;\n  setContextMenuVisibility: (value: ((prevState: boolean) => boolean) | boolean) => void;\n} {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const [xPos, setXPos] = useState(\"0px\");\n  const [yPos, setYPos] = useState(\"0px\");\n  const [contextMenuVisible, setContextMenuVisible] = useState(false);\n\n  const hideContextMenu = useCallback(() => {\n    contextMenuVisible && setContextMenuVisible(false);\n  }, [contextMenuVisible]);\n\n  const showContextMenu = useCallback(\n    (event: MouseEvent) => {\n      if (wrapperRef.current && wrapperRef.current === event.target) {\n        event.preventDefault();\n        setXPos(`${event.pageX}px`);\n        setYPos(`${event.pageY}px`);\n        setContextMenuVisible(true);\n      }\n    },\n    [setXPos, setYPos]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"click\", hideContextMenu);\n    document.addEventListener(\"contextmenu\", hideContextMenu);\n    document.addEventListener(\"contextmenu\", showContextMenu);\n    return () => {\n      document.removeEventListener(\"click\", hideContextMenu);\n      document.removeEventListener(\"contextmenu\", hideContextMenu);\n      document.removeEventListener(\"contextmenu\", showContextMenu);\n    };\n  });\n\n  return {\n    contextMenuRef: wrapperRef,\n    contextMenuXPos: xPos,\n    contextMenuYPos: yPos,\n    contextMenuVisibility: contextMenuVisible,\n    setContextMenuVisibility: setContextMenuVisible,\n  };\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport \"./ExpressionContainer.css\";\nimport { ExpressionProps, LogicType } from \"../../api\";\nimport { LogicTypeSelector } from \"../LogicTypeSelector\";\n\nexport interface ExpressionContainerProps {\n  /** Expression properties */\n  selectedExpression: ExpressionProps;\n}\n\nexport const ExpressionContainer: ({ selectedExpression }: ExpressionContainerProps) => JSX.Element = (\n  props: ExpressionContainerProps\n) => {\n  const expressionContainerRef = useRef<HTMLDivElement>(null);\n\n  const [selectedExpression, setSelectedExpression] = useState(props.selectedExpression);\n\n  const updateExpressionNameAndDataType = useCallback((updatedName, updatedDataType) => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n      ...previousSelectedExpression,\n      name: updatedName,\n      dataType: updatedDataType,\n    }));\n  }, []);\n\n  const onLogicTypeUpdating = useCallback((logicType) => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n      ...previousSelectedExpression,\n      logicType: logicType,\n    }));\n  }, []);\n\n  const onLogicTypeResetting = useCallback(() => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => {\n      const updatedExpression = {\n        uid: previousSelectedExpression.uid,\n        name: previousSelectedExpression.name,\n        dataType: previousSelectedExpression.dataType,\n        logicType: LogicType.Undefined,\n      };\n      window.beeApi?.resetExpressionDefinition?.(updatedExpression);\n      return updatedExpression;\n    });\n  }, []);\n\n  const getLogicTypeSelectorRef = useCallback(() => {\n    return expressionContainerRef.current!;\n  }, []);\n\n  return (\n    <div className=\"expression-container\">\n      <div className=\"expression-name-and-logic-type\">\n        <span className=\"expression-title\">{selectedExpression.name}</span>\n        <span className=\"expression-type\">({selectedExpression.logicType || LogicType.Undefined})</span>\n      </div>\n\n      <div\n        className=\"expression-container-box\"\n        ref={expressionContainerRef}\n        data-ouia-component-id=\"expression-container\"\n      >\n        <LogicTypeSelector\n          selectedExpression={selectedExpression}\n          onLogicTypeUpdating={onLogicTypeUpdating}\n          onLogicTypeResetting={onLogicTypeResetting}\n          onUpdatingNameAndDataType={updateExpressionNameAndDataType}\n          getPlacementRef={getLogicTypeSelectorRef}\n        />\n      </div>\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useRef, useState } from \"react\";\nimport \"@patternfly/react-core/dist/styles/base-no-reset.css\";\nimport \"@patternfly/react-styles/css/components/Drawer/drawer.css\";\nimport \"./BoxedExpressionEditor.css\";\nimport { I18nDictionariesProvider } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { ExpressionContainer, ExpressionContainerProps } from \"../ExpressionContainer\";\nimport {\n  boxedExpressionEditorDictionaries,\n  BoxedExpressionEditorI18nContext,\n  boxedExpressionEditorI18nDefaults,\n} from \"../../i18n\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\nimport * as _ from \"lodash\";\n\nexport interface BoxedExpressionEditorProps {\n  /** All expression properties used to define it */\n  expressionDefinition: ExpressionContainerProps;\n}\n\nconst BoxedExpressionEditor: (props: BoxedExpressionEditorProps) => JSX.Element = (\n  props: BoxedExpressionEditorProps\n) => {\n  const [currentlyOpenedHandlerCallback, setCurrentlyOpenedHandlerCallback] = useState(() => _.identity);\n  const boxedExpressionEditorRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <I18nDictionariesProvider\n      defaults={boxedExpressionEditorI18nDefaults}\n      dictionaries={boxedExpressionEditorDictionaries}\n      initialLocale={navigator.language}\n      ctx={BoxedExpressionEditorI18nContext}\n    >\n      <BoxedExpressionGlobalContext.Provider\n        value={{ boxedExpressionEditorRef, currentlyOpenedHandlerCallback, setCurrentlyOpenedHandlerCallback }}\n      >\n        <div className=\"boxed-expression-editor\" ref={boxedExpressionEditorRef}>\n          <ExpressionContainer {...props.expressionDefinition} />\n        </div>\n      </BoxedExpressionGlobalContext.Provider>\n    </I18nDictionariesProvider>\n  );\n};\n\nexport { BoxedExpressionEditor };\n"],"sourceRoot":""}