{"version":3,"sources":["boxed_expression_editor/index.tsx","boxed_expression_editor/api/BuiltinAggregation.ts","boxed_expression_editor/api/ContextEntry.ts","boxed_expression_editor/api/DataType.ts","boxed_expression_editor/api/FunctionKind.ts","boxed_expression_editor/api/HitPolicy.ts","boxed_expression_editor/api/LogicType.ts","boxed_expression_editor/i18n/locales/en.ts","boxed_expression_editor/i18n/setup.ts","index.tsx","boxed_expression_editor/api/index.ts","boxed_expression_editor/i18n/index.ts","boxed_expression_editor/api/Table.ts","boxed_expression_editor/components/EditExpressionMenu/DataTypeSelector.tsx","boxed_expression_editor/components/PopoverMenu/PopoverMenu.tsx","boxed_expression_editor/context/BoxedExpressionGlobalContext.tsx","boxed_expression_editor/components/EditExpressionMenu/EditExpressionMenu.tsx","boxed_expression_editor/components/Resizer/Resizer.tsx","boxed_expression_editor/components/LiteralExpression/LiteralExpression.tsx","boxed_expression_editor/components/Table/TableBody.tsx","boxed_expression_editor/components/Table/TableHandlerMenu.tsx","boxed_expression_editor/components/Table/TableHandler.tsx","boxed_expression_editor/components/Table/TableHeader.tsx","boxed_expression_editor/components/Table/Table.tsx","boxed_expression_editor/components/Table/EditableCell.tsx","boxed_expression_editor/components/RelationExpression/RelationExpression.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryExpression.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryExpressionCell.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryInfo.tsx","boxed_expression_editor/components/ContextExpression/ContextEntryInfoCell.tsx","boxed_expression_editor/components/ContextExpression/ContextExpression.tsx","boxed_expression_editor/components/DecisionTableExpression/DecisionTableExpression.tsx","boxed_expression_editor/components/ListExpression/ListExpression.tsx","boxed_expression_editor/components/InvocationExpression/InvocationExpression.tsx","boxed_expression_editor/components/FunctionExpression/EditParameters.tsx","boxed_expression_editor/components/FunctionExpression/FunctionKindSelector.tsx","boxed_expression_editor/components/FunctionExpression/FunctionExpression.tsx","boxed_expression_editor/components/LogicTypeSelector/LogicTypeSelector.tsx","boxed_expression_editor/hooks/Hooks.ts","boxed_expression_editor/components/ExpressionContainer/ExpressionContainer.tsx","boxed_expression_editor/components/BoxedExpressionEditor/BoxedExpressionEditor.tsx"],"names":["window","renderBoxedExpressionEditor","selector","definition","ReactDOM","expressionDefinition","selectedExpression","document","getElementById","BuiltinAggregation","DEFAULT_ENTRY_INFO_MIN_WIDTH","DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH","getHandlerConfiguration","i18n","groupName","group","items","name","rowOperations","insertAbove","type","TableOperation","RowInsertAbove","insertBelow","RowInsertBelow","delete","RowDelete","clear","RowClear","generateNextAvailableEntryName","entryInfos","namePrefix","lastIndex","length","candidateName","entryWithCandidateName","_","getEntryKey","row","original","entryInfo","resetEntry","entryExpression","uid","DataType","FunctionKind","HitPolicy","LogicType","en","en_common","addParameter","choose","class","columnOperations","insertLeft","insertRight","columns","context","contextEntry","dataType","decisionTable","editContextEntry","editExpression","editParameter","editParameters","editRelation","enterFunction","function","invocation","list","literalExpression","methodSignature","parameters","relation","rows","selectExpression","selectFunctionKind","selectLogicType","boxedExpressionEditorI18nDefaults","locale","dictionary","boxedExpressionEditorDictionaries","Map","BoxedExpressionEditorI18nContext","React","useBoxedExpressionEditorI18n","useContext","App","Undefined","useState","updatedExpression","setUpdatedExpression","beeApi","resetExpressionDefinition","broadcastLiteralExpressionDefinition","broadcastRelationExpressionDefinition","broadcastContextExpressionDefinition","broadcastListExpressionDefinition","broadcastInvocationExpressionDefinition","broadcastFunctionExpressionDefinition","className","JSON","stringify","TableHeaderVisibility","DataTypeSelector","selectedDataType","onDataTypeChange","menuAppendTo","dataTypeSelectOpen","setDataTypeSelectOpen","onDataTypeSelect","useCallback","event","selection","getDataTypes","Object","values","key","SelectOption","value","data-ouia-component-id","onDataTypeFilter","e","input","RegExp","target","exception","filter","child","test","props","onDataTypeSelectToggle","isOpen","Select","ouiaId","variant","SelectVariant","typeahead","typeAheadAriaLabel","onToggle","onSelect","onFilter","selections","hasInlineFilter","inlineFilterPlaceholderText","PopoverMenu","children","arrowPlacement","body","title","appendTo","hasAutoWidth","minWidth","Popover","position","distance","id","reference","headerContent","bodyContent","BoxedExpressionGlobalContext","EXPRESSION_NAME","EditExpressionMenu","nameField","dataTypeField","selectedExpressionName","onExpressionUpdate","globalContext","boxedExpressionEditorRef","current","undefined","setDataType","expressionName","setExpressionName","useEffect","onExpressionNameChange","onChange","onBlur","placeholder","DRAWER_SPLITTER_ELEMENT","Resizer","height","minHeight","onHorizontalResizeStop","width","targetHeight","resizerHandler","useMemo","onResizeStop","data","size","minConstraints","axis","handle","LiteralExpression","content","onUpdatingNameAndDataType","isHeadless","onUpdatingRecursiveExpression","expressionDataType","setExpressionDataType","literalExpressionContent","useRef","literalExpressionWidth","spreadLiteralExpressionDefinition","logicType","onContentChange","renderElementWithResizeHandler","element","renderLiteralExpressionHeader","getBodyContent","TextArea","defaultValue","aria-label","TableBody","tableInstance","headerVisibility","Full","getRowKey","getColumnKey","renderCellResizer","cell","column","canResizeOnCell","getResizerProps","renderCell","cellIndex","rowIndex","cellType","canResize","Td","getCellProps","getTdProps","render","renderBodyRow","Tr","getRowProps","cells","map","renderAdditiveRow","role","childIndex","style","allColumns","Tbody","None","getTableBodyProps","prepareRow","TableHandlerMenu","handlerConfiguration","allowedOperations","onOperation","Menu","itemId","groupOperation","MenuGroup","label","operation","MenuList","MenuItem","isDisabled","TableHandler","columnPrefix","tableColumns","lastSelectedColumnIndex","lastSelectedRowIndex","tableRows","onRowsUpdate","onRowAdding","showTableHandler","setShowTableHandler","tableHandlerTarget","tableHandlerAllowedOperations","resetRowCustomFunction","onColumnsUpdate","selectedColumnIndex","setSelectedColumnIndex","selectedRowIndex","setSelectedRowIndex","insertBefore","elements","index","slice","insertAfter","deleteAt","generateNextAvailableColumnName","accessor","generateNextAvailableColumn","updateColumnsThenRows","handlingOperation","tableOperation","ColumnInsertLeft","ColumnInsertRight","ColumnDelete","hasNoPadding","showClose","isVisible","shouldClose","shouldOpen","showFunction","TableHeader","editColumnLabel","skipLastHeaderGroup","updateColumnNameInRows","prevColumnName","newColumnName","tableCells","assignedCellValue","onColumnNameOrDataTypeUpdate","columnIndex","updatedTableColumns","renderCountColumn","Th","getHeaderProps","data-ouia-component-type","renderHeaderCellInfo","headerCellElement","renderResizableHeaderCell","getThProps","renderColumn","isCountColumn","getHeaderGroups","headerGroups","renderHeaderGroups","headerGroup","getHeaderGroupProps","headers","renderAtLevelInHeaderGroups","level","Thead","noWrap","LastLevel","SecondToLastLevel","NO_TABLE_CONTEXT_MENU_CLASS","Table","tableId","controllerCell","defaultCell","headerLevels","tableRef","currentControllerCell","setCurrentControllerCell","generateNumberOfRowsSubColumnRecursively","disableResizing","hideFilter","generateNumberOfRowsColumn","numberOfRowsColumn","setTableHandlerTarget","parseInt","toString","setTableHandlerAllowedOperations","setLastSelectedColumnIndex","setLastSelectedRowIndex","onColumnsUpdateCallback","onRowsUpdateCallback","onCellUpdate","columnId","updatedTableCells","onRowUpdate","updatedRow","updatedRows","defaultColumn","Cell","cellRef","initialValue","setValue","EditableCell","contextMenuIsAvailable","targetIsContainedInCurrentTable","closest","contextMenuAvailableForTarget","classList","contains","tableHandlerStateUpdate","currentlyOpenedHandlerCallback","setCurrentlyOpenedHandlerCallback","useTable","onContextMenu","handlerOnHeaderIsAvailable","disableHandlerOnHeader","preventDefault","useBlockLayout","useResizeColumns","resizeNestedColumns","updatedWidth","updatedColumn","splice","finishedResizing","state","columnResizing","isResizingColumn","columnWidths","updatedColumnWidth","TableComposable","getTableProps","ref","RelationExpression","relationProps","spreadRelationExpressionDefinition","convertColumnsForTheTable","convertRowsForTheTable","tableRow","onSavingRows","push","onSavingColumns","columnInstance","ContextEntryExpression","expression","onExpressionResetting","expressionContainerRef","getLogicTypeSelectorRef","onLogicTypeUpdating","onLogicTypeResetting","getPlacementRef","ContextEntryExpressionCell","ContextEntryInfo","onContextEntryUpdate","editInfoPopoverLabel","entryName","setEntryName","entryDataType","setEntryDataType","onEntryNameOrDataTypeUpdate","renderEntryDefinition","additionalCssClass","renderEntryDefinitionWithPopoverMenu","ContextEntryInfoCell","setEntryInfo","DEFAULT_CONTEXT_ENTRY_NAME","DEFAULT_CONTEXT_ENTRY_DATA_TYPE","ContextExpression","contextEntries","result","renderResult","entryInfoWidth","entryExpressionWidth","noHandlerMenu","resultExpression","setResultExpression","infoWidth","setInfoWidth","expressionWidth","setExpressionWidth","setColumns","setRows","expressionColumn","prevExpressionColumn","getHeaderVisibility","updatedDefinition","Context","DecisionTableExpression","ListExpression","generateLiteralExpression","item","listItems","setListItems","listExpressionWidth","listTableGetRowKey","spreadListExpressionDefinition","List","listItem","DEFAULT_PARAMETER_DATA_TYPE","InvocationExpression","bindingEntries","invokedFunction","functionDefinition","spreadInvocationExpressionDefinition","onFunctionDefinitionChange","onFunctionDefinitionBlur","updatedExpressionColumn","EditParameters","setParameters","onNameChange","onParameterRemove","Button","onClick","parameter","icon","iconPosition","FunctionKindSelector","selectedFunctionKind","onFunctionKindSelect","functionKindSelectionCallback","hide","renderFunctionKindItems","FunctionExpression","parametersWidth","formalParameters","functionKind","Feel","evaluateColumns","extractContextEntriesFromJavaProps","javaProps","String","noClearAction","method","evaluateRows","Java","Pmml","setSelectedFunctionKind","extendDefinitionBasedOnFunctionKind","contextProps","methodName","spreadFunctionExpressionDefinition","kind","setTimeout","LogicTypeSelector","nextId","isLogicTypeSelected","logicTypeSelected","setLogicTypeSelected","wrapperRef","xPos","setXPos","yPos","setYPos","contextMenuVisible","setContextMenuVisible","hideContextMenu","showContextMenu","pageX","pageY","addEventListener","removeEventListener","contextMenuRef","contextMenuXPos","contextMenuYPos","contextMenuVisibility","setContextMenuVisibility","useContextMenuHandler","renderExpression","Relation","DecisionTable","Invocation","Function","getLogicTypesWithoutUndefined","renderLogicTypeItems","getArrowPlacement","getAppendToPlacement","onLogicTypeSelect","buildLogicSelectorMenu","executeClearAction","buildContextMenu","top","left","isSmall","ButtonVariant","primary","ExpressionContainer","setSelectedExpression","updateExpressionNameAndDataType","updatedName","updatedDataType","previousSelectedExpression","BoxedExpressionEditor","defaults","dictionaries","initialLocale","navigator","language","ctx","Provider"],"mappings":"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","file":"static/js/main.2eb39a51.chunk.js","sourcesContent":["/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BoxedExpressionEditor } from \"./components\";\nimport * as React from \"react\";\nimport { ExpressionProps } from \"./api\";\nimport * as ReactDOM from \"react-dom\";\n\nexport * from \"./components\";\nexport * from \"./api\";\n\nwindow.renderBoxedExpressionEditor = (selector: string, definition: ExpressionProps) => {\n  ReactDOM.render(\n    <BoxedExpressionEditor expressionDefinition={{ selectedExpression: definition }} />,\n    document.getElementById(selector)\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum BuiltinAggregation {\n  Sum = \"+\",\n  Count = \"#\",\n  Min = \"<\",\n  Max = \">\",\n}\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataType } from \"./DataType\";\nimport { ExpressionProps } from \"./ExpressionProps\";\nimport * as _ from \"lodash\";\nimport { DataRecord, Row } from \"react-table\";\nimport { TableHandlerConfiguration, TableOperation } from \"./Table\";\nimport { BoxedExpressionEditorI18n } from \"../i18n\";\n\nexport interface EntryInfo {\n  /** Entry name */\n  name: string;\n  /** Entry data type */\n  dataType: DataType;\n}\n\nexport interface ContextEntryRecord {\n  entryInfo: EntryInfo;\n  /** Entry expression */\n  entryExpression: ExpressionProps;\n  /** Label used for the popover triggered when editing info section */\n  editInfoPopoverLabel?: string;\n  /** Callback to be invoked on expression resetting */\n  onExpressionResetting?: () => void;\n}\n\nexport type ContextEntries = ContextEntryRecord[];\n\nexport const DEFAULT_ENTRY_INFO_MIN_WIDTH = 150;\nexport const DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH = 370;\n\nexport const getHandlerConfiguration = (\n  i18n: BoxedExpressionEditorI18n,\n  groupName: string\n): TableHandlerConfiguration => [\n  {\n    group: groupName,\n    items: [\n      { name: i18n.rowOperations.insertAbove, type: TableOperation.RowInsertAbove },\n      { name: i18n.rowOperations.insertBelow, type: TableOperation.RowInsertBelow },\n      { name: i18n.rowOperations.delete, type: TableOperation.RowDelete },\n      { name: i18n.rowOperations.clear, type: TableOperation.RowClear },\n    ],\n  },\n];\n\nexport const generateNextAvailableEntryName = (\n  entryInfos: EntryInfo[],\n  namePrefix: string,\n  lastIndex: number = entryInfos.length\n): string => {\n  const candidateName = `${namePrefix}-${lastIndex === 0 ? 1 : lastIndex}`;\n  const entryWithCandidateName = _.find(entryInfos, { name: candidateName });\n  return entryWithCandidateName ? generateNextAvailableEntryName(entryInfos, namePrefix, lastIndex + 1) : candidateName;\n};\n\nexport const getEntryKey = (row: Row): string => (row.original as ContextEntryRecord).entryInfo.name;\n\nexport const resetEntry = (row: DataRecord): DataRecord => ({\n  ...row,\n  entryExpression: { uid: (row.entryExpression as ExpressionProps).uid },\n});\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum DataType {\n  Undefined = \"<Undefined>\",\n  Any = \"Any\",\n  Boolean = \"boolean\",\n  Context = \"context\",\n  Date = \"date\",\n  DateTime = \"date and time\",\n  DateTimeDuration = \"days and time duration\",\n  Number = \"number\",\n  String = \"string\",\n  Time = \"time\",\n  YearsMonthsDuration = \"years and months duration\",\n}\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExpressionProps } from \"./ExpressionProps\";\n\nexport enum FunctionKind {\n  Feel = \"FEEL\",\n  Java = \"JAVA\",\n  Pmml = \"PMML\",\n}\n\nexport interface FeelFunctionProps {\n  /** Feel Function */\n  functionKind: FunctionKind.Feel;\n  /** The Expression related to the function */\n  expression?: ExpressionProps;\n}\n\nexport interface JavaFunctionProps {\n  /** Java Function */\n  functionKind: FunctionKind.Java;\n  /** Java class */\n  class?: string;\n  /** Method signature */\n  method?: string;\n}\n\nexport interface PmmlFunctionProps {\n  /** Pmml Function */\n  functionKind: FunctionKind.Pmml;\n  /** PMML document */\n  document?: string;\n  /** PMML model */\n  model?: string;\n}\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum HitPolicy {\n  Unique = \"UNIQUE\",\n  First = \"FIRST\",\n  Priority = \"PRIORITY\",\n  Any = \"ANY\",\n  Collect = \"COLLECT\",\n  RuleOrder = \"RULE ORDER\",\n  OutputOrder = \"OUTPUT ORDER\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogicType {\n  Undefined = \"<Undefined>\",\n  LiteralExpression = \"Literal expression\",\n  Context = \"Context\",\n  DecisionTable = \"Decision Table\",\n  Relation = \"Relation\",\n  Function = \"Function\",\n  Invocation = \"Invocation\",\n  List = \"List\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BoxedExpressionEditorI18n } from \"..\";\nimport { en as en_common } from \"@kogito-tooling/i18n-common-dictionary\";\n\nexport const en: BoxedExpressionEditorI18n = {\n  ...en_common,\n  addParameter: \"Add parameter\",\n  choose: \"Choose...\",\n  class: \"class\",\n  clear: \"Clear\",\n  columnOperations: {\n    delete: \"Delete\",\n    insertLeft: \"Insert left\",\n    insertRight: \"Insert right\",\n  },\n  columns: \"COLUMNS\",\n  context: \"Context\",\n  contextEntry: \"CONTEXT ENTRY\",\n  dataType: \"Data Type\",\n  decisionTable: \"Decision Table\",\n  delete: \"Delete\",\n  editContextEntry: \"Edit Context Entry\",\n  editExpression: \"Edit Expression\",\n  editParameter: \"Edit Parameter\",\n  editParameters: \"Edit parameters\",\n  editRelation: \"Edit Relation\",\n  enterFunction: \"Enter function\",\n  function: \"Function\",\n  invocation: \"Invocation\",\n  list: \"List\",\n  literalExpression: \"Literal expression\",\n  methodSignature: \"method signature\",\n  name: \"Name\",\n  parameters: \"PARAMETERS\",\n  relation: \"Relation\",\n  rowOperations: {\n    clear: \"Clear\",\n    delete: \"Delete\",\n    insertAbove: \"Insert above\",\n    insertBelow: \"Insert below\",\n  },\n  rows: \"ROWS\",\n  selectExpression: \"Select expression\",\n  selectFunctionKind: \"Select Function Kind\",\n  selectLogicType: \"Select logic type\",\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { en } from \"./locales\";\nimport { I18nContextType } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { BoxedExpressionEditorI18n } from \"./BoxedExpressionEditorI18n\";\nimport { I18nDefaults, I18nDictionaries } from \"@kogito-tooling/i18n/dist/core\";\n\nexport const boxedExpressionEditorI18nDefaults: I18nDefaults<BoxedExpressionEditorI18n> = {\n  locale: \"en\",\n  dictionary: en,\n};\nexport const boxedExpressionEditorDictionaries: I18nDictionaries<BoxedExpressionEditorI18n> = new Map([[\"en\", en]]);\nexport const BoxedExpressionEditorI18nContext = React.createContext<I18nContextType<BoxedExpressionEditorI18n>>(\n  {} as never\n);\n\nexport function useBoxedExpressionEditorI18n(): I18nContextType<BoxedExpressionEditorI18n> {\n  return useContext(BoxedExpressionEditorI18nContext);\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// noinspection ES6PreferShortImport\nimport {\n  BoxedExpressionEditor,\n  ContextProps,\n  DataType,\n  ExpressionContainerProps,\n  ExpressionProps,\n  FunctionProps,\n  InvocationProps,\n  ListProps,\n  LiteralExpressionProps,\n  RelationProps,\n} from \"./boxed_expression_editor\";\n\nexport const App: React.FunctionComponent = () => {\n  //This definition comes directly from the decision node\n  const selectedExpression: ExpressionProps = {\n    name: \"Expression Name\",\n    dataType: DataType.Undefined,\n  };\n\n  const [updatedExpression, setUpdatedExpression] = useState(selectedExpression);\n\n  const expressionDefinition: ExpressionContainerProps = { selectedExpression };\n\n  //Defining global function that will be available in the Window namespace and used by the BoxedExpressionEditor component\n  window.beeApi = {\n    resetExpressionDefinition: (definition: ExpressionProps) => setUpdatedExpression(definition),\n    broadcastLiteralExpressionDefinition: (definition: LiteralExpressionProps) => setUpdatedExpression(definition),\n    broadcastRelationExpressionDefinition: (definition: RelationProps) => setUpdatedExpression(definition),\n    broadcastContextExpressionDefinition: (definition: ContextProps) => setUpdatedExpression(definition),\n    broadcastListExpressionDefinition: (definition: ListProps) => setUpdatedExpression(definition),\n    broadcastInvocationExpressionDefinition: (definition: InvocationProps) => setUpdatedExpression(definition),\n    broadcastFunctionExpressionDefinition: (definition: FunctionProps) => setUpdatedExpression(definition),\n  };\n\n  return (\n    <div className=\"showcase\">\n      <div className=\"boxed-expression\">\n        <BoxedExpressionEditor expressionDefinition={expressionDefinition} />\n      </div>\n      <div className=\"updated-json\">\n        <p className=\"disclaimer\">\n          ⚠ Currently, JSON gets updated only for literal expression, relation, context, list, invocation and function\n          logic types\n        </p>\n        <pre>{JSON.stringify(updatedExpression, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./BoxedExpressionEditor\";\nexport * from \"./BuiltinAggregation\";\nexport * from \"./ContextEntry\";\nexport * from \"./DataType\";\nexport * from \"./DecisionTableRule\";\nexport * from \"./ExpressionProps\";\nexport * from \"./FunctionKind\";\nexport * from \"./HitPolicy\";\nexport * from \"./LogicType\";\nexport * from \"./Table\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./BoxedExpressionEditorI18n\";\nexport * from \"./setup\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataType } from \"./DataType\";\nimport * as React from \"react\";\nimport { Column as ReactTableColumn, DataRecord, Row as ReactTableRow } from \"react-table\";\n\nexport interface TableProps {\n  /** Table identifier, useful for nested structures */\n  tableId?: string;\n  /** Optional children element to be appended below the table content */\n  children?: React.ReactElement[];\n  /** The prefix to be used for the column name */\n  columnPrefix?: string;\n  /** Optional label to be used for the edit popover that appears when clicking on column header */\n  editColumnLabel?: string;\n  /** Top-left cell custom content */\n  controllerCell?: string | JSX.Element;\n  /** For each column there is a default component to be used to render the related cell */\n  defaultCell?: {\n    [columnName: string]: React.FunctionComponent<CellProps>;\n  };\n  /** Table's columns */\n  columns: ReactTableColumn[];\n  /** Table's cells */\n  rows: DataRecord[];\n  /** Function to be executed when columns are modified */\n  onColumnsUpdate?: (columns: ReactTableColumn[]) => void;\n  /** Function to be executed when one or more rows are modified */\n  onRowsUpdate?: (rows: DataRecord[]) => void;\n  /** Function to be executed when adding a new row to the table */\n  onRowAdding?: () => DataRecord;\n  /** Custom configuration for the table handler */\n  handlerConfiguration?: TableHandlerConfiguration;\n  /** The way in which the header will be rendered */\n  headerVisibility?: TableHeaderVisibility;\n  /** Number of levels in the header, 0-based */\n  headerLevels?: number;\n  /** True, for skipping the creation in the DOM of the last defined header group */\n  skipLastHeaderGroup?: boolean;\n  /** Custom function for getting row key prop, and avoid using the row index */\n  getRowKey?: (row: ReactTableRow) => string;\n  /** Custom function for getting column key prop, and avoid using the column index */\n  getColumnKey?: (column: ReactTableColumn) => string;\n  /** Custom function called for manually resetting a row */\n  resetRowCustomFunction?: (row: DataRecord) => DataRecord;\n}\n\n/** Possible status for the visibility of the Table's Header */\nexport enum TableHeaderVisibility {\n  Full,\n  LastLevel,\n  SecondToLastLevel,\n  None,\n}\n\n/** Table allowed operations */\nexport enum TableOperation {\n  ColumnInsertLeft,\n  ColumnInsertRight,\n  ColumnDelete,\n  RowInsertAbove,\n  RowInsertBelow,\n  RowDelete,\n  RowClear,\n}\n\nexport interface GroupOperations {\n  /** Name of the group (localized) */\n  group: string;\n  /** Collection of operations belonging to this group */\n  items: {\n    /** Name of the operation (localized) */\n    name: string;\n    /** Type of the operation */\n    type: TableOperation;\n  }[];\n}\n\nexport type TableHandlerConfiguration = GroupOperations[];\n\nexport type AllowedOperations = TableOperation[];\n\nexport type Row = string[];\n\nexport type Rows = Row[];\n\nexport interface Column {\n  /** Column name */\n  name: string;\n  /** Column data type */\n  dataType: DataType;\n  /** Column width */\n  width?: string | number;\n}\n\nexport type Columns = Column[];\n\nexport interface CellProps {\n  /** Cell's row properties */\n  row: { index: number };\n  /** Cell's column properties */\n  column: { id: string };\n}\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport * as _ from \"lodash\";\nimport { DataType } from \"../../api\";\n\nexport interface DataTypeSelectorProps {\n  /** The pre-selected data type */\n  selectedDataType: DataType;\n  /** On DataType selection callback */\n  onDataTypeChange: (dataType: DataType) => void;\n  /** By default the menu will be appended inline, but it is possible to append on the parent or on other elements */\n  menuAppendTo?: HTMLElement | \"inline\" | (() => HTMLElement) | \"parent\";\n}\n\nexport const DataTypeSelector: React.FunctionComponent<DataTypeSelectorProps> = ({\n  selectedDataType,\n  onDataTypeChange,\n  menuAppendTo,\n}) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [dataTypeSelectOpen, setDataTypeSelectOpen] = useState(false);\n\n  const onDataTypeSelect = useCallback(\n    (event, selection) => {\n      setDataTypeSelectOpen(false);\n      onDataTypeChange(selection);\n    },\n    [onDataTypeChange]\n  );\n\n  const getDataTypes = useCallback(() => {\n    return _.map(Object.values(DataType), (key) => (\n      <SelectOption key={key} value={key} data-ouia-component-id={key}>\n        {key}\n      </SelectOption>\n    ));\n  }, []);\n\n  const onDataTypeFilter = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      let input: RegExp;\n      try {\n        input = new RegExp(e.target.value, \"i\");\n      } catch (exception) {\n        return getDataTypes();\n      }\n      return e.target.value !== \"\" ? getDataTypes().filter((child) => input.test(child.props.value)) : getDataTypes();\n    },\n    [getDataTypes]\n  );\n\n  const onDataTypeSelectToggle = useCallback((isOpen) => setDataTypeSelectOpen(isOpen), []);\n\n  return (\n    <Select\n      menuAppendTo={menuAppendTo}\n      ouiaId=\"edit-expression-data-type\"\n      variant={SelectVariant.typeahead}\n      typeAheadAriaLabel={i18n.choose}\n      onToggle={onDataTypeSelectToggle}\n      onSelect={onDataTypeSelect}\n      onFilter={onDataTypeFilter}\n      isOpen={dataTypeSelectOpen}\n      selections={selectedDataType}\n      hasInlineFilter\n      inlineFilterPlaceholderText={i18n.choose}\n    >\n      {getDataTypes()}\n    </Select>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { Popover } from \"@patternfly/react-core\";\nimport \"./PopoverMenu.css\";\n\nexport interface PopoverMenuProps {\n  /** Optional children element to be considered for triggering the popover */\n  children?: React.ReactElement;\n  /** Title of the popover menu */\n  title: string;\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement?: () => HTMLElement;\n  /** The content of the popover itself */\n  body: React.ReactNode;\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /** Additional classname to be used for the popover */\n  className?: string;\n  /** True to have width automatically computed */\n  hasAutoWidth?: boolean;\n  /** Popover min width */\n  minWidth?: string;\n}\n\nexport const PopoverMenu: React.FunctionComponent<PopoverMenuProps> = ({\n  children,\n  arrowPlacement,\n  body,\n  title,\n  appendTo,\n  className,\n  hasAutoWidth,\n  minWidth,\n}: PopoverMenuProps) => {\n  return (\n    <Popover\n      data-ouia-component-id=\"expression-popover-menu\"\n      className={`popover-menu-selector${className ? \" \" + className : \"\"}`}\n      hasAutoWidth={hasAutoWidth}\n      minWidth={minWidth}\n      position=\"bottom\"\n      distance={0}\n      id=\"menu-selector\"\n      reference={arrowPlacement}\n      appendTo={appendTo}\n      headerContent={\n        <div className=\"selector-menu-title\" data-ouia-component-id=\"expression-popover-menu-title\">\n          {title}\n        </div>\n      }\n      bodyContent={body}\n    >\n      {children}\n    </Popover>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nexport interface BoxedExpressionGlobalContextProps {\n  boxedExpressionEditorRef: React.RefObject<HTMLDivElement>;\n  currentlyOpenedHandlerCallback: React.Dispatch<React.SetStateAction<boolean>>;\n  setCurrentlyOpenedHandlerCallback: React.Dispatch<\n    React.SetStateAction<React.Dispatch<React.SetStateAction<boolean>>>\n  >;\n}\n\nexport const BoxedExpressionGlobalContext = React.createContext<BoxedExpressionGlobalContextProps>(\n  {} as BoxedExpressionGlobalContextProps\n);\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./EditExpressionMenu.css\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { DataType, ExpressionProps } from \"../../api\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\nimport { DataTypeSelector } from \"./DataTypeSelector\";\n\nexport interface EditExpressionMenuProps {\n  /** Optional children element to be considered for triggering the edit expression menu */\n  children?: React.ReactElement;\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement?: () => HTMLElement;\n  /** The label for the field 'Name' */\n  nameField?: string;\n  /** The label for the field 'Data Type' */\n  dataTypeField?: string;\n  /** The title of the popover menu */\n  title?: string;\n  /** The pre-selected data type */\n  selectedDataType?: DataType;\n  /** The pre-selected expression name */\n  selectedExpressionName: string;\n  /** Function to be called when the expression gets updated, passing the most updated version of it */\n  onExpressionUpdate: (expression: ExpressionProps) => void;\n}\n\nexport const EXPRESSION_NAME = \"Expression Name\";\n\nexport const EditExpressionMenu: React.FunctionComponent<EditExpressionMenuProps> = ({\n  children,\n  appendTo,\n  arrowPlacement,\n  title,\n  nameField,\n  dataTypeField,\n  selectedDataType = DataType.Undefined,\n  selectedExpressionName,\n  onExpressionUpdate,\n}: EditExpressionMenuProps) => {\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n  const { i18n } = useBoxedExpressionEditorI18n();\n  title = title ?? i18n.editExpression;\n  nameField = nameField ?? i18n.name;\n  dataTypeField = dataTypeField ?? i18n.dataType;\n  appendTo = appendTo ?? globalContext.boxedExpressionEditorRef?.current ?? undefined;\n\n  const [dataType, setDataType] = useState(selectedDataType);\n  const [expressionName, setExpressionName] = useState(selectedExpressionName);\n\n  useEffect(() => {\n    setExpressionName(selectedExpressionName);\n  }, [selectedExpressionName]);\n\n  useEffect(() => {\n    setDataType(selectedDataType);\n  }, [selectedDataType]);\n\n  const onExpressionNameChange = useCallback(\n    (event) => {\n      setExpressionName(event.target.value);\n      if (event.type === \"blur\") {\n        onExpressionUpdate({\n          name: event.target.value,\n          dataType,\n        });\n      }\n    },\n    [dataType, onExpressionUpdate]\n  );\n\n  const onDataTypeChange = useCallback(\n    (dataType: DataType) => {\n      setDataType(dataType);\n      onExpressionUpdate({\n        name: expressionName,\n        dataType: dataType,\n      });\n    },\n    [expressionName, onExpressionUpdate]\n  );\n\n  return (\n    <PopoverMenu\n      title={title}\n      arrowPlacement={arrowPlacement}\n      appendTo={appendTo}\n      body={\n        <div className=\"edit-expression-menu\">\n          <div className=\"expression-name\">\n            <label>{nameField}</label>\n            <input\n              type=\"text\"\n              id=\"expression-name\"\n              data-ouia-component-id=\"edit-expression-name\"\n              value={expressionName}\n              onChange={onExpressionNameChange}\n              onBlur={onExpressionNameChange}\n              className=\"form-control pf-c-form-control\"\n              placeholder={EXPRESSION_NAME}\n            />\n          </div>\n          <div className=\"expression-data-type\">\n            <label>{dataTypeField}</label>\n            <DataTypeSelector selectedDataType={dataType} onDataTypeChange={onDataTypeChange} />\n          </div>\n        </div>\n      }\n    >\n      {children}\n    </PopoverMenu>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./Resizer.css\";\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { ResizableBox } from \"react-resizable\";\n\nexport interface ResizerProps {\n  width: number;\n  height: number | \"100%\";\n  minWidth: number;\n  minHeight?: number;\n  onHorizontalResizeStop: (width: number) => void;\n  children?: React.ReactElement;\n}\n\nexport const DRAWER_SPLITTER_ELEMENT = (\n  <div className=\"pf-c-drawer__splitter pf-m-vertical\">\n    <div className=\"pf-c-drawer__splitter-handle\" />\n  </div>\n);\n\nexport const Resizer: React.FunctionComponent<ResizerProps> = ({\n  children,\n  height,\n  minHeight = 0,\n  minWidth,\n  onHorizontalResizeStop,\n  width,\n}) => {\n  const targetHeight = height === \"100%\" ? 0 : height;\n\n  const resizerHandler = useMemo(() => <div className=\"pf-c-drawer\">{DRAWER_SPLITTER_ELEMENT}</div>, []);\n\n  const onResizeStop = useCallback((e, data) => onHorizontalResizeStop(data.size.width), [onHorizontalResizeStop]);\n\n  return (\n    <ResizableBox\n      className={`${height === \"100%\" ? \"height-based-on-content\" : \"\"}`}\n      width={width}\n      height={targetHeight}\n      minConstraints={[minWidth, minHeight]}\n      axis=\"x\"\n      onResizeStop={onResizeStop}\n      handle={resizerHandler}\n    >\n      {children}\n    </ResizableBox>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./LiteralExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { DataType, ExpressionProps, LiteralExpressionProps, LogicType } from \"../../api\";\nimport { TextArea } from \"@patternfly/react-core\";\nimport { EditExpressionMenu, EXPRESSION_NAME } from \"../EditExpressionMenu\";\nimport { Resizer } from \"../Resizer\";\n\nexport const LiteralExpression: React.FunctionComponent<LiteralExpressionProps> = ({\n  uid,\n  content = \"\",\n  dataType = DataType.Undefined,\n  name = EXPRESSION_NAME,\n  onUpdatingNameAndDataType,\n  isHeadless = false,\n  onUpdatingRecursiveExpression,\n  width,\n}: LiteralExpressionProps) => {\n  const HEADER_WIDTH = 250;\n  const HEADER_HEIGHT = 40;\n\n  const [expressionName, setExpressionName] = useState<string>(name);\n  const [expressionDataType, setExpressionDataType] = useState<DataType>(dataType);\n  const literalExpressionContent = useRef<string>(content);\n  const literalExpressionWidth = useRef<number>(width || HEADER_WIDTH);\n\n  const spreadLiteralExpressionDefinition = useCallback(() => {\n    const expressionDefinition: LiteralExpressionProps = {\n      uid,\n      name: expressionName,\n      dataType: expressionDataType,\n      logicType: LogicType.LiteralExpression,\n      content: literalExpressionContent.current,\n      ...(!isHeadless && literalExpressionWidth.current !== HEADER_WIDTH\n        ? { width: literalExpressionWidth.current }\n        : {}),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(expressionDefinition)\n      : window.beeApi?.broadcastLiteralExpressionDefinition?.(expressionDefinition);\n  }, [expressionDataType, expressionName, isHeadless, onUpdatingRecursiveExpression, uid]);\n\n  const onExpressionUpdate = useCallback(\n    ({ dataType = DataType.Undefined, name = EXPRESSION_NAME }: ExpressionProps) => {\n      setExpressionName(name);\n      setExpressionDataType(dataType);\n      onUpdatingNameAndDataType?.(name, dataType);\n      spreadLiteralExpressionDefinition();\n    },\n    [onUpdatingNameAndDataType, spreadLiteralExpressionDefinition]\n  );\n\n  const onContentChange = useCallback(\n    (event) => {\n      literalExpressionContent.current = event.target.value;\n      spreadLiteralExpressionDefinition();\n    },\n    [spreadLiteralExpressionDefinition]\n  );\n\n  const onHorizontalResizeStop = useCallback(\n    (width) => {\n      literalExpressionWidth.current = width;\n      spreadLiteralExpressionDefinition();\n    },\n    [spreadLiteralExpressionDefinition]\n  );\n\n  const renderElementWithResizeHandler = useCallback(\n    (element) => (\n      <Resizer\n        width={literalExpressionWidth.current}\n        height={HEADER_HEIGHT}\n        minWidth={HEADER_WIDTH}\n        minHeight={HEADER_HEIGHT}\n        onHorizontalResizeStop={onHorizontalResizeStop}\n      >\n        {element}\n      </Resizer>\n    ),\n    [onHorizontalResizeStop]\n  );\n\n  const renderLiteralExpressionHeader = useMemo(() => {\n    return (\n      <div className=\"literal-expression-header\">\n        {renderElementWithResizeHandler(\n          <EditExpressionMenu\n            selectedExpressionName={expressionName}\n            selectedDataType={expressionDataType}\n            onExpressionUpdate={onExpressionUpdate}\n          >\n            <div className=\"expression-info\">\n              <p className=\"expression-name pf-u-text-truncate\">{expressionName}</p>\n              <p className=\"expression-data-type pf-u-text-truncate\">({expressionDataType})</p>\n            </div>\n          </EditExpressionMenu>\n        )}\n      </div>\n    );\n  }, [expressionDataType, expressionName, onExpressionUpdate, renderElementWithResizeHandler]);\n\n  const getBodyContent = useMemo(\n    () => (\n      <TextArea\n        defaultValue={literalExpressionContent.current}\n        onBlur={onContentChange}\n        aria-label=\"literal-expression-content\"\n      />\n    ),\n    [onContentChange]\n  );\n\n  useEffect(() => {\n    /** Function executed only the first time the component is loaded */\n    spreadLiteralExpressionDefinition();\n  }, [spreadLiteralExpressionDefinition]);\n\n  return (\n    <div className=\"literal-expression\">\n      {!isHeadless ? renderLiteralExpressionHeader : null}\n      <div className=\"literal-expression-body\">{getBodyContent}</div>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { TableHeaderVisibility } from \"../../api\";\nimport { Cell, Column, Row, TableInstance } from \"react-table\";\nimport { DRAWER_SPLITTER_ELEMENT } from \"../Resizer\";\n\nexport interface TableBodyProps {\n  /** Table instance */\n  tableInstance: TableInstance;\n  /** The way in which the header will be rendered */\n  headerVisibility?: TableHeaderVisibility;\n  /** Optional children element to be appended below the table content */\n  children?: React.ReactElement[];\n  /** Custom function for getting row key prop, and avoid using the row index */\n  getRowKey: (row: Row) => string;\n  /** Custom function for getting column key prop, and avoid using the column index */\n  getColumnKey: (column: Column) => string;\n}\n\nexport const TableBody: React.FunctionComponent<TableBodyProps> = ({\n  tableInstance,\n  children,\n  headerVisibility = TableHeaderVisibility.Full,\n  getRowKey,\n  getColumnKey,\n}) => {\n  const renderCellResizer = useCallback(\n    (cell: Cell) => (\n      <div\n        className=\"pf-c-drawer drawer-on-body\"\n        {...(cell.column.canResizeOnCell ? cell.column.getResizerProps() : {})}\n      >\n        {DRAWER_SPLITTER_ELEMENT}\n      </div>\n    ),\n    []\n  );\n\n  const renderCell = useCallback(\n    (cellIndex: number, cell: Cell, rowIndex: number) => {\n      const cellType = cellIndex === 0 ? \"counter-cell\" : \"data-cell\";\n      const canResize = cell.column.canResizeOnCell ? \"has-resizer\" : \"\";\n      return (\n        <Td\n          {...(cellIndex === 0 ? {} : cell.getCellProps())}\n          {...tableInstance.getTdProps(cellIndex, rowIndex)}\n          key={`${getColumnKey(cell.column)}-${cellIndex}`}\n          data-ouia-component-id={\"expression-column-\" + cellIndex}\n          className={`${cellType} ${canResize}`}\n        >\n          {cellIndex === 0 ? rowIndex + 1 : cell.render(\"Cell\")}\n          {cell.column.canResizeOnCell ? renderCellResizer(cell) : null}\n        </Td>\n      );\n    },\n    [getColumnKey, renderCellResizer, tableInstance]\n  );\n\n  const renderBodyRow = useCallback(\n    (row: Row, rowIndex: number) => (\n      <Tr\n        className=\"table-row\"\n        {...row.getRowProps()}\n        key={`${getRowKey(row)}-${rowIndex}`}\n        ouiaId={\"expression-row-\" + rowIndex}\n      >\n        {row.cells.map((cell: Cell, cellIndex: number) => renderCell(cellIndex, cell, rowIndex))}\n      </Tr>\n    ),\n    [getRowKey, renderCell]\n  );\n\n  const renderAdditiveRow = useMemo(\n    () => (\n      <Tr className=\"table-row additive-row\">\n        <Td role=\"cell\" className=\"empty-cell\">\n          <br />\n        </Td>\n        {children?.map((child, childIndex) => {\n          return (\n            <Td\n              role=\"cell\"\n              key={childIndex}\n              className=\"row-remainder-content\"\n              style={{\n                width: tableInstance.allColumns[childIndex + 1].width,\n                minWidth: tableInstance.allColumns[childIndex + 1].minWidth,\n              }}\n            >\n              {child}\n            </Td>\n          );\n        })}\n      </Tr>\n    ),\n    [children, tableInstance.allColumns]\n  );\n\n  return (\n    <Tbody\n      className={`${headerVisibility === TableHeaderVisibility.None ? \"missing-header\" : \"\"}`}\n      {...tableInstance.getTableBodyProps()}\n    >\n      {tableInstance.rows.map((row: Row, rowIndex: number) => {\n        tableInstance.prepareRow(row);\n        return renderBodyRow(row, rowIndex);\n      })}\n      {children ? renderAdditiveRow : null}\n    </Tbody>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./TableHandlerMenu.css\";\nimport * as React from \"react\";\nimport { Menu, MenuGroup, MenuItem, MenuList } from \"@patternfly/react-core\";\nimport { AllowedOperations, TableHandlerConfiguration, TableOperation } from \"../../api\";\nimport * as _ from \"lodash\";\n\nexport interface TableHandlerMenuProps {\n  /** Handler menu groups and items */\n  handlerConfiguration: TableHandlerConfiguration;\n  /** Dynamic Allowed operations */\n  allowedOperations: AllowedOperations;\n  /** Function to be executed when an operation gets selected */\n  onOperation: (operation: TableOperation) => void;\n}\n\nexport const TableHandlerMenu: React.FunctionComponent<TableHandlerMenuProps> = ({\n  handlerConfiguration,\n  allowedOperations,\n  onOperation,\n}) => {\n  return (\n    <Menu\n      ouiaId=\"expression-table-handler-menu\"\n      className=\"table-handler-menu\"\n      onSelect={(event, itemId) => onOperation(itemId)}\n    >\n      {handlerConfiguration.map((groupOperation) => (\n        <MenuGroup\n          key={groupOperation.group}\n          label={groupOperation.group}\n          className={\n            _.every(groupOperation.items, (operation) => !_.includes(allowedOperations, operation.type))\n              ? \"no-allowed-actions-in-group\"\n              : \"\"\n          }\n        >\n          <MenuList>\n            {groupOperation.items.map((operation) => (\n              <MenuItem\n                data-ouia-component-id={\"expression-table-handler-menu-\" + operation.name}\n                key={operation.type}\n                itemId={operation.type}\n                isDisabled={!_.includes(allowedOperations, operation.type)}\n              >\n                {operation.name}\n              </MenuItem>\n            ))}\n          </MenuList>\n        </MenuGroup>\n      ))}\n    </Menu>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { DataType, TableHandlerConfiguration, TableOperation } from \"../../api\";\nimport * as _ from \"lodash\";\nimport { Column, ColumnInstance, DataRecord } from \"react-table\";\nimport { Popover } from \"@patternfly/react-core\";\nimport { TableHandlerMenu } from \"./TableHandlerMenu\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\n\nexport interface TableHandlerProps {\n  /** The prefix to be used for the column name */\n  columnPrefix: string;\n  /** Columns instance */\n  tableColumns: React.MutableRefObject<Column[]>;\n  /** Last selected column index */\n  lastSelectedColumnIndex: number;\n  /** Last selected row index */\n  lastSelectedRowIndex: number;\n  /** Rows instance */\n  tableRows: React.MutableRefObject<DataRecord[]>;\n  /** Function to be executed when one or more rows are modified */\n  onRowsUpdate: (rows: DataRecord[]) => void;\n  /** Function to be executed when adding a new row to the table */\n  onRowAdding: () => DataRecord;\n  /** Show/hide table handler */\n  showTableHandler: boolean;\n  /** Function to programmatically show/hide table handler */\n  setShowTableHandler: React.Dispatch<React.SetStateAction<boolean>>;\n  /** Target for showing the table handler  */\n  tableHandlerTarget: HTMLElement;\n  /** Custom configuration for the table handler */\n  handlerConfiguration: TableHandlerConfiguration;\n  /** Table handler allowed operations */\n  tableHandlerAllowedOperations: TableOperation[];\n  /** Custom function called for manually resetting a row */\n  resetRowCustomFunction?: (row: DataRecord) => DataRecord;\n  /** Function to be executed when columns are modified */\n  onColumnsUpdate: (columns: Column[]) => void;\n}\n\nexport const TableHandler: React.FunctionComponent<TableHandlerProps> = ({\n  columnPrefix,\n  tableColumns,\n  lastSelectedColumnIndex,\n  lastSelectedRowIndex,\n  tableRows,\n  onRowsUpdate,\n  onRowAdding,\n  showTableHandler,\n  setShowTableHandler,\n  tableHandlerTarget,\n  handlerConfiguration,\n  tableHandlerAllowedOperations,\n  resetRowCustomFunction = () => ({}),\n  onColumnsUpdate,\n}) => {\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const [selectedColumnIndex, setSelectedColumnIndex] = useState(lastSelectedColumnIndex);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(lastSelectedRowIndex);\n\n  useEffect(() => {\n    setSelectedColumnIndex(lastSelectedColumnIndex);\n  }, [lastSelectedColumnIndex]);\n\n  useEffect(() => {\n    setSelectedRowIndex(lastSelectedRowIndex);\n  }, [lastSelectedRowIndex]);\n\n  const insertBefore = <T extends unknown>(elements: T[], index: number, element: T) => {\n    return [...elements.slice(0, index), element, ...elements.slice(index)];\n  };\n\n  const insertAfter = <T extends unknown>(elements: T[], index: number, element: T) => {\n    return [...elements.slice(0, index + 1), element, ...elements.slice(index + 1)];\n  };\n\n  const deleteAt = <T extends unknown>(elements: T[], index: number) => {\n    return [...elements.slice(0, index), ...elements.slice(index + 1)];\n  };\n\n  const clearAt = <T extends unknown>(elements: T[], index: number) => {\n    return [\n      ...elements.slice(0, index),\n      resetRowCustomFunction(elements[index] as DataRecord),\n      ...elements.slice(index + 1),\n    ];\n  };\n\n  const generateNextAvailableColumnName: (lastIndex: number) => string = useCallback(\n    (lastIndex) => {\n      const candidateName = `${columnPrefix}${lastIndex}`;\n      const columnWithCandidateName = _.find(tableColumns.current, { accessor: candidateName });\n      return columnWithCandidateName ? generateNextAvailableColumnName(lastIndex + 1) : candidateName;\n    },\n    [columnPrefix, tableColumns]\n  );\n\n  const generateNextAvailableColumn = useCallback(\n    (columns: Column[]) => {\n      return {\n        accessor: generateNextAvailableColumnName(columns.length),\n        label: generateNextAvailableColumnName(columns.length),\n        dataType: DataType.Undefined,\n      } as ColumnInstance;\n    },\n    [generateNextAvailableColumnName]\n  );\n\n  /** These column operations have impact also on the collection of cells */\n  const updateColumnsThenRows = useCallback(\n    (columns) => {\n      onColumnsUpdate(columns);\n      onRowsUpdate(tableRows.current);\n    },\n    [onColumnsUpdate, onRowsUpdate, tableRows]\n  );\n\n  const handlingOperation = useCallback(\n    (tableOperation: TableOperation) => {\n      switch (tableOperation) {\n        case TableOperation.ColumnInsertLeft:\n          updateColumnsThenRows(\n            insertBefore(tableColumns.current, selectedColumnIndex, generateNextAvailableColumn(tableColumns.current))\n          );\n          break;\n        case TableOperation.ColumnInsertRight:\n          updateColumnsThenRows(\n            insertAfter(tableColumns.current, selectedColumnIndex, generateNextAvailableColumn(tableColumns.current))\n          );\n          break;\n        case TableOperation.ColumnDelete:\n          updateColumnsThenRows(deleteAt(tableColumns.current, selectedColumnIndex));\n          break;\n        case TableOperation.RowInsertAbove:\n          onRowsUpdate(insertBefore(tableRows.current, selectedRowIndex, onRowAdding()));\n          break;\n        case TableOperation.RowInsertBelow:\n          onRowsUpdate(insertAfter(tableRows.current, selectedRowIndex, onRowAdding()));\n          break;\n        case TableOperation.RowDelete:\n          onRowsUpdate(deleteAt(tableRows.current, selectedRowIndex));\n          break;\n        case TableOperation.RowClear:\n          onRowsUpdate(clearAt(tableRows.current, selectedRowIndex));\n          break;\n      }\n      setShowTableHandler(false);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      generateNextAvailableColumn,\n      updateColumnsThenRows,\n      onRowAdding,\n      onRowsUpdate,\n      selectedColumnIndex,\n      selectedRowIndex,\n      setShowTableHandler,\n      tableColumns,\n      tableRows,\n    ]\n  );\n\n  return useMemo(\n    () => (\n      <Popover\n        className=\"table-handler\"\n        hasNoPadding\n        showClose={false}\n        distance={5}\n        position={\"right\"}\n        isVisible={showTableHandler}\n        shouldClose={() => setShowTableHandler(false)}\n        shouldOpen={(showFunction) => showFunction?.()}\n        reference={() => tableHandlerTarget}\n        appendTo={globalContext.boxedExpressionEditorRef?.current ?? undefined}\n        bodyContent={\n          <TableHandlerMenu\n            handlerConfiguration={handlerConfiguration}\n            allowedOperations={tableHandlerAllowedOperations}\n            onOperation={handlingOperation}\n          />\n        }\n      />\n    ),\n    [\n      showTableHandler,\n      globalContext.boxedExpressionEditorRef,\n      handlerConfiguration,\n      tableHandlerAllowedOperations,\n      handlingOperation,\n      setShowTableHandler,\n      tableHandlerTarget,\n    ]\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { Th, Thead, Tr } from \"@patternfly/react-table\";\nimport * as _ from \"lodash\";\nimport { Column, ColumnInstance, DataRecord, HeaderGroup, TableInstance } from \"react-table\";\nimport { EditExpressionMenu } from \"../EditExpressionMenu\";\nimport { DataType, TableHeaderVisibility } from \"../../api\";\nimport { DRAWER_SPLITTER_ELEMENT } from \"../Resizer\";\n\nexport interface TableHeaderProps {\n  /** Table instance */\n  tableInstance: TableInstance;\n  /** Rows instance */\n  tableRows: React.MutableRefObject<DataRecord[]>;\n  /** Function to be executed when one or more rows are modified */\n  onRowsUpdate: (rows: DataRecord[]) => void;\n  /** Optional label to be used for the edit popover that appears when clicking on column header */\n  editColumnLabel?: string;\n  /** The way in which the header will be rendered */\n  headerVisibility?: TableHeaderVisibility;\n  /** True, for skipping the creation in the DOM of the last defined header group */\n  skipLastHeaderGroup: boolean;\n  /** Custom function for getting column key prop, and avoid using the column index */\n  getColumnKey: (column: Column) => string;\n  /** Columns instance */\n  tableColumns: React.MutableRefObject<Column[]>;\n  /** Function to be executed when columns are modified */\n  onColumnsUpdate: (columns: Column[]) => void;\n}\n\nexport const TableHeader: React.FunctionComponent<TableHeaderProps> = ({\n  tableInstance,\n  tableRows,\n  onRowsUpdate,\n  editColumnLabel,\n  headerVisibility = TableHeaderVisibility.Full,\n  skipLastHeaderGroup,\n  getColumnKey,\n  tableColumns,\n  onColumnsUpdate,\n}) => {\n  const updateColumnNameInRows = useCallback(\n    (prevColumnName: string, newColumnName: string) =>\n      onRowsUpdate(\n        _.map(tableRows.current, (tableCells) => {\n          const assignedCellValue = tableCells[prevColumnName]!;\n          delete tableCells[prevColumnName];\n          tableCells[newColumnName] = assignedCellValue;\n          return tableCells;\n        })\n      ),\n    [onRowsUpdate, tableRows]\n  );\n\n  const onColumnNameOrDataTypeUpdate = useCallback(\n    (columnIndex: number) => {\n      return ({ name = \"\", dataType = DataType.Undefined }) => {\n        const prevColumnName = (tableColumns.current[columnIndex] as ColumnInstance).accessor as string;\n        const updatedTableColumns = [...tableColumns.current] as ColumnInstance[];\n        updatedTableColumns[columnIndex].label = name;\n        updatedTableColumns[columnIndex].accessor = name;\n        updatedTableColumns[columnIndex].dataType = dataType;\n        onColumnsUpdate(updatedTableColumns);\n        if (name !== prevColumnName) {\n          updateColumnNameInRows(prevColumnName, name);\n        }\n      };\n    },\n    [onColumnsUpdate, tableColumns, updateColumnNameInRows]\n  );\n\n  const renderCountColumn = useCallback(\n    (column: ColumnInstance, columnIndex: number) => (\n      <Th\n        {...column.getHeaderProps()}\n        className=\"fixed-column no-clickable-cell\"\n        key={`${getColumnKey(column)}-${columnIndex}`}\n      >\n        <div className=\"header-cell\" data-ouia-component-type=\"expression-column-header\">\n          {column.label}\n        </div>\n      </Th>\n    ),\n    [getColumnKey]\n  );\n\n  const renderHeaderCellInfo = useCallback(\n    (column) => (\n      <div className=\"header-cell-info\" data-ouia-component-type=\"expression-column-header-cell-info\">\n        {column.headerCellElement ? column.headerCellElement : <p className=\"pf-u-text-truncate\">{column.label}</p>}\n        {column.dataType ? <p className=\"pf-u-text-truncate data-type\">({column.dataType})</p> : null}\n      </div>\n    ),\n    []\n  );\n\n  const renderResizableHeaderCell = useCallback(\n    (column, columnIndex) => (\n      <Th\n        {...column.getHeaderProps()}\n        {...tableInstance.getThProps(column, columnIndex)}\n        className={`resizable-column ${!column.dataType ? \"no-clickable-cell\" : null}`}\n        key={`${getColumnKey(column)}-${columnIndex}`}\n      >\n        <div className=\"header-cell\" data-ouia-component-type=\"expression-column-header\">\n          {column.dataType ? (\n            <EditExpressionMenu\n              title={editColumnLabel}\n              selectedExpressionName={column.label}\n              selectedDataType={column.dataType}\n              onExpressionUpdate={onColumnNameOrDataTypeUpdate(columnIndex)}\n              key={`${getColumnKey(column)}-${columnIndex}`}\n            >\n              {renderHeaderCellInfo(column)}\n            </EditExpressionMenu>\n          ) : (\n            renderHeaderCellInfo(column)\n          )}\n          <div\n            className={`pf-c-drawer ${!column.canResize ? \"resizer-disabled\" : \"\"}`}\n            {...(column.canResize ? column.getResizerProps() : {})}\n          >\n            {DRAWER_SPLITTER_ELEMENT}\n          </div>\n        </div>\n      </Th>\n    ),\n    [editColumnLabel, getColumnKey, onColumnNameOrDataTypeUpdate, renderHeaderCellInfo, tableInstance]\n  );\n\n  const renderColumn = useCallback(\n    (column: ColumnInstance, columnIndex: number) =>\n      column.isCountColumn ? renderCountColumn(column, columnIndex) : renderResizableHeaderCell(column, columnIndex),\n    [renderCountColumn, renderResizableHeaderCell]\n  );\n\n  const getHeaderGroups = useCallback(\n    (tableInstance) => {\n      return skipLastHeaderGroup ? _.dropRight(tableInstance.headerGroups) : tableInstance.headerGroups;\n    },\n    [skipLastHeaderGroup]\n  );\n\n  const renderHeaderGroups = useMemo(\n    () =>\n      getHeaderGroups(tableInstance).map((headerGroup: HeaderGroup) => (\n        <Tr key={headerGroup.getHeaderGroupProps().key} {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map((column: ColumnInstance, columnIndex: number) => renderColumn(column, columnIndex))}\n        </Tr>\n      )),\n    [getHeaderGroups, renderColumn, tableInstance]\n  );\n\n  const renderAtLevelInHeaderGroups = useCallback(\n    (level: number) => (\n      <Tr>\n        {_.nth(\n          tableInstance.headerGroups as HeaderGroup[],\n          level\n        )!.headers.map((column: ColumnInstance, columnIndex: number) => renderColumn(column, columnIndex))}\n      </Tr>\n    ),\n    [renderColumn, tableInstance.headerGroups]\n  );\n\n  switch (headerVisibility) {\n    case TableHeaderVisibility.Full:\n      return <Thead noWrap>{renderHeaderGroups}</Thead>;\n    case TableHeaderVisibility.LastLevel:\n      return <Thead noWrap>{renderAtLevelInHeaderGroups(-1)}</Thead>;\n    case TableHeaderVisibility.SecondToLastLevel:\n      return <Thead noWrap>{renderAtLevelInHeaderGroups(-2)}</Thead>;\n    default:\n      return null;\n  }\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./Table.css\";\nimport {\n  Column,\n  ColumnInstance,\n  ContextMenuEvent,\n  DataRecord,\n  useBlockLayout,\n  useResizeColumns,\n  useTable,\n} from \"react-table\";\nimport { TableComposable } from \"@patternfly/react-table\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { EditableCell } from \"./EditableCell\";\nimport { TableHeaderVisibility, TableOperation, TableProps } from \"../../api\";\nimport * as _ from \"lodash\";\nimport { TableBody } from \"./TableBody\";\nimport { TableHandler } from \"./TableHandler\";\nimport { TableHeader } from \"./TableHeader\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\n\nexport const NO_TABLE_CONTEXT_MENU_CLASS = \"no-table-context-menu\";\nconst NUMBER_OF_ROWS_COLUMN = \"#\";\nconst NUMBER_OF_ROWS_SUBCOLUMN = \"0\";\n\nexport const Table: React.FunctionComponent<TableProps> = ({\n  tableId,\n  children,\n  columnPrefix = \"column-\",\n  editColumnLabel,\n  onColumnsUpdate,\n  onRowsUpdate,\n  onRowAdding = () => ({}),\n  controllerCell = NUMBER_OF_ROWS_COLUMN,\n  defaultCell,\n  rows,\n  columns,\n  handlerConfiguration,\n  headerVisibility,\n  headerLevels = 0,\n  skipLastHeaderGroup = false,\n  getRowKey = (row) => row.id as string,\n  getColumnKey = (column) => column.id as string,\n  resetRowCustomFunction,\n}: TableProps) => {\n  const tableRef = useRef<HTMLTableElement>(null);\n\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const [currentControllerCell, setCurrentControllerCell] = useState(controllerCell);\n\n  const generateNumberOfRowsSubColumnRecursively: (column: ColumnInstance, headerLevels: number) => void = useCallback(\n    (column, headerLevels) => {\n      if (headerLevels > 0) {\n        _.assign(column, {\n          columns: [\n            {\n              label: headerVisibility === TableHeaderVisibility.Full ? NUMBER_OF_ROWS_SUBCOLUMN : currentControllerCell,\n              accessor: NUMBER_OF_ROWS_SUBCOLUMN,\n              minWidth: 60,\n              width: 60,\n              disableResizing: true,\n              isCountColumn: true,\n              hideFilter: true,\n            },\n          ],\n        });\n\n        generateNumberOfRowsSubColumnRecursively(column.columns[0], headerLevels - 1);\n      }\n    },\n    [currentControllerCell, headerVisibility]\n  );\n\n  const generateNumberOfRowsColumn = useCallback(\n    (currentControllerCell: string | JSX.Element, columns: Column[]) => {\n      const numberOfRowsColumn = {\n        label: currentControllerCell,\n        accessor: NUMBER_OF_ROWS_COLUMN,\n        width: 60,\n        minWidth: 60,\n        isCountColumn: true,\n      } as ColumnInstance;\n      generateNumberOfRowsSubColumnRecursively(numberOfRowsColumn, headerLevels);\n      return [numberOfRowsColumn, ...columns];\n    },\n    [generateNumberOfRowsSubColumnRecursively, headerLevels]\n  );\n\n  const tableColumns = useRef<Column[]>(generateNumberOfRowsColumn(currentControllerCell, columns));\n  const tableRows = useRef<DataRecord[]>(rows);\n  const [showTableHandler, setShowTableHandler] = useState(false);\n  const [tableHandlerTarget, setTableHandlerTarget] = useState(document.body);\n  const [tableHandlerAllowedOperations, setTableHandlerAllowedOperations] = useState(\n    _.values(TableOperation).map((operation) => parseInt(operation.toString()))\n  );\n  const [lastSelectedColumnIndex, setLastSelectedColumnIndex] = useState(-1);\n  const [lastSelectedRowIndex, setLastSelectedRowIndex] = useState(-1);\n\n  useEffect(() => {\n    tableColumns.current = generateNumberOfRowsColumn(controllerCell, tableColumns.current.slice(1));\n    setCurrentControllerCell(controllerCell);\n  }, [controllerCell, generateNumberOfRowsColumn]);\n\n  useEffect(() => {\n    tableColumns.current = generateNumberOfRowsColumn(currentControllerCell, columns);\n    // Watching for external changes of the columns\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columns]);\n\n  useEffect(() => {\n    tableRows.current = rows;\n    // Watching for external changes of the rows\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rows]);\n\n  const onColumnsUpdateCallback = useCallback(\n    (columns: Column[]) => {\n      tableColumns.current = columns;\n      onColumnsUpdate?.(columns.slice(1)); //Removing \"# of rows\" column\n    },\n    [onColumnsUpdate]\n  );\n\n  const onRowsUpdateCallback = useCallback(\n    (rows: DataRecord[]) => {\n      tableRows.current = rows;\n      onRowsUpdate?.(rows);\n    },\n    [onRowsUpdate]\n  );\n\n  const onCellUpdate = useCallback(\n    (rowIndex: number, columnId: string, value: string) => {\n      const updatedTableCells = [...tableRows.current];\n      updatedTableCells[rowIndex][columnId] = value;\n      onRowsUpdateCallback(updatedTableCells);\n    },\n    [onRowsUpdateCallback]\n  );\n\n  const onRowUpdate = useCallback(\n    (rowIndex: number, updatedRow: DataRecord) => {\n      const updatedRows = [...tableRows.current];\n      updatedRows[rowIndex] = updatedRow;\n      onRowsUpdateCallback(updatedRows);\n    },\n    [onRowsUpdateCallback]\n  );\n\n  const defaultColumn = {\n    minWidth: 150,\n    width: 150,\n    Cell: useCallback((cellRef) => {\n      const column = cellRef.column as ColumnInstance;\n      if (column.isCountColumn) {\n        return cellRef.value;\n      } else {\n        return defaultCell ? defaultCell[column.id](cellRef) : EditableCell(cellRef);\n      }\n      // Table performance optimization: no need to re-render cells, since nested component themselves will re-render\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []),\n  };\n\n  const contextMenuIsAvailable = (target: HTMLElement) => {\n    const targetIsContainedInCurrentTable = target.closest(\"table\") === tableRef.current;\n    const contextMenuAvailableForTarget = !target.classList.contains(NO_TABLE_CONTEXT_MENU_CLASS);\n    return targetIsContainedInCurrentTable && contextMenuAvailableForTarget;\n  };\n\n  const tableHandlerStateUpdate = (target: HTMLElement, columnIndex: number) => {\n    setTableHandlerTarget(target);\n    globalContext.currentlyOpenedHandlerCallback?.(false);\n    setShowTableHandler(true);\n    globalContext.setCurrentlyOpenedHandlerCallback?.(() => setShowTableHandler);\n    setLastSelectedColumnIndex(columnIndex);\n  };\n\n  const getThProps = (column: ColumnInstance, columnIndex: number) => ({\n    onContextMenu: (e: ContextMenuEvent) => {\n      const target = e.target as HTMLElement;\n      const handlerOnHeaderIsAvailable = !column.disableHandlerOnHeader;\n      if (contextMenuIsAvailable(target) && handlerOnHeaderIsAvailable) {\n        e.preventDefault();\n        setTableHandlerAllowedOperations([\n          TableOperation.ColumnInsertLeft,\n          TableOperation.ColumnInsertRight,\n          ...(tableColumns.current.length > 2 && columnIndex > 0 ? [TableOperation.ColumnDelete] : []),\n        ]);\n        tableHandlerStateUpdate(target, columnIndex);\n      }\n    },\n  });\n\n  const getTdProps = (columnIndex: number, rowIndex: number) => ({\n    onContextMenu: (e: ContextMenuEvent) => {\n      const target = e.target as HTMLElement;\n      if (contextMenuIsAvailable(target)) {\n        e.preventDefault();\n        setTableHandlerAllowedOperations([\n          TableOperation.ColumnInsertLeft,\n          TableOperation.ColumnInsertRight,\n          ...(tableColumns.current.length > 2 && columnIndex > 0 ? [TableOperation.ColumnDelete] : []),\n          TableOperation.RowInsertAbove,\n          TableOperation.RowInsertBelow,\n          ...(tableRows.current.length > 1 ? [TableOperation.RowDelete] : []),\n          TableOperation.RowClear,\n        ]);\n        tableHandlerStateUpdate(target, columnIndex);\n        setLastSelectedRowIndex(rowIndex);\n      }\n    },\n  });\n\n  const tableInstance = useTable(\n    {\n      columns: tableColumns.current,\n      data: tableRows.current,\n      defaultColumn,\n      onCellUpdate,\n      onRowUpdate,\n      getThProps,\n      getTdProps,\n    },\n    useBlockLayout,\n    useResizeColumns\n  );\n\n  const resizeNestedColumns = (columns: ColumnInstance[], accessor: string, updatedWidth: number) => {\n    const columnIndex = _.findIndex(columns, { accessor });\n    if (columnIndex >= 0) {\n      const updatedColumn = { ...columns[columnIndex] };\n      updatedColumn.width = updatedWidth;\n      columns.splice(columnIndex, 1, updatedColumn);\n    } else {\n      _.forEach(columns, (column) => resizeNestedColumns(column.columns, accessor, updatedWidth));\n    }\n  };\n\n  const finishedResizing =\n    tableInstance.state.columnResizing.isResizingColumn === null &&\n    !_.isEmpty(tableInstance.state.columnResizing.columnWidths);\n  useEffect(() => {\n    if (finishedResizing) {\n      _.forEach(tableInstance.state.columnResizing.columnWidths, (updatedColumnWidth, accessor) =>\n        resizeNestedColumns(tableColumns.current as ColumnInstance[], accessor, updatedColumnWidth)\n      );\n      onColumnsUpdateCallback(tableColumns.current);\n    }\n    // Need to consider a change only when resizing is finished (no other dependencies to consider for this useEffect)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [finishedResizing]);\n\n  return (\n    <div className={`table-component ${tableId}`}>\n      <TableComposable variant=\"compact\" {...tableInstance.getTableProps()} ref={tableRef}>\n        <TableHeader\n          tableInstance={tableInstance}\n          editColumnLabel={editColumnLabel}\n          headerVisibility={headerVisibility}\n          skipLastHeaderGroup={skipLastHeaderGroup}\n          tableRows={tableRows}\n          onRowsUpdate={onRowsUpdateCallback}\n          tableColumns={tableColumns}\n          getColumnKey={getColumnKey}\n          onColumnsUpdate={onColumnsUpdateCallback}\n        />\n        <TableBody\n          tableInstance={tableInstance}\n          getRowKey={getRowKey}\n          getColumnKey={getColumnKey}\n          headerVisibility={headerVisibility}\n        >\n          {children}\n        </TableBody>\n      </TableComposable>\n      {showTableHandler && handlerConfiguration ? (\n        <TableHandler\n          tableColumns={tableColumns}\n          columnPrefix={columnPrefix}\n          handlerConfiguration={handlerConfiguration}\n          lastSelectedColumnIndex={lastSelectedColumnIndex}\n          lastSelectedRowIndex={lastSelectedRowIndex}\n          tableRows={tableRows}\n          onRowsUpdate={onRowsUpdateCallback}\n          onRowAdding={onRowAdding}\n          showTableHandler={showTableHandler}\n          setShowTableHandler={setShowTableHandler}\n          tableHandlerAllowedOperations={tableHandlerAllowedOperations}\n          tableHandlerTarget={tableHandlerTarget}\n          resetRowCustomFunction={resetRowCustomFunction}\n          onColumnsUpdate={onColumnsUpdateCallback}\n        />\n      ) : null}\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { ChangeEvent, useCallback, useEffect } from \"react\";\nimport { CellProps } from \"../../api\";\n\nexport interface EditableCellProps extends CellProps {\n  /** Cell's value */\n  value: string;\n  /** Function executed each time a cell gets updated */\n  onCellUpdate: (rowIndex: number, columnId: string, value: string) => void;\n}\n\nexport const EditableCell: React.FunctionComponent<EditableCellProps> = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  onCellUpdate,\n}: EditableCellProps) => {\n  const [value, setValue] = React.useState(initialValue);\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  const onChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setValue(e.target.value);\n  }, []);\n\n  const onBlur = useCallback(() => {\n    onCellUpdate(index, id, value);\n  }, [id, index, value, onCellUpdate]);\n\n  return <textarea value={value || \"\"} onChange={onChange} onBlur={onBlur} />;\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./RelationExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport \"@patternfly/patternfly/utilities/Text/text.css\";\nimport { Column as RelationColumn, DataType, RelationProps, Row, TableOperation } from \"../../api\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport * as _ from \"lodash\";\nimport { Column, ColumnInstance, DataRecord } from \"react-table\";\n\nexport const RelationExpression: React.FunctionComponent<RelationProps> = (relationProps: RelationProps) => {\n  const FIRST_COLUMN_NAME = \"column-1\";\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const handlerConfiguration = [\n    {\n      group: i18n.columns,\n      items: [\n        { name: i18n.columnOperations.insertLeft, type: TableOperation.ColumnInsertLeft },\n        { name: i18n.columnOperations.insertRight, type: TableOperation.ColumnInsertRight },\n        { name: i18n.columnOperations.delete, type: TableOperation.ColumnDelete },\n      ],\n    },\n    {\n      group: i18n.rows,\n      items: [\n        { name: i18n.rowOperations.insertAbove, type: TableOperation.RowInsertAbove },\n        { name: i18n.rowOperations.insertBelow, type: TableOperation.RowInsertBelow },\n        { name: i18n.rowOperations.delete, type: TableOperation.RowDelete },\n      ],\n    },\n  ];\n\n  const tableColumns = useRef<RelationColumn[]>(\n    relationProps.columns === undefined\n      ? [{ name: FIRST_COLUMN_NAME, dataType: DataType.Undefined }]\n      : relationProps.columns\n  );\n\n  const tableRows = useRef<Row[]>(relationProps.rows === undefined ? [[\"\"]] : relationProps.rows);\n\n  const spreadRelationExpressionDefinition = useCallback(() => {\n    const expressionDefinition = {\n      ...relationProps,\n      columns: tableColumns.current,\n      rows: tableRows.current,\n    };\n    relationProps.isHeadless\n      ? relationProps.onUpdatingRecursiveExpression?.(expressionDefinition)\n      : window.beeApi?.broadcastRelationExpressionDefinition?.(expressionDefinition);\n  }, [relationProps]);\n\n  const convertColumnsForTheTable = useCallback(\n    () =>\n      _.map(\n        tableColumns.current,\n        (column: RelationColumn) =>\n          ({\n            label: column.name,\n            accessor: column.name,\n            dataType: column.dataType,\n            ...(column.width ? { width: column.width } : {}),\n          } as Column)\n      ),\n    []\n  );\n\n  const convertRowsForTheTable = useCallback(\n    () =>\n      _.map(tableRows.current, (row) =>\n        _.reduce(\n          tableColumns.current,\n          (tableRow: DataRecord, column, columnIndex) => {\n            tableRow[column.name] = row[columnIndex] || \"\";\n            return tableRow;\n          },\n          {}\n        )\n      ),\n    []\n  );\n\n  const onSavingRows = useCallback(\n    (rows: DataRecord[]) => {\n      tableRows.current = _.map(rows, (tableRow: DataRecord) =>\n        _.reduce(\n          tableColumns.current,\n          (row: string[], column: RelationColumn) => {\n            row.push((tableRow[column.name]! as string) || \"\");\n            return row;\n          },\n          []\n        )\n      );\n      spreadRelationExpressionDefinition();\n    },\n    [spreadRelationExpressionDefinition]\n  );\n\n  const onSavingColumns = useCallback(\n    (columns) => {\n      tableColumns.current = _.map(columns, (columnInstance: ColumnInstance) => ({\n        name: columnInstance.accessor,\n        dataType: columnInstance.dataType,\n        width: columnInstance.width,\n      }));\n      spreadRelationExpressionDefinition();\n    },\n    [spreadRelationExpressionDefinition]\n  );\n\n  useEffect(() => {\n    /** Function executed only the first time the component is loaded */\n    spreadRelationExpressionDefinition();\n  }, [spreadRelationExpressionDefinition]);\n\n  return (\n    <div className=\"relation-expression\">\n      <Table\n        columnPrefix=\"column-\"\n        editColumnLabel={i18n.editRelation}\n        columns={convertColumnsForTheTable()}\n        rows={convertRowsForTheTable()}\n        onColumnsUpdate={onSavingColumns}\n        onRowsUpdate={onSavingRows}\n        handlerConfiguration={handlerConfiguration}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExpressionProps, LogicType } from \"../../api\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { LogicTypeSelector } from \"../LogicTypeSelector\";\nimport * as _ from \"lodash\";\n\nexport interface ContextEntryExpressionProps {\n  /** The expression wrapped by the entry */\n  expression: ExpressionProps;\n  /** Function invoked when updating expression */\n  onUpdatingRecursiveExpression: (expression: ExpressionProps) => void;\n  /** Function invoked when resetting expression */\n  onExpressionResetting?: () => void;\n}\n\nexport const ContextEntryExpression: React.FunctionComponent<ContextEntryExpressionProps> = ({\n  expression,\n  onUpdatingRecursiveExpression,\n  onExpressionResetting,\n}) => {\n  const expressionContainerRef = useRef<HTMLDivElement>(null);\n\n  const entryExpression = useRef(expression);\n\n  useEffect(() => {\n    entryExpression.current = _.omit(expression, \"isHeadless\");\n    // Every time, for an expression, its logic type changes, it means that corresponding entry has been just updated\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expression.logicType]);\n\n  const getLogicTypeSelectorRef = useCallback(() => {\n    return expressionContainerRef.current!;\n  }, []);\n\n  const onLogicTypeUpdating = useCallback(\n    (logicType) => {\n      entryExpression.current.logicType = logicType;\n      onUpdatingRecursiveExpression(_.omit(entryExpression.current, \"isHeadless\"));\n    },\n    [onUpdatingRecursiveExpression]\n  );\n\n  const onLogicTypeResetting = useCallback(() => {\n    entryExpression.current.logicType = LogicType.Undefined;\n    onExpressionResetting?.();\n    onUpdatingRecursiveExpression(_.omit(entryExpression.current, \"isHeadless\"));\n  }, [onExpressionResetting, onUpdatingRecursiveExpression]);\n\n  return (\n    <div className=\"entry-expression\" ref={expressionContainerRef}>\n      <LogicTypeSelector\n        isHeadless={true}\n        onUpdatingRecursiveExpression={onUpdatingRecursiveExpression}\n        selectedExpression={entryExpression.current}\n        onLogicTypeUpdating={onLogicTypeUpdating}\n        onLogicTypeResetting={onLogicTypeResetting}\n        getPlacementRef={getLogicTypeSelectorRef}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ContextEntryExpressionCell.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { CellProps, ContextEntries, ExpressionProps } from \"../../api\";\nimport { DataRecord } from \"react-table\";\nimport { ContextEntryExpression } from \"./ContextEntryExpression\";\n\nexport interface ContextEntryExpressionCellProps extends CellProps {\n  data: ContextEntries;\n  onRowUpdate: (rowIndex: number, updatedRow: DataRecord) => void;\n}\n\nexport const ContextEntryExpressionCell: React.FunctionComponent<ContextEntryExpressionCellProps> = ({\n  data,\n  row: { index },\n  onRowUpdate,\n}) => {\n  const contextEntry = data[index];\n\n  const entryExpression = useRef({\n    uid: contextEntry.entryExpression.uid,\n    ...contextEntry.entryExpression,\n  } as ExpressionProps);\n\n  useEffect(() => {\n    entryExpression.current = contextEntry.entryExpression;\n    onRowUpdate(index, { ...contextEntry, entryExpression: entryExpression.current });\n    // Every time, for an expression, its logic type changes, it means that corresponding entry has been just updated\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contextEntry.entryExpression.logicType]);\n\n  const onUpdatingRecursiveExpression = useCallback((expression: ExpressionProps) => {\n    entryExpression.current = expression;\n    onRowUpdate(index, { ...contextEntry, entryExpression: expression });\n    // Callback should never change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"context-entry-expression-cell\">\n      <ContextEntryExpression\n        expression={entryExpression.current}\n        onUpdatingRecursiveExpression={onUpdatingRecursiveExpression}\n        onExpressionResetting={contextEntry.onExpressionResetting}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ContextEntryInfo.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { EditExpressionMenu } from \"../EditExpressionMenu\";\nimport { DataType } from \"../../api\";\n\nexport interface ContextEntryInfoProps {\n  /** Context Entry info name */\n  name: string;\n  /** Context Entry info dataType */\n  dataType: DataType;\n  /** Callback to be executed when name or dataType get updated */\n  onContextEntryUpdate: (name: string, dataType: DataType) => void;\n  /** Label used for the popover triggered when editing info section */\n  editInfoPopoverLabel?: string;\n}\n\nexport const ContextEntryInfo: React.FunctionComponent<ContextEntryInfoProps> = ({\n  name,\n  dataType,\n  onContextEntryUpdate,\n  editInfoPopoverLabel,\n}) => {\n  const [entryName, setEntryName] = useState(name);\n\n  const [entryDataType, setEntryDataType] = useState(dataType);\n\n  useEffect(() => {\n    setEntryName(name);\n  }, [name]);\n\n  useEffect(() => {\n    setEntryDataType(dataType);\n  }, [dataType]);\n\n  const onEntryNameOrDataTypeUpdate = useCallback(\n    ({ name, dataType }) => {\n      setEntryName(name);\n      setEntryDataType(dataType);\n      onContextEntryUpdate(name, dataType);\n    },\n    [onContextEntryUpdate]\n  );\n\n  const renderEntryDefinition = useCallback(\n    (additionalCssClass?: string) => (\n      <div className={`entry-definition ${additionalCssClass}`}>\n        <p className=\"entry-name pf-u-text-truncate\" title={entryName}>\n          {entryName}\n        </p>\n        <p className=\"entry-data-type pf-u-text-truncate\" title={entryDataType}>\n          ({entryDataType})\n        </p>\n      </div>\n    ),\n    [entryDataType, entryName]\n  );\n\n  const renderEntryDefinitionWithPopoverMenu = useMemo(\n    () => (\n      <EditExpressionMenu\n        title={editInfoPopoverLabel}\n        selectedExpressionName={entryName}\n        selectedDataType={entryDataType}\n        onExpressionUpdate={onEntryNameOrDataTypeUpdate}\n      >\n        {renderEntryDefinition(\"with-popover-menu\")}\n      </EditExpressionMenu>\n    ),\n    [editInfoPopoverLabel, entryDataType, entryName, onEntryNameOrDataTypeUpdate, renderEntryDefinition]\n  );\n\n  return (\n    <div className=\"entry-info\">\n      {editInfoPopoverLabel ? renderEntryDefinitionWithPopoverMenu : renderEntryDefinition()}\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CellProps, ContextEntries } from \"../../api\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { DataRecord } from \"react-table\";\nimport { ContextEntryInfo } from \"./ContextEntryInfo\";\n\nexport interface ContextEntryInfoCellProps extends CellProps {\n  data: ContextEntries;\n  onRowUpdate: (rowIndex: number, updatedRow: DataRecord) => void;\n}\n\nexport const ContextEntryInfoCell: React.FunctionComponent<ContextEntryInfoCellProps> = ({\n  data,\n  row: { index },\n  onRowUpdate,\n}) => {\n  const contextEntry = data[index];\n\n  const [entryInfo, setEntryInfo] = useState(contextEntry.entryInfo);\n\n  useEffect(() => {\n    setEntryInfo(contextEntry.entryInfo);\n  }, [contextEntry.entryInfo]);\n\n  const onContextEntryUpdate = useCallback(\n    (name, dataType) => {\n      onRowUpdate(index, { ...contextEntry, entryInfo: { name, dataType } });\n    },\n    [contextEntry, index, onRowUpdate]\n  );\n\n  return (\n    <div className=\"context-entry-info-cell\">\n      <ContextEntryInfo\n        name={entryInfo.name}\n        dataType={entryInfo.dataType}\n        onContextEntryUpdate={onContextEntryUpdate}\n        editInfoPopoverLabel={contextEntry.editInfoPopoverLabel}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ContextExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  ContextEntries,\n  ContextEntryRecord,\n  ContextProps,\n  DataType,\n  DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  EntryInfo,\n  ExpressionProps,\n  generateNextAvailableEntryName,\n  getEntryKey,\n  getHandlerConfiguration,\n  LogicType,\n  resetEntry,\n  TableHeaderVisibility,\n} from \"../../api\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { ColumnInstance, DataRecord } from \"react-table\";\nimport { ContextEntryExpressionCell } from \"./ContextEntryExpressionCell\";\nimport * as _ from \"lodash\";\nimport { ContextEntryExpression } from \"./ContextEntryExpression\";\nimport { ContextEntryInfoCell } from \"./ContextEntryInfoCell\";\n\nconst DEFAULT_CONTEXT_ENTRY_NAME = \"ContextEntry-1\";\nconst DEFAULT_CONTEXT_ENTRY_DATA_TYPE = DataType.Undefined;\n\nexport const ContextExpression: React.FunctionComponent<ContextProps> = ({\n  uid,\n  name = DEFAULT_CONTEXT_ENTRY_NAME,\n  dataType = DEFAULT_CONTEXT_ENTRY_DATA_TYPE,\n  onUpdatingNameAndDataType,\n  contextEntries,\n  result = {} as ExpressionProps,\n  renderResult = true,\n  entryInfoWidth = DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  entryExpressionWidth = DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  isHeadless = false,\n  onUpdatingRecursiveExpression,\n  noHandlerMenu = false,\n}) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [resultExpression, setResultExpression] = useState(result);\n  const [infoWidth, setInfoWidth] = useState(entryInfoWidth);\n  const [expressionWidth, setExpressionWidth] = useState(entryExpressionWidth);\n\n  const [columns, setColumns] = useState([\n    {\n      label: name,\n      accessor: name,\n      dataType,\n      disableHandlerOnHeader: true,\n      columns: [\n        {\n          label: \"Name\",\n          accessor: \"entryInfo\",\n          disableHandlerOnHeader: true,\n          width: infoWidth,\n          minWidth: DEFAULT_ENTRY_INFO_MIN_WIDTH,\n        },\n        {\n          label: \"Value\",\n          accessor: \"entryExpression\",\n          disableHandlerOnHeader: true,\n          width: expressionWidth,\n          minWidth: DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n        },\n      ],\n    },\n  ]);\n\n  const [rows, setRows] = useState(\n    contextEntries || [\n      {\n        entryInfo: {\n          name: DEFAULT_CONTEXT_ENTRY_NAME,\n          dataType: DEFAULT_CONTEXT_ENTRY_DATA_TYPE,\n        },\n        entryExpression: {},\n        editInfoPopoverLabel: i18n.editContextEntry,\n      } as DataRecord,\n    ]\n  );\n\n  const onColumnsUpdate = useCallback(\n    ([expressionColumn]: [ColumnInstance]) => {\n      onUpdatingNameAndDataType?.(expressionColumn.label as string, expressionColumn.dataType);\n      setExpressionWidth(_.find(expressionColumn.columns, { accessor: \"entryExpression\" })?.width as number);\n      setInfoWidth(_.find(expressionColumn.columns, { accessor: \"entryInfo\" })?.width as number);\n      setColumns(([prevExpressionColumn]) => [\n        {\n          ...prevExpressionColumn,\n          label: expressionColumn.label as string,\n          accessor: expressionColumn.accessor,\n          dataType: expressionColumn.dataType,\n        },\n      ]);\n    },\n    [onUpdatingNameAndDataType]\n  );\n\n  const onRowAdding = useCallback(\n    () => ({\n      entryInfo: {\n        name: generateNextAvailableEntryName(\n          _.map(rows, (row: ContextEntryRecord) => row.entryInfo) as EntryInfo[],\n          \"ContextEntry\"\n        ),\n        dataType: DataType.Undefined,\n      },\n      entryExpression: {},\n      editInfoPopoverLabel: i18n.editContextEntry,\n    }),\n    [i18n.editContextEntry, rows]\n  );\n\n  const getHeaderVisibility = useCallback(() => {\n    return isHeadless ? TableHeaderVisibility.LastLevel : TableHeaderVisibility.Full;\n  }, [isHeadless]);\n\n  useEffect(() => {\n    const [expressionColumn] = columns;\n    const updatedDefinition: ContextProps = {\n      uid,\n      logicType: LogicType.Context,\n      name: expressionColumn.accessor,\n      dataType: expressionColumn.dataType,\n      contextEntries: rows as ContextEntries,\n      result: _.omit(resultExpression, \"isHeadless\"),\n      ...(infoWidth > DEFAULT_ENTRY_INFO_MIN_WIDTH ? { entryInfoWidth: infoWidth } : {}),\n      ...(expressionWidth > DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH ? { entryExpressionWidth: expressionWidth } : {}),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(_.omit(updatedDefinition, [\"name\", \"dataType\"]))\n      : window.beeApi?.broadcastContextExpressionDefinition?.(updatedDefinition);\n  }, [columns, isHeadless, onUpdatingRecursiveExpression, rows, resultExpression, infoWidth, expressionWidth, uid]);\n\n  return (\n    <div className={`context-expression ${uid}`}>\n      <Table\n        tableId={uid}\n        headerLevels={1}\n        headerVisibility={getHeaderVisibility()}\n        defaultCell={{ entryInfo: ContextEntryInfoCell, entryExpression: ContextEntryExpressionCell }}\n        columns={columns}\n        rows={rows as DataRecord[]}\n        onColumnsUpdate={onColumnsUpdate}\n        onRowAdding={onRowAdding}\n        onRowsUpdate={setRows}\n        handlerConfiguration={noHandlerMenu ? undefined : getHandlerConfiguration(i18n, i18n.contextEntry)}\n        getRowKey={useCallback(getEntryKey, [])}\n        resetRowCustomFunction={useCallback(resetEntry, [])}\n      >\n        {renderResult\n          ? [\n              <div key=\"context-result\" className=\"context-result\">{`<result>`}</div>,\n              <ContextEntryExpression\n                key=\"context-expression\"\n                expression={resultExpression}\n                onUpdatingRecursiveExpression={setResultExpression}\n              />,\n            ]\n          : undefined}\n      </Table>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DecisionTableProps } from \"../../api\";\nimport * as React from \"react\";\n\nexport const DecisionTableExpression: React.FunctionComponent<DecisionTableProps> = () => {\n  return <div>Decision Table</div>;\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./ListExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  ContextEntryRecord,\n  ExpressionProps,\n  ListProps,\n  LiteralExpressionProps,\n  LogicType,\n  TableHandlerConfiguration,\n  TableHeaderVisibility,\n  TableOperation,\n} from \"../../api\";\nimport { ContextEntryExpressionCell } from \"../ContextExpression\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { DataRecord, Row } from \"react-table\";\nimport * as _ from \"lodash\";\nimport { Resizer } from \"../Resizer\";\n\nconst LIST_EXPRESSION_MIN_WIDTH = 430;\n\nexport const ListExpression: React.FunctionComponent<ListProps> = ({\n  isHeadless,\n  items,\n  onUpdatingRecursiveExpression,\n  uid,\n  width = LIST_EXPRESSION_MIN_WIDTH,\n}: ListProps) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const handlerConfiguration: TableHandlerConfiguration = [\n    {\n      group: i18n.rows,\n      items: [\n        { name: i18n.rowOperations.insertAbove, type: TableOperation.RowInsertAbove },\n        { name: i18n.rowOperations.insertBelow, type: TableOperation.RowInsertBelow },\n        { name: i18n.rowOperations.delete, type: TableOperation.RowDelete },\n        { name: i18n.rowOperations.clear, type: TableOperation.RowClear },\n      ],\n    },\n  ];\n\n  const generateLiteralExpression = () => ({ logicType: LogicType.LiteralExpression } as LiteralExpressionProps);\n\n  const [listItems, setListItems] = useState(\n    _.isEmpty(items)\n      ? [\n          {\n            entryExpression: generateLiteralExpression(),\n          } as DataRecord,\n        ]\n      : _.map(items, (item) => ({ entryExpression: item } as DataRecord))\n  );\n\n  const listExpressionWidth = useRef(width);\n\n  const listTableGetRowKey = useCallback((row: Row) => (row.original as ContextEntryRecord).entryExpression.uid!, []);\n\n  const onRowAdding = useCallback(\n    () => ({\n      entryExpression: generateLiteralExpression(),\n    }),\n    []\n  );\n\n  const spreadListExpressionDefinition = useCallback(() => {\n    const updatedDefinition: ListProps = {\n      uid,\n      ...(listExpressionWidth.current !== LIST_EXPRESSION_MIN_WIDTH ? { width: listExpressionWidth.current } : {}),\n      logicType: LogicType.List,\n      items: _.map(listItems, (listItem: DataRecord) => listItem.entryExpression as ExpressionProps),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(updatedDefinition)\n      : window.beeApi?.broadcastListExpressionDefinition?.(updatedDefinition);\n  }, [isHeadless, listItems, onUpdatingRecursiveExpression, uid]);\n\n  const onRowsUpdate = useCallback((rows) => {\n    setListItems(rows);\n  }, []);\n\n  const resetRowCustomFunction = useCallback((row: DataRecord) => {\n    return { entryExpression: { uid: (row.entryExpression as ExpressionProps).uid } };\n  }, []);\n\n  const onHorizontalResizeStop = useCallback(\n    (width) => {\n      listExpressionWidth.current = width;\n      spreadListExpressionDefinition();\n    },\n    [spreadListExpressionDefinition]\n  );\n\n  useEffect(() => {\n    /** Everytime the list of items changes, we need to spread expression's updated definition */\n    spreadListExpressionDefinition();\n  }, [listItems, spreadListExpressionDefinition]);\n\n  return (\n    <div className=\"list-expression\">\n      <Resizer\n        width={listExpressionWidth.current}\n        height=\"100%\"\n        minWidth={LIST_EXPRESSION_MIN_WIDTH}\n        onHorizontalResizeStop={onHorizontalResizeStop}\n      >\n        <Table\n          tableId={uid}\n          headerVisibility={TableHeaderVisibility.None}\n          defaultCell={{ list: ContextEntryExpressionCell }}\n          columns={[{ accessor: \"list\", width: \"100%\" }]}\n          rows={listItems as DataRecord[]}\n          onRowsUpdate={onRowsUpdate}\n          onRowAdding={onRowAdding}\n          handlerConfiguration={handlerConfiguration}\n          getRowKey={listTableGetRowKey}\n          resetRowCustomFunction={resetRowCustomFunction}\n        />\n      </Resizer>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./InvocationExpression.css\";\nimport * as React from \"react\";\nimport { ChangeEvent, useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  ContextEntries,\n  ContextEntryRecord,\n  DataType,\n  DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  EntryInfo,\n  generateNextAvailableEntryName,\n  getEntryKey,\n  getHandlerConfiguration,\n  InvocationProps,\n  resetEntry,\n  TableHeaderVisibility,\n} from \"../../api\";\nimport { Table } from \"../Table\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { ColumnInstance, DataRecord } from \"react-table\";\nimport { ContextEntryExpressionCell, ContextEntryInfoCell } from \"../ContextExpression\";\nimport * as _ from \"lodash\";\n\nconst DEFAULT_PARAMETER_NAME = \"p-1\";\nconst DEFAULT_PARAMETER_DATA_TYPE = DataType.Undefined;\n\nexport const InvocationExpression: React.FunctionComponent<InvocationProps> = ({\n  bindingEntries,\n  dataType = DEFAULT_PARAMETER_DATA_TYPE,\n  entryInfoWidth = DEFAULT_ENTRY_INFO_MIN_WIDTH,\n  entryExpressionWidth = DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  invokedFunction = \"\",\n  isHeadless,\n  logicType,\n  name = DEFAULT_PARAMETER_NAME,\n  onUpdatingNameAndDataType,\n  onUpdatingRecursiveExpression,\n  uid,\n}: InvocationProps) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [rows, setRows] = useState(\n    bindingEntries || [\n      {\n        entryInfo: {\n          name: DEFAULT_PARAMETER_NAME,\n          dataType: DEFAULT_PARAMETER_DATA_TYPE,\n        },\n        entryExpression: {},\n        editInfoPopoverLabel: i18n.editParameter,\n      } as DataRecord,\n    ]\n  );\n\n  const functionDefinition = useRef<string>(invokedFunction);\n\n  const infoWidth = useRef<number>(entryInfoWidth);\n\n  const expressionWidth = useRef<number>(entryExpressionWidth);\n\n  const spreadInvocationExpressionDefinition = useCallback(() => {\n    const [expressionColumn] = columns.current;\n\n    const updatedDefinition: InvocationProps = {\n      uid,\n      logicType,\n      name: expressionColumn.accessor,\n      dataType: expressionColumn.dataType,\n      bindingEntries: rows as ContextEntries,\n      invokedFunction: functionDefinition.current,\n      ...(infoWidth.current > DEFAULT_ENTRY_INFO_MIN_WIDTH ? { entryInfoWidth: infoWidth.current } : {}),\n      ...(expressionWidth.current > DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH\n        ? { entryExpressionWidth: expressionWidth.current }\n        : {}),\n    };\n    isHeadless\n      ? onUpdatingRecursiveExpression?.(_.omit(updatedDefinition, [\"name\", \"dataType\"]))\n      : window.beeApi?.broadcastInvocationExpressionDefinition?.(updatedDefinition);\n  }, [functionDefinition, isHeadless, logicType, onUpdatingRecursiveExpression, rows, uid]);\n\n  const onFunctionDefinitionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    functionDefinition.current = e.target.value;\n  }, []);\n\n  const onFunctionDefinitionBlur = useCallback(() => {\n    spreadInvocationExpressionDefinition();\n  }, [spreadInvocationExpressionDefinition]);\n\n  const headerCellElement = (\n    <div className=\"function-definition-container\">\n      <input\n        className=\"function-definition pf-u-text-truncate\"\n        type=\"text\"\n        placeholder={i18n.enterFunction}\n        onChange={onFunctionDefinitionChange}\n        onBlur={onFunctionDefinitionBlur}\n        defaultValue={functionDefinition.current}\n      />\n    </div>\n  );\n\n  const columns = useRef<ColumnInstance[]>([\n    {\n      label: name,\n      accessor: name,\n      dataType,\n      disableHandlerOnHeader: true,\n      columns: [\n        {\n          headerCellElement,\n          accessor: \"functionDefinition\",\n          disableHandlerOnHeader: true,\n          columns: [\n            {\n              accessor: \"entryInfo\",\n              disableHandlerOnHeader: true,\n              canResizeOnCell: true,\n              width: infoWidth.current,\n              minWidth: DEFAULT_ENTRY_INFO_MIN_WIDTH,\n            },\n            {\n              accessor: \"entryExpression\",\n              disableHandlerOnHeader: true,\n              canResizeOnCell: true,\n              width: expressionWidth.current,\n              minWidth: DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n            },\n          ],\n        },\n      ],\n    },\n  ] as ColumnInstance[]);\n\n  const onColumnsUpdate = useCallback(\n    ([expressionColumn]: [ColumnInstance]) => {\n      onUpdatingNameAndDataType?.(expressionColumn.label as string, expressionColumn.dataType);\n      infoWidth.current = _.find(expressionColumn.columns, { accessor: \"entryInfo\" })?.width as number;\n      expressionWidth.current = _.find(expressionColumn.columns, { accessor: \"entryExpression\" })?.width as number;\n      const [updatedExpressionColumn] = columns.current;\n      updatedExpressionColumn.label = expressionColumn.label;\n      updatedExpressionColumn.accessor = expressionColumn.accessor;\n      updatedExpressionColumn.dataType = expressionColumn.dataType;\n      spreadInvocationExpressionDefinition();\n    },\n    [onUpdatingNameAndDataType, spreadInvocationExpressionDefinition]\n  );\n\n  const onRowAdding = useCallback(\n    () => ({\n      entryInfo: {\n        name: generateNextAvailableEntryName(\n          _.map(rows, (row: ContextEntryRecord) => row.entryInfo) as EntryInfo[],\n          \"p\"\n        ),\n        dataType: DEFAULT_PARAMETER_DATA_TYPE,\n      },\n      entryExpression: {},\n      editInfoPopoverLabel: i18n.editParameter,\n    }),\n    [i18n.editParameter, rows]\n  );\n\n  const getHeaderVisibility = useCallback(() => {\n    return isHeadless ? TableHeaderVisibility.SecondToLastLevel : TableHeaderVisibility.Full;\n  }, [isHeadless]);\n\n  useEffect(() => {\n    /** Everytime the list of items or the function definition change, we need to spread expression's updated definition */\n    spreadInvocationExpressionDefinition();\n  }, [rows, spreadInvocationExpressionDefinition]);\n\n  return (\n    <div className={`invocation-expression ${uid}`}>\n      <Table\n        tableId={uid}\n        headerLevels={2}\n        headerVisibility={getHeaderVisibility()}\n        skipLastHeaderGroup\n        defaultCell={{ entryInfo: ContextEntryInfoCell, entryExpression: ContextEntryExpressionCell }}\n        columns={columns.current}\n        rows={rows as DataRecord[]}\n        onColumnsUpdate={onColumnsUpdate}\n        onRowAdding={onRowAdding}\n        onRowsUpdate={setRows}\n        handlerConfiguration={getHandlerConfiguration(i18n, i18n.parameters)}\n        getRowKey={useCallback(getEntryKey, [])}\n        resetRowCustomFunction={useCallback(resetEntry, [])}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./EditParameters.css\";\nimport * as _ from \"lodash\";\nimport { DataTypeSelector } from \"../EditExpressionMenu\";\nimport { Button } from \"@patternfly/react-core\";\nimport { OutlinedTrashAltIcon } from \"@patternfly/react-icons\";\nimport * as React from \"react\";\nimport { ChangeEvent, useCallback } from \"react\";\nimport { DataType, EntryInfo, generateNextAvailableEntryName } from \"../../api\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\n\nexport interface EditParametersProps {\n  /** List of parameters */\n  parameters: EntryInfo[];\n  /** Function for mutating parameters state */\n  setParameters: React.Dispatch<React.SetStateAction<EntryInfo[]>>;\n}\n\nexport const EditParameters: React.FunctionComponent<EditParametersProps> = ({ parameters, setParameters }) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const addParameter = useCallback(() => {\n    setParameters((parameters) => [\n      ...parameters,\n      {\n        name: generateNextAvailableEntryName(parameters, \"p\"),\n        dataType: DataType.Undefined,\n      },\n    ]);\n  }, [setParameters]);\n\n  const onNameChange = useCallback(\n    (index: number) => (event: ChangeEvent<HTMLInputElement>) =>\n      setParameters((parameters) => {\n        parameters[index].name = event.target.value;\n        return [...parameters];\n      }),\n    [setParameters]\n  );\n\n  const onDataTypeChange = useCallback(\n    (index: number) => (dataType: DataType) => {\n      setParameters((parameters) => {\n        parameters[index].dataType = dataType;\n        return [...parameters];\n      });\n    },\n    [setParameters]\n  );\n\n  const onParameterRemove = useCallback(\n    (index: number) => () =>\n      setParameters((parameters) => [...parameters.slice(0, index), ...parameters.slice(index + 1)]),\n    [setParameters]\n  );\n\n  return (\n    <div className=\"parameters-editor\">\n      <Button variant=\"tertiary\" onClick={addParameter} className=\"add-parameter\">\n        {i18n.addParameter}\n      </Button>\n      <div className=\"parameters-container\">\n        {_.map(parameters, (parameter, index) => {\n          return (\n            <div key={`${parameter.name}_${index}`} className=\"parameter-entry\">\n              <input\n                className=\"parameter-name\"\n                type=\"text\"\n                onBlur={onNameChange(index)}\n                defaultValue={parameter.name}\n              />\n              <DataTypeSelector\n                selectedDataType={parameter.dataType}\n                onDataTypeChange={onDataTypeChange(index)}\n                menuAppendTo=\"parent\"\n              />\n              <Button\n                variant=\"danger\"\n                className=\"delete-parameter\"\n                icon={<OutlinedTrashAltIcon />}\n                iconPosition=\"left\"\n                onClick={onParameterRemove(index)}\n              >\n                {i18n.delete}\n              </Button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { Menu, MenuItem, MenuList } from \"@patternfly/react-core\";\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport { useCallback, useContext } from \"react\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\nimport { FunctionKind } from \"../../api\";\n\nexport interface FunctionKindSelectorProps {\n  /** Pre-selected function kind */\n  selectedFunctionKind: FunctionKind;\n  /** Callback invoked when function kind selection changes */\n  onFunctionKindSelect: (functionKind: FunctionKind) => void;\n}\n\nexport const FunctionKindSelector: React.FunctionComponent<FunctionKindSelectorProps> = ({\n  selectedFunctionKind,\n  onFunctionKindSelect,\n}) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const functionKindSelectionCallback = useCallback(\n    (hide: () => void) => (event: MouseEvent, itemId: string) => {\n      onFunctionKindSelect(itemId as FunctionKind);\n      hide();\n    },\n    [onFunctionKindSelect]\n  );\n\n  const renderFunctionKindItems = useCallback(\n    () =>\n      _.map(Object.values(FunctionKind), (key) => (\n        <MenuItem key={key} itemId={key} data-ouia-component-id={key}>\n          {key}\n        </MenuItem>\n      )),\n    []\n  );\n\n  return (\n    <PopoverMenu\n      title={i18n.selectFunctionKind}\n      appendTo={globalContext.boxedExpressionEditorRef?.current ?? undefined}\n      className=\"function-kind-popover\"\n      hasAutoWidth\n      body={(hide: () => void) => (\n        <Menu onSelect={functionKindSelectionCallback(hide)}>\n          <MenuList>{renderFunctionKindItems()}</MenuList>\n        </Menu>\n      )}\n    >\n      <div className=\"selected-function-kind\">{_.first(selectedFunctionKind)}</div>\n    </PopoverMenu>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./FunctionExpression.css\";\nimport * as React from \"react\";\nimport { PropsWithChildren, useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  ContextProps,\n  DataType,\n  DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n  ExpressionProps,\n  FeelFunctionProps,\n  FunctionKind,\n  FunctionProps,\n  JavaFunctionProps,\n  LiteralExpressionProps,\n  LogicType,\n  resetEntry,\n  TableHeaderVisibility,\n  TableOperation,\n} from \"../../api\";\nimport { Table } from \"../Table\";\nimport { ColumnInstance, DataRecord } from \"react-table\";\nimport { ContextEntryExpressionCell } from \"../ContextExpression\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport * as _ from \"lodash\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\nimport { FunctionKindSelector } from \"./FunctionKindSelector\";\nimport { EditParameters } from \"./EditParameters\";\n\nexport const DEFAULT_FIRST_PARAM_NAME = \"p-1\";\n\nexport const FunctionExpression: React.FunctionComponent<FunctionProps> = (props: PropsWithChildren<FunctionProps>) => {\n  const parametersWidth =\n    props.parametersWidth === undefined ? DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH : props.parametersWidth;\n  const formalParameters = props.formalParameters === undefined ? [] : props.formalParameters;\n  const functionKind = props.functionKind === undefined ? FunctionKind.Feel : props.functionKind;\n  const name = props.name === undefined ? DEFAULT_FIRST_PARAM_NAME : props.name;\n\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const [parameters, setParameters] = useState(formalParameters);\n\n  const headerCellElement = useMemo(\n    () => (\n      <PopoverMenu\n        title={i18n.editParameters}\n        appendTo={globalContext.boxedExpressionEditorRef?.current ?? undefined}\n        className=\"parameters-editor-popover\"\n        minWidth=\"400px\"\n        body={<EditParameters parameters={parameters} setParameters={setParameters} />}\n      >\n        <div className={`parameters-list ${_.isEmpty(parameters) ? \"empty-parameters\" : \"\"}`}>\n          <p className=\"pf-u-text-truncate\">\n            {_.isEmpty(parameters)\n              ? i18n.editParameters\n              : `(${_.join(\n                  _.map(parameters, (parameter) => parameter.name),\n                  \", \"\n                )})`}\n          </p>\n        </div>\n      </PopoverMenu>\n    ),\n    [globalContext.boxedExpressionEditorRef, i18n.editParameters, parameters]\n  );\n\n  const evaluateColumns = useCallback(\n    () =>\n      [\n        {\n          label: name,\n          accessor: name,\n          dataType: props.dataType,\n          disableHandlerOnHeader: true,\n          columns: [\n            {\n              headerCellElement,\n              accessor: \"parameters\",\n              disableHandlerOnHeader: true,\n              width: width.current,\n              minWidth: DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH,\n            },\n          ],\n        },\n      ] as ColumnInstance[],\n    [props.dataType, headerCellElement, name]\n  );\n\n  const extractContextEntriesFromJavaProps = useCallback(\n    (javaProps: JavaFunctionProps & { children?: React.ReactNode }) => {\n      return [\n        {\n          entryInfo: { name: i18n.class, dataType: DataType.String },\n          entryExpression: {\n            noClearAction: true,\n            logicType: LogicType.LiteralExpression,\n            content: javaProps.class,\n          } as LiteralExpressionProps,\n        },\n        {\n          entryInfo: { name: i18n.methodSignature, dataType: DataType.String },\n          entryExpression: {\n            noClearAction: true,\n            logicType: LogicType.LiteralExpression,\n            content: javaProps.method,\n          } as LiteralExpressionProps,\n        },\n      ];\n    },\n    [i18n.class, i18n.methodSignature]\n  );\n\n  const evaluateRows = useCallback(\n    (functionKind: FunctionKind) => {\n      //TODO PMML kind is still missing\n      switch (functionKind) {\n        case FunctionKind.Java: {\n          const javaProps: PropsWithChildren<JavaFunctionProps> = props as PropsWithChildren<JavaFunctionProps>;\n          return [\n            {\n              entryExpression: {\n                logicType: LogicType.Context,\n                noClearAction: true,\n                renderResult: false,\n                noHandlerMenu: true,\n                contextEntries: extractContextEntriesFromJavaProps(javaProps),\n              },\n            } as DataRecord,\n          ];\n        }\n        case FunctionKind.Pmml:\n        case FunctionKind.Feel:\n        default: {\n          const feelProps: PropsWithChildren<FeelFunctionProps> = props as PropsWithChildren<FeelFunctionProps>;\n          return [\n            { entryExpression: feelProps.expression || { logicType: LogicType.LiteralExpression } } as DataRecord,\n          ];\n        }\n      }\n    },\n    [extractContextEntriesFromJavaProps, props]\n  );\n\n  const width = useRef<number>(parametersWidth);\n  const columns = useRef(evaluateColumns());\n  const [selectedFunctionKind, setSelectedFunctionKind] = useState(functionKind);\n  const [rows, setRows] = useState(evaluateRows(selectedFunctionKind));\n\n  const extendDefinitionBasedOnFunctionKind = useCallback(\n    (definition: FunctionProps, functionKind: FunctionKind) => {\n      //TODO PMML kind is still missing\n      switch (functionKind) {\n        case FunctionKind.Java: {\n          const contextProps = _.first(rows)?.entryExpression as ContextProps;\n          const className =\n            (_.nth(contextProps.contextEntries, 0)?.entryExpression as LiteralExpressionProps)?.content || \"\";\n          const methodName =\n            (_.nth(contextProps.contextEntries, 1)?.entryExpression as LiteralExpressionProps)?.content || \"\";\n          return _.extend(definition, { class: className, method: methodName });\n        }\n        case FunctionKind.Pmml:\n        case FunctionKind.Feel:\n        default: {\n          return _.extend(definition, { expression: _.first(rows)?.entryExpression as ExpressionProps });\n        }\n      }\n    },\n    [rows]\n  );\n\n  const spreadFunctionExpressionDefinition = useCallback(() => {\n    const [expressionColumn] = columns.current;\n\n    const updatedDefinition: FunctionProps = extendDefinitionBasedOnFunctionKind(\n      {\n        uid: props.uid,\n        logicType: props.logicType,\n        name: expressionColumn.accessor,\n        dataType: expressionColumn.dataType,\n        functionKind: selectedFunctionKind,\n        formalParameters: parameters,\n        ...(width.current > DEFAULT_ENTRY_EXPRESSION_MIN_WIDTH ? { parametersWidth: width.current } : {}),\n      },\n      selectedFunctionKind\n    );\n    props.isHeadless\n      ? props.onUpdatingRecursiveExpression?.(_.omit(updatedDefinition, [\"name\", \"dataType\"]))\n      : window.beeApi?.broadcastFunctionExpressionDefinition?.(updatedDefinition);\n  }, [extendDefinitionBasedOnFunctionKind, parameters, props, selectedFunctionKind]);\n\n  const getHeaderVisibility = useCallback(() => {\n    return props.isHeadless ? TableHeaderVisibility.LastLevel : TableHeaderVisibility.Full;\n  }, [props.isHeadless]);\n\n  const onFunctionKindSelect = useCallback(\n    (itemId: string) => {\n      const kind = itemId as FunctionKind;\n      setSelectedFunctionKind(kind);\n      // Resetting table content, every time function kind gets selected\n      setRows([{ entryExpression: { logicType: LogicType.Undefined } }]);\n      // Need to wait for the next rendering cycle before setting the correct table rows, based on function kind\n      setTimeout(() => {\n        setRows(evaluateRows(kind));\n      }, 0);\n    },\n    [evaluateRows]\n  );\n\n  const onColumnsUpdate = useCallback(\n    ([expressionColumn]: [ColumnInstance]) => {\n      props.onUpdatingNameAndDataType?.(expressionColumn.label as string, expressionColumn.dataType);\n      width.current = _.find(expressionColumn.columns, { accessor: \"parameters\" })?.width as number;\n      const [updatedExpressionColumn] = columns.current;\n      updatedExpressionColumn.label = expressionColumn.label;\n      updatedExpressionColumn.accessor = expressionColumn.accessor;\n      updatedExpressionColumn.dataType = expressionColumn.dataType;\n      spreadFunctionExpressionDefinition();\n    },\n    [columns, props, spreadFunctionExpressionDefinition]\n  );\n\n  useEffect(() => {\n    /** Everytime the list of parameters or the function definition change, we need to spread expression's updated definition */\n    spreadFunctionExpressionDefinition();\n  }, [rows, spreadFunctionExpressionDefinition]);\n\n  useEffect(() => {\n    columns.current = evaluateColumns();\n    // Watching for changes of the parameters, in order to update the columns passed to the table\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parameters]);\n\n  const resetRowCustomFunction = useCallback((row) => {\n    setSelectedFunctionKind(FunctionKind.Feel);\n    return resetEntry(row);\n  }, []);\n\n  return (\n    <div className={`function-expression ${props.uid}`}>\n      <Table\n        handlerConfiguration={[\n          {\n            group: _.upperCase(i18n.function),\n            items: [{ name: i18n.rowOperations.clear, type: TableOperation.RowClear }],\n          },\n        ]}\n        columns={columns.current}\n        onColumnsUpdate={onColumnsUpdate}\n        rows={rows}\n        onRowsUpdate={setRows}\n        headerLevels={1}\n        headerVisibility={getHeaderVisibility()}\n        controllerCell={\n          <FunctionKindSelector\n            selectedFunctionKind={selectedFunctionKind}\n            onFunctionKindSelect={onFunctionKindSelect}\n          />\n        }\n        defaultCell={{ parameters: ContextEntryExpressionCell }}\n        resetRowCustomFunction={resetRowCustomFunction}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./LogicTypeSelector.css\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  ContextProps,\n  DataType,\n  DecisionTableProps,\n  ExpressionProps,\n  FunctionKind,\n  FunctionProps,\n  InvocationProps,\n  ListProps,\n  LiteralExpressionProps,\n  LogicType,\n  RelationProps,\n} from \"../../api\";\nimport { LiteralExpression } from \"../LiteralExpression\";\nimport { RelationExpression } from \"../RelationExpression\";\nimport { ContextExpression } from \"../ContextExpression\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { Button, ButtonVariant, Menu, MenuItem, MenuList } from \"@patternfly/react-core\";\nimport * as _ from \"lodash\";\nimport { useContextMenuHandler } from \"../../hooks\";\nimport { NO_TABLE_CONTEXT_MENU_CLASS } from \"../Table\";\nimport nextId from \"react-id-generator\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\nimport { DecisionTableExpression } from \"../DecisionTableExpression\";\nimport { ListExpression } from \"../ListExpression\";\nimport { InvocationExpression } from \"../InvocationExpression\";\nimport { FunctionExpression } from \"../FunctionExpression\";\n\nexport interface LogicTypeSelectorProps {\n  /** Expression properties */\n  selectedExpression: ExpressionProps;\n  /** Function to be invoked when logic type changes */\n  onLogicTypeUpdating: (logicType: LogicType) => void;\n  /** Function to be invoked when logic type is reset */\n  onLogicTypeResetting: () => void;\n  /** Function to be invoked to update expression's name and datatype */\n  onUpdatingNameAndDataType?: (updatedName: string, updatedDataType: DataType) => void;\n  /** Function to be invoked to retrieve the DOM reference to be used for selector placement */\n  getPlacementRef: () => HTMLDivElement;\n  /** True to have no header for this specific expression component, used in a recursive expression */\n  isHeadless?: boolean;\n  /** When a component is headless, it will call this function to pass its most updated expression definition */\n  onUpdatingRecursiveExpression?: (expression: ExpressionProps) => void;\n}\n\nexport const LogicTypeSelector: React.FunctionComponent<LogicTypeSelectorProps> = ({\n  selectedExpression,\n  onLogicTypeUpdating,\n  onLogicTypeResetting,\n  onUpdatingNameAndDataType,\n  getPlacementRef,\n  isHeadless = false,\n  onUpdatingRecursiveExpression,\n}) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const globalContext = useContext(BoxedExpressionGlobalContext);\n\n  const expression = _.extend(selectedExpression, {\n    uid: selectedExpression.uid || nextId(),\n    isHeadless,\n    onUpdatingNameAndDataType,\n    onUpdatingRecursiveExpression,\n  });\n\n  const isLogicTypeSelected = (logicType?: LogicType) => !_.isEmpty(logicType) && logicType !== LogicType.Undefined;\n\n  const [logicTypeSelected, setLogicTypeSelected] = useState(isLogicTypeSelected(expression.logicType));\n\n  useEffect(() => {\n    setLogicTypeSelected(isLogicTypeSelected(selectedExpression.logicType));\n  }, [selectedExpression.logicType]);\n\n  const {\n    contextMenuRef,\n    contextMenuXPos,\n    contextMenuYPos,\n    contextMenuVisibility,\n    setContextMenuVisibility,\n  } = useContextMenuHandler();\n\n  const renderExpression = useMemo(() => {\n    switch (expression.logicType) {\n      case LogicType.LiteralExpression:\n        return <LiteralExpression {...(expression as LiteralExpressionProps)} />;\n      case LogicType.Relation:\n        return <RelationExpression {...(expression as RelationProps)} />;\n      case LogicType.Context:\n        return <ContextExpression {...(expression as ContextProps)} />;\n      case LogicType.DecisionTable:\n        return <DecisionTableExpression {...(expression as DecisionTableProps)} />;\n      case LogicType.Invocation:\n        return <InvocationExpression {...(expression as InvocationProps)} />;\n      case LogicType.List:\n        return <ListExpression {...(expression as ListProps)} />;\n      case LogicType.Function:\n        return <FunctionExpression {..._.defaults(expression, { functionKind: FunctionKind.Feel } as FunctionProps)} />;\n      default:\n        return expression.logicType;\n    }\n    // logicType is enough for deciding when to re-execute this function\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expression.logicType]);\n\n  const getLogicTypesWithoutUndefined = useCallback(\n    () => Object.values(LogicType).filter((logicType) => logicType !== LogicType.Undefined),\n    []\n  );\n\n  const renderLogicTypeItems = useCallback(\n    () =>\n      _.map(getLogicTypesWithoutUndefined(), (key) => (\n        <MenuItem key={key} itemId={key}>\n          {key}\n        </MenuItem>\n      )),\n    [getLogicTypesWithoutUndefined]\n  );\n\n  const getArrowPlacement = useCallback(() => getPlacementRef() as HTMLElement, [getPlacementRef]);\n\n  const getAppendToPlacement = useCallback(() => {\n    return globalContext.boxedExpressionEditorRef?.current ?? getArrowPlacement;\n  }, [getArrowPlacement, globalContext.boxedExpressionEditorRef]);\n\n  const onLogicTypeSelect = useCallback(\n    (event: MouseEvent, itemId: string) => {\n      setLogicTypeSelected(true);\n      const selectedLogicType = itemId as LogicType;\n      onLogicTypeUpdating(selectedLogicType);\n    },\n    [onLogicTypeUpdating]\n  );\n\n  const buildLogicSelectorMenu = useCallback(\n    () => (\n      <PopoverMenu\n        title={i18n.selectLogicType}\n        arrowPlacement={getArrowPlacement}\n        appendTo={getAppendToPlacement()}\n        className=\"logic-type-popover\"\n        hasAutoWidth\n        body={\n          <Menu onSelect={onLogicTypeSelect}>\n            <MenuList>{renderLogicTypeItems()}</MenuList>\n          </Menu>\n        }\n      />\n    ),\n    [i18n.selectLogicType, getArrowPlacement, getAppendToPlacement, onLogicTypeSelect, renderLogicTypeItems]\n  );\n\n  const executeClearAction = useCallback(() => {\n    setLogicTypeSelected(false);\n    setContextMenuVisibility(false);\n    onLogicTypeResetting();\n  }, [onLogicTypeResetting, setContextMenuVisibility]);\n\n  const buildContextMenu = useCallback(\n    () => (\n      <div\n        className=\"context-menu-container no-table-context-menu\"\n        style={{\n          top: contextMenuYPos,\n          left: contextMenuXPos,\n        }}\n      >\n        <Button\n          isDisabled={!logicTypeSelected}\n          isSmall={true}\n          variant={ButtonVariant.primary}\n          onClick={executeClearAction}\n        >\n          {i18n.clear}\n        </Button>\n      </div>\n    ),\n    [logicTypeSelected, contextMenuXPos, contextMenuYPos, executeClearAction, i18n.clear]\n  );\n\n  return (\n    <div\n      className={`logic-type-selector ${NO_TABLE_CONTEXT_MENU_CLASS} ${\n        logicTypeSelected ? \"logic-type-selected\" : \"logic-type-not-present\"\n      }`}\n      ref={contextMenuRef}\n    >\n      {logicTypeSelected ? renderExpression : i18n.selectExpression}\n      {!logicTypeSelected ? buildLogicSelectorMenu() : null}\n      {!selectedExpression.noClearAction && contextMenuVisibility ? buildContextMenu() : null}\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RefObject, useCallback, useEffect, useRef, useState } from \"react\";\n\nexport function useContextMenuHandler(): {\n  contextMenuRef: RefObject<HTMLDivElement>;\n  contextMenuXPos: string;\n  contextMenuYPos: string;\n  contextMenuVisibility: boolean;\n  setContextMenuVisibility: (value: ((prevState: boolean) => boolean) | boolean) => void;\n} {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const [xPos, setXPos] = useState(\"0px\");\n  const [yPos, setYPos] = useState(\"0px\");\n  const [contextMenuVisible, setContextMenuVisible] = useState(false);\n\n  const hideContextMenu = useCallback(() => {\n    contextMenuVisible && setContextMenuVisible(false);\n  }, [contextMenuVisible]);\n\n  const showContextMenu = useCallback(\n    (event: MouseEvent) => {\n      if (wrapperRef.current && wrapperRef.current === event.target) {\n        event.preventDefault();\n        setXPos(`${event.pageX}px`);\n        setYPos(`${event.pageY}px`);\n        setContextMenuVisible(true);\n      }\n    },\n    [setXPos, setYPos]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"click\", hideContextMenu);\n    document.addEventListener(\"contextmenu\", hideContextMenu);\n    document.addEventListener(\"contextmenu\", showContextMenu);\n    return () => {\n      document.removeEventListener(\"click\", hideContextMenu);\n      document.removeEventListener(\"contextmenu\", hideContextMenu);\n      document.removeEventListener(\"contextmenu\", showContextMenu);\n    };\n  });\n\n  return {\n    contextMenuRef: wrapperRef,\n    contextMenuXPos: xPos,\n    contextMenuYPos: yPos,\n    contextMenuVisibility: contextMenuVisible,\n    setContextMenuVisibility: setContextMenuVisible,\n  };\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport \"./ExpressionContainer.css\";\nimport { ExpressionProps, LogicType } from \"../../api\";\nimport { LogicTypeSelector } from \"../LogicTypeSelector\";\n\nexport interface ExpressionContainerProps {\n  /** Expression properties */\n  selectedExpression: ExpressionProps;\n}\n\nexport const ExpressionContainer: ({ selectedExpression }: ExpressionContainerProps) => JSX.Element = (\n  props: ExpressionContainerProps\n) => {\n  const expressionContainerRef = useRef<HTMLDivElement>(null);\n\n  const [selectedExpression, setSelectedExpression] = useState(props.selectedExpression);\n\n  const updateExpressionNameAndDataType = useCallback((updatedName, updatedDataType) => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n      ...previousSelectedExpression,\n      name: updatedName,\n      dataType: updatedDataType,\n    }));\n  }, []);\n\n  const onLogicTypeUpdating = useCallback((logicType) => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n      ...previousSelectedExpression,\n      logicType: logicType,\n    }));\n  }, []);\n\n  const onLogicTypeResetting = useCallback(() => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => {\n      const updatedExpression = {\n        uid: previousSelectedExpression.uid,\n        name: previousSelectedExpression.name,\n        dataType: previousSelectedExpression.dataType,\n        logicType: LogicType.Undefined,\n      };\n      window.beeApi?.resetExpressionDefinition?.(updatedExpression);\n      return updatedExpression;\n    });\n  }, []);\n\n  const getLogicTypeSelectorRef = useCallback(() => {\n    return expressionContainerRef.current!;\n  }, []);\n\n  return (\n    <div className=\"expression-container\">\n      <div className=\"expression-name-and-logic-type\">\n        <span className=\"expression-title\">{selectedExpression.name}</span>\n        <span className=\"expression-type\">({selectedExpression.logicType || LogicType.Undefined})</span>\n      </div>\n\n      <div\n        className=\"expression-container-box\"\n        ref={expressionContainerRef}\n        data-ouia-component-id=\"expression-container\"\n      >\n        <LogicTypeSelector\n          selectedExpression={selectedExpression}\n          onLogicTypeUpdating={onLogicTypeUpdating}\n          onLogicTypeResetting={onLogicTypeResetting}\n          onUpdatingNameAndDataType={updateExpressionNameAndDataType}\n          getPlacementRef={getLogicTypeSelectorRef}\n        />\n      </div>\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useRef, useState } from \"react\";\nimport \"@patternfly/react-core/dist/styles/base-no-reset.css\";\nimport \"@patternfly/react-styles/css/components/Drawer/drawer.css\";\nimport \"./BoxedExpressionEditor.css\";\nimport { I18nDictionariesProvider } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { ExpressionContainer, ExpressionContainerProps } from \"../ExpressionContainer\";\nimport {\n  boxedExpressionEditorDictionaries,\n  BoxedExpressionEditorI18nContext,\n  boxedExpressionEditorI18nDefaults,\n} from \"../../i18n\";\nimport { BoxedExpressionGlobalContext } from \"../../context\";\nimport * as _ from \"lodash\";\n\nexport interface BoxedExpressionEditorProps {\n  /** All expression properties used to define it */\n  expressionDefinition: ExpressionContainerProps;\n}\n\nconst BoxedExpressionEditor: (props: BoxedExpressionEditorProps) => JSX.Element = (\n  props: BoxedExpressionEditorProps\n) => {\n  const [currentlyOpenedHandlerCallback, setCurrentlyOpenedHandlerCallback] = useState(() => _.identity);\n  const boxedExpressionEditorRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <I18nDictionariesProvider\n      defaults={boxedExpressionEditorI18nDefaults}\n      dictionaries={boxedExpressionEditorDictionaries}\n      initialLocale={navigator.language}\n      ctx={BoxedExpressionEditorI18nContext}\n    >\n      <BoxedExpressionGlobalContext.Provider\n        value={{ boxedExpressionEditorRef, currentlyOpenedHandlerCallback, setCurrentlyOpenedHandlerCallback }}\n      >\n        <div className=\"boxed-expression-editor\" ref={boxedExpressionEditorRef}>\n          <ExpressionContainer {...props.expressionDefinition} />\n        </div>\n      </BoxedExpressionGlobalContext.Provider>\n    </I18nDictionariesProvider>\n  );\n};\n\nexport { BoxedExpressionEditor };\n"],"sourceRoot":""}