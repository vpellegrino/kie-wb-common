{"version":3,"sources":["index.tsx","boxed_expression_editor/api/index.ts","boxed_expression_editor/i18n/index.ts","boxed_expression_editor/index.ts","boxed_expression_editor/api/DataType.ts","boxed_expression_editor/api/LogicType.ts","boxed_expression_editor/components/PopoverMenu/PopoverMenu.tsx","boxed_expression_editor/components/EditExpressionMenu/EditExpressionMenu.tsx","boxed_expression_editor/components/LiteralExpression/LiteralExpression.tsx","boxed_expression_editor/components/ExpressionContainer/ExpressionContainer.tsx","boxed_expression_editor/components/BoxedExpressionEditor/BoxedExpressionEditor.tsx","boxed_expression_editor/components/index.ts","boxed_expression_editor/i18n/locales/en.ts","boxed_expression_editor/i18n/setup.ts"],"names":["expressionDefinition","DataType","Undefined","ReactDOM","document","getElementById","LogicType","PopoverMenu","arrowPlacement","body","title","appendTo","Popover","className","position","distance","id","reference","headerContent","bodyContent","EditExpressionMenu","nameField","dataTypeField","selectedDataType","selectedExpressionName","onExpressionUpdate","i18n","useBoxedExpressionEditorI18n","editExpression","name","dataType","useState","dataTypeSelectIsOpen","setDataTypeSelectOpen","chosenDataType","setDataType","chosenExpressionName","setExpressionName","onExpressionNameChange","useCallback","event","target","value","type","onDataTypeSelect","selection","getDataTypes","_","Object","values","key","SelectOption","onDataTypeFilter","e","input","RegExp","exception","filter","child","test","props","onDataTypeSelectToggle","isOpen","onChange","onBlur","placeholder","Select","variant","SelectVariant","typeahead","typeAheadAriaLabel","choose","onToggle","onSelect","onFilter","selections","hasInlineFilter","inlineFilterPlaceholderText","LiteralExpression","content","updateNameAndDataTypeCallback","expressionName","expressionDataType","setExpressionDataType","literalExpressionContent","setLiteralExpressionContent","onContentChange","updatedContent","getEditExpressionMenuArrowPlacement","querySelector","TextArea","defaultValue","aria-label","ExpressionContainer","selectedExpression","logicType","logicTypeIsPresent","setLogicTypeSelected","actionDropdownIsOpen","setActionDropDownOpen","setSelectedExpression","onLogicTypeSelect","currentItem","currentItemProps","selectedLogicType","children","previousSelectedExpression","executeClearAction","onDropdownToggle","onExpressionActionDropdownSelect","renderExpressionActionsDropdown","Dropdown","toggle","KebabToggle","isPlain","dropdownItems","DropdownItem","onClick","isDisabled","clear","getLogicTypesWithoutUndefined","renderLogicTypeItems","SimpleListItem","getLogicSelectionArrowPlacement","buildLogicSelectorMenu","selectLogicType","SimpleList","updateNameAndDataType","updatedName","updatedDataType","renderSelectedExpression","useMemo","Context","DecisionTable","Relation","Function","Invocation","List","selectExpression","BoxedExpressionEditor","defaults","boxedExpressionEditorI18nDefaults","dictionaries","boxedExpressionEditorDictionaries","initialLocale","navigator","language","ctx","BoxedExpressionEditorI18nContext","en","en_common","literalExpression","context","decisionTable","relation","function","invocation","list","locale","dictionary","Map","React","useContext"],"mappings":"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","file":"static/js/main.cd8a7f21.chunk.js","sourcesContent":["/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport './index.css';\nimport { BoxedExpressionEditor, DataType, ExpressionContainerProps } from \"./boxed_expression_editor\";\n\nconst selectedExpression = {\n  'name': 'Expression Name',\n  'dataType': DataType.Undefined,\n};\nconst expressionDefinition: ExpressionContainerProps = {'selectedExpression': selectedExpression};\n\nReactDOM.render(<BoxedExpressionEditor expressionDefinition={expressionDefinition}/>, document.getElementById('root'));\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./ExpressionProps\";\nexport * from \"./DataType\";\nexport * from \"./LogicType\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./BoxedExpressionEditorI18n\";\nexport * from \"./setup\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./components\";\nexport * from \"./api\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum DataType {\n  Undefined = \"<Undefined>\",\n  Any = \"Any\",\n  Boolean = \"boolean\",\n  Context = \"context\",\n  Date = \"date\",\n  DateTime = \"date and time\",\n  DateTimeDuration = \"days and time duration\",\n  Number = \"number\",\n  String = \"string\",\n  Time = \"time\",\n  YearsMonthsDuration = \"years and months duration\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogicType {\n  Undefined = \"<Undefined>\",\n  LiteralExpression = \"Literal expression\",\n  Context = \"Context\",\n  DecisionTable = \"Decision Table\",\n  Relation = \"Relation\",\n  Function = \"Function\",\n  Invocation = \"Invocation\",\n  List = \"List\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { Popover } from \"@patternfly/react-core\";\nimport \"./PopoverMenu.css\";\n\nexport interface PopoverMenuProps {\n  /** Title of the popover menu */\n  title: string;\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement: () => HTMLElement;\n  /** The content of the popover itself */\n  body: React.ReactNode;\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n}\n\nexport const PopoverMenu: React.FunctionComponent<PopoverMenuProps> = ({\n  arrowPlacement,\n  body,\n  title,\n  appendTo,\n}: PopoverMenuProps) => {\n  return (\n    <Popover\n      className=\"popover-menu-selector\"\n      position=\"bottom\"\n      distance={0}\n      id=\"menu-selector\"\n      reference={arrowPlacement}\n      appendTo={appendTo}\n      headerContent={<div className=\"selector-menu-title\">{title}</div>}\n      bodyContent={body}\n    />\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./EditExpressionMenu.css\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { DataType, ExpressionProps } from \"../../api\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport * as _ from \"lodash\";\n\nexport interface EditExpressionMenuProps {\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement: () => HTMLElement;\n  /** The label for the field 'Name' */\n  nameField?: string;\n  /** The label for the field 'Data Type' */\n  dataTypeField?: string;\n  /** The title of the popover menu */\n  title?: string;\n  /** The pre-selected data type */\n  selectedDataType?: DataType;\n  /** The pre-selected expression name */\n  selectedExpressionName: string;\n  /** Function to be called when the expression gets updated, passing the most updated version of it */\n  onExpressionUpdate: (expression: ExpressionProps) => void;\n}\n\nexport const EditExpressionMenu: React.FunctionComponent<EditExpressionMenuProps> = ({\n  appendTo,\n  arrowPlacement,\n  title,\n  nameField,\n  dataTypeField,\n  selectedDataType = DataType.Undefined,\n  selectedExpressionName,\n  onExpressionUpdate,\n}: EditExpressionMenuProps) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n  title = title ?? i18n.editExpression;\n  nameField = nameField ?? i18n.name;\n  dataTypeField = dataTypeField ?? i18n.dataType;\n\n  const [dataTypeSelectIsOpen, setDataTypeSelectOpen] = useState(false);\n  const [chosenDataType, setDataType] = useState(selectedDataType);\n  const [chosenExpressionName, setExpressionName] = useState(selectedExpressionName);\n\n  const onExpressionNameChange = useCallback(\n    (event) => {\n      setExpressionName(event.target.value);\n      if (event.type === \"blur\") {\n        onExpressionUpdate({\n          name: event.target.value,\n          dataType: chosenDataType,\n        });\n      }\n    },\n    [chosenDataType, onExpressionUpdate]\n  );\n\n  const onDataTypeSelect = useCallback(\n    (event, selection) => {\n      setDataTypeSelectOpen(false);\n      setDataType(selection);\n      onExpressionUpdate({\n        name: chosenExpressionName,\n        dataType: selection,\n      });\n    },\n    [chosenExpressionName, onExpressionUpdate]\n  );\n\n  const getDataTypes = useCallback(() => {\n    return _.map(Object.values(DataType), (key) => (\n      <SelectOption key={key} value={key}>\n        {key}\n      </SelectOption>\n    ));\n  }, []);\n\n  const onDataTypeFilter = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      let input: RegExp;\n      try {\n        input = new RegExp(e.target.value, \"i\");\n      } catch (exception) {\n        return getDataTypes();\n      }\n      return e.target.value !== \"\" ? getDataTypes().filter((child) => input.test(child.props.value)) : getDataTypes();\n    },\n    [getDataTypes]\n  );\n\n  const onDataTypeSelectToggle = useCallback((isOpen) => setDataTypeSelectOpen(isOpen), []);\n\n  return (\n    <PopoverMenu\n      title={title}\n      arrowPlacement={arrowPlacement}\n      appendTo={appendTo}\n      body={\n        <div className=\"edit-expression-menu\">\n          <div className=\"expression-name\">\n            <label>{nameField}</label>\n            <input\n              type=\"text\"\n              id=\"expression-name\"\n              value={chosenExpressionName}\n              onChange={onExpressionNameChange}\n              onBlur={onExpressionNameChange}\n              className=\"form-control pf-c-form-control\"\n              placeholder=\"Expression Name\"\n            />\n          </div>\n          <div className=\"expression-data-type\">\n            <label>{dataTypeField}</label>\n            <Select\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={i18n.choose}\n              onToggle={onDataTypeSelectToggle}\n              onSelect={onDataTypeSelect}\n              onFilter={onDataTypeFilter}\n              isOpen={dataTypeSelectIsOpen}\n              selections={chosenDataType}\n              hasInlineFilter\n              inlineFilterPlaceholderText={i18n.choose}\n            >\n              {getDataTypes()}\n            </Select>\n          </div>\n        </div>\n      }\n    />\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./LiteralExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { ExpressionProps, LiteralExpressionProps } from \"../../api\";\nimport { TextArea } from \"@patternfly/react-core\";\nimport { EditExpressionMenu } from \"../EditExpressionMenu\";\n\nexport const LiteralExpression: React.FunctionComponent<LiteralExpressionProps> = ({\n  content,\n  dataType,\n  name,\n  updateNameAndDataTypeCallback,\n}: LiteralExpressionProps) => {\n  const [expressionName, setExpressionName] = useState(name);\n  const [expressionDataType, setExpressionDataType] = useState(dataType);\n  const [literalExpressionContent, setLiteralExpressionContent] = useState(content);\n\n  const onExpressionUpdate = useCallback(\n    ({ dataType, name }: ExpressionProps) => {\n      setExpressionName(name);\n      setExpressionDataType(dataType);\n      if (updateNameAndDataTypeCallback && dataType) {\n        updateNameAndDataTypeCallback(name, dataType);\n      }\n    },\n    [updateNameAndDataTypeCallback]\n  );\n\n  const onContentChange = useCallback((updatedContent) => {\n    setLiteralExpressionContent(updatedContent);\n  }, []);\n\n  const getEditExpressionMenuArrowPlacement = useCallback(\n    () => document.querySelector(\".literal-expression-header\")! as HTMLElement,\n    []\n  );\n\n  return (\n    <div className=\"literal-expression\">\n      <div className=\"literal-expression-header\">\n        <p className=\"expression-name\">{expressionName}</p>\n        <p className=\"expression-data-type\">({expressionDataType})</p>\n      </div>\n      <div className=\"literal-expression-body\">\n        <TextArea\n          defaultValue={literalExpressionContent}\n          onChange={onContentChange}\n          aria-label=\"literal-expression-content\"\n        />\n      </div>\n      <EditExpressionMenu\n        arrowPlacement={getEditExpressionMenuArrowPlacement}\n        selectedExpressionName={expressionName}\n        selectedDataType={expressionDataType}\n        onExpressionUpdate={onExpressionUpdate}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport * as _ from \"lodash\";\nimport \"./ExpressionContainer.css\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport {\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  SimpleList,\n  SimpleListItem,\n  SimpleListItemProps,\n} from \"@patternfly/react-core\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { ExpressionProps, LiteralExpressionProps, LogicType } from \"../../api\";\nimport { LiteralExpression } from \"../LiteralExpression\";\n\nexport interface ExpressionContainerProps {\n  /** Expression properties */\n  selectedExpression: ExpressionProps;\n}\n\nexport const ExpressionContainer: ({ selectedExpression }: ExpressionContainerProps) => JSX.Element = (\n  props: ExpressionContainerProps\n) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [logicTypeIsPresent, setLogicTypeSelected] = useState(\n    !_.isEmpty(props.selectedExpression.logicType) || props.selectedExpression.logicType === LogicType.Undefined\n  );\n  const [actionDropdownIsOpen, setActionDropDownOpen] = useState(false);\n  const [selectedExpression, setSelectedExpression] = useState(props.selectedExpression);\n\n  const onLogicTypeSelect = useCallback(\n    (currentItem: React.RefObject<HTMLButtonElement>, currentItemProps: SimpleListItemProps) => {\n      setLogicTypeSelected(true);\n      const selectedLogicType = currentItemProps.children as LogicType;\n      setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n        ...previousSelectedExpression,\n        logicType: selectedLogicType,\n      }));\n    },\n    []\n  );\n\n  const executeClearAction = useCallback(() => {\n    setLogicTypeSelected(false);\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n      name: previousSelectedExpression.name,\n      dataType: previousSelectedExpression.dataType,\n      logicType: LogicType.Undefined,\n    }));\n  }, []);\n\n  const onDropdownToggle = useCallback((isOpen) => {\n    return setActionDropDownOpen(isOpen);\n  }, []);\n\n  const onExpressionActionDropdownSelect = useCallback(\n    (actionDropdownIsOpen) => setActionDropDownOpen(!actionDropdownIsOpen),\n    []\n  );\n\n  const renderExpressionActionsDropdown = useCallback(() => {\n    return (\n      <Dropdown\n        onSelect={onExpressionActionDropdownSelect}\n        toggle={<KebabToggle onToggle={onDropdownToggle} className=\"expression-actions-toggle\" />}\n        isOpen={actionDropdownIsOpen}\n        isPlain\n        dropdownItems={[\n          <DropdownItem key=\"clear\" onClick={executeClearAction} isDisabled={!logicTypeIsPresent}>\n            {i18n.clear}\n          </DropdownItem>,\n        ]}\n      />\n    );\n  }, [\n    i18n.clear,\n    onExpressionActionDropdownSelect,\n    onDropdownToggle,\n    actionDropdownIsOpen,\n    logicTypeIsPresent,\n    executeClearAction,\n  ]);\n\n  const getLogicTypesWithoutUndefined = useCallback(() => {\n    return Object.values(LogicType).filter((logicType) => logicType !== LogicType.Undefined);\n  }, []);\n\n  const renderLogicTypeItems = useCallback(() => {\n    return _.map(getLogicTypesWithoutUndefined(), (key) => <SimpleListItem key={key}>{key}</SimpleListItem>);\n  }, [getLogicTypesWithoutUndefined]);\n\n  const getLogicSelectionArrowPlacement = useCallback(\n    () => document.querySelector(\".expression-container-box\")! as HTMLElement,\n    []\n  );\n\n  const buildLogicSelectorMenu = useCallback(() => {\n    return (\n      <PopoverMenu\n        title={i18n.selectLogicType}\n        arrowPlacement={getLogicSelectionArrowPlacement}\n        body={<SimpleList onSelect={onLogicTypeSelect}>{renderLogicTypeItems()}</SimpleList>}\n      />\n    );\n  }, [i18n.selectLogicType, getLogicSelectionArrowPlacement, onLogicTypeSelect, renderLogicTypeItems]);\n\n  const updateNameAndDataType = useCallback((updatedName, updatedDataType) => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n      ...previousSelectedExpression,\n      name: updatedName,\n      dataType: updatedDataType,\n    }));\n  }, []);\n\n  const renderSelectedExpression = useMemo(() => {\n    switch (selectedExpression.logicType) {\n      case LogicType.LiteralExpression:\n        return (\n          <LiteralExpression\n            updateNameAndDataTypeCallback={updateNameAndDataType}\n            {...(selectedExpression as LiteralExpressionProps)}\n          />\n        );\n      case LogicType.Context:\n      case LogicType.DecisionTable:\n      case LogicType.Relation:\n      case LogicType.Function:\n      case LogicType.Invocation:\n      case LogicType.List:\n      default:\n        return selectedExpression.logicType;\n    }\n  }, [selectedExpression, updateNameAndDataType]);\n\n  return (\n    <div className=\"expression-container\">\n      <span className=\"expression-title\">{selectedExpression.name}</span>\n      <span className=\"expression-type\">({selectedExpression.logicType || LogicType.Undefined})</span>\n      <span className=\"expression-actions\">{renderExpressionActionsDropdown()}</span>\n\n      <div\n        className={`expression-container-box ${logicTypeIsPresent ? \"logic-type-selected\" : \"logic-type-not-present\"}`}\n      >\n        {selectedExpression.logicType ? renderSelectedExpression : i18n.selectExpression}\n      </div>\n\n      {!logicTypeIsPresent ? buildLogicSelectorMenu() : null}\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport \"@patternfly/react-core/dist/styles/base.css\";\nimport { I18nDictionariesProvider } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { ExpressionContainer, ExpressionContainerProps } from \"../ExpressionContainer\";\nimport {\n  boxedExpressionEditorDictionaries,\n  BoxedExpressionEditorI18nContext,\n  boxedExpressionEditorI18nDefaults,\n} from \"../../i18n\";\n\nexport interface BoxedExpressionEditorProps {\n  /** All expression properties used to define it */\n  expressionDefinition: ExpressionContainerProps;\n}\n\nconst BoxedExpressionEditor: (props: BoxedExpressionEditorProps) => JSX.Element = (\n  props: BoxedExpressionEditorProps\n) => (\n  <I18nDictionariesProvider\n    defaults={boxedExpressionEditorI18nDefaults}\n    dictionaries={boxedExpressionEditorDictionaries}\n    initialLocale={navigator.language}\n    ctx={BoxedExpressionEditorI18nContext}\n  >\n    <ExpressionContainer {...props.expressionDefinition} />\n  </I18nDictionariesProvider>\n);\n\nexport { BoxedExpressionEditor };\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./index.css\";\nexport * from \"./BoxedExpressionEditor\";\nexport * from \"./ExpressionContainer\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BoxedExpressionEditorI18n } from \"..\";\nimport { en as en_common } from \"@kogito-tooling/i18n-common-dictionary\";\n\nexport const en: BoxedExpressionEditorI18n = {\n  choose: \"Choose...\",\n  editExpression: \"Edit Expression\",\n  name: \"Name\",\n  dataType: \"Data Type\",\n  ...en_common,\n  selectExpression: \"Select expression\",\n  selectLogicType: \"Select logic type\",\n  literalExpression: \"Literal expression\",\n  context: \"Context\",\n  decisionTable: \"Decision Table\",\n  relation: \"Relation\",\n  function: \"Function\",\n  invocation: \"Invocation\",\n  list: \"List\",\n  clear: \"Clear\",\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { en } from \"./locales\";\nimport { I18nContextType } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { BoxedExpressionEditorI18n } from \"./BoxedExpressionEditorI18n\";\nimport { I18nDefaults, I18nDictionaries } from \"@kogito-tooling/i18n/dist/core\";\n\nexport const boxedExpressionEditorI18nDefaults: I18nDefaults<BoxedExpressionEditorI18n> = {\n  locale: \"en\",\n  dictionary: en,\n};\nexport const boxedExpressionEditorDictionaries: I18nDictionaries<BoxedExpressionEditorI18n> = new Map([[\"en\", en]]);\nexport const BoxedExpressionEditorI18nContext = React.createContext<I18nContextType<BoxedExpressionEditorI18n>>(\n  {} as never\n);\n\nexport function useBoxedExpressionEditorI18n(): I18nContextType<BoxedExpressionEditorI18n> {\n  return useContext(BoxedExpressionEditorI18nContext);\n}\n"],"sourceRoot":""}