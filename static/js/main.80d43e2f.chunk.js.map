{"version":3,"sources":["index.tsx","boxed_expression_editor/api/index.ts","boxed_expression_editor/i18n/index.ts","boxed_expression_editor/index.ts","boxed_expression_editor/api/DataType.ts","boxed_expression_editor/api/LogicType.ts","boxed_expression_editor/components/PopoverMenu/PopoverMenu.tsx","boxed_expression_editor/components/EditExpressionMenu/EditExpressionMenu.tsx","boxed_expression_editor/components/LiteralExpression/LiteralExpression.tsx","boxed_expression_editor/components/ExpressionContainer/ExpressionContainer.tsx","boxed_expression_editor/hooks/Hooks.ts","boxed_expression_editor/components/BoxedExpressionEditor/BoxedExpressionEditor.tsx","boxed_expression_editor/components/index.ts","boxed_expression_editor/i18n/locales/en.ts","boxed_expression_editor/i18n/setup.ts"],"names":["App","selectedExpression","DataType","Undefined","useState","updatedExpression","setExpression","expressionDefinition","window","beeApi","resetExpressionDefinition","definition","broadcastLiteralExpressionDefinition","className","JSON","stringify","ReactDOM","document","getElementById","LogicType","PopoverMenu","arrowPlacement","body","title","appendTo","Popover","position","distance","id","reference","headerContent","bodyContent","EditExpressionMenu","nameField","dataTypeField","selectedDataType","selectedExpressionName","onExpressionUpdate","i18n","useBoxedExpressionEditorI18n","editExpression","name","dataType","dataTypeSelectIsOpen","setDataTypeSelectOpen","chosenDataType","setDataType","chosenExpressionName","setExpressionName","onExpressionNameChange","useCallback","event","target","value","type","onDataTypeSelect","selection","getDataTypes","_","Object","values","key","SelectOption","onDataTypeFilter","e","input","RegExp","exception","filter","child","test","props","onDataTypeSelectToggle","isOpen","onChange","onBlur","placeholder","Select","variant","SelectVariant","typeahead","typeAheadAriaLabel","choose","onToggle","onSelect","onFilter","selections","hasInlineFilter","inlineFilterPlaceholderText","LiteralExpression","content","onUpdatingNameAndDataType","isHeadless","expressionName","expressionDataType","setExpressionDataType","literalExpressionContent","setLiteralExpressionContent","useEffect","logicType","onContentChange","updatedContent","getEditExpressionMenuArrowPlacement","querySelector","renderLiteralExpressionHeader","TextArea","defaultValue","aria-label","ExpressionContainer","logicTypeIsPresent","setLogicTypeSelected","setSelectedExpression","wrapperRef","useRef","xPos","setXPos","yPos","setYPos","contextMenuIsVisible","setContextMenuVisibility","hideContextMenu","showContextMenu","current","preventDefault","pageX","pageY","addEventListener","removeEventListener","useContextMenuHandler","contextMenuRef","contextMenuXPos","contextMenuYPos","onLogicTypeSelect","currentItem","currentItemProps","selectedLogicType","children","previousSelectedExpression","executeClearAction","getLogicTypesWithoutUndefined","renderLogicTypeItems","SimpleListItem","getLogicSelectionArrowPlacement","buildLogicSelectorMenu","selectLogicType","SimpleList","updateNameAndDataType","updatedName","updatedDataType","renderSelectedExpression","useMemo","Context","DecisionTable","Relation","Function","Invocation","List","buildContextMenu","style","top","left","Button","isDisabled","isSmall","ButtonVariant","primary","onClick","clear","ref","selectExpression","BoxedExpressionEditor","defaults","boxedExpressionEditorI18nDefaults","dictionaries","boxedExpressionEditorDictionaries","initialLocale","navigator","language","ctx","BoxedExpressionEditorI18nContext","en","en_common","literalExpression","context","decisionTable","relation","function","invocation","list","locale","dictionary","Map","React","useContext"],"mappings":"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","file":"static/js/main.80d43e2f.chunk.js","sourcesContent":["/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport './index.css';\nimport {\n  BoxedExpressionEditor,\n  DataType,\n  ExpressionContainerProps,\n  ExpressionProps,\n  LiteralExpressionProps\n} from \"./boxed_expression_editor\";\n\nexport const App: React.FunctionComponent = () => {\n  //This definition comes directly from the decision node\n  const selectedExpression = {\n    'name': 'Expression Name',\n    'dataType': DataType.Undefined,\n  };\n\n  const [updatedExpression, setExpression] = useState(selectedExpression);\n\n  const expressionDefinition: ExpressionContainerProps = { 'selectedExpression': selectedExpression };\n\n  //Defining global function that will be available in the Window namespace and used by the BoxedExpressionEditor component\n  window.beeApi = {\n    resetExpressionDefinition : (definition: ExpressionProps) => setExpression(definition),\n    broadcastLiteralExpressionDefinition : (definition: LiteralExpressionProps) => setExpression(definition)\n  };\n\n  return (\n    <div className=\"showcase\">\n      <div className=\"boxed-expression\">\n        <BoxedExpressionEditor expressionDefinition={expressionDefinition} />\n      </div>\n      <div className=\"updated-json\">\n        <p>⚠ Currently, JSON gets updated only for literal expression logic type</p>\n        <pre>{JSON.stringify(updatedExpression, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./ExpressionProps\";\nexport * from \"./DataType\";\nexport * from \"./LogicType\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./BoxedExpressionEditorI18n\";\nexport * from \"./setup\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./components\";\nexport * from \"./api\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum DataType {\n  Undefined = \"<Undefined>\",\n  Any = \"Any\",\n  Boolean = \"boolean\",\n  Context = \"context\",\n  Date = \"date\",\n  DateTime = \"date and time\",\n  DateTimeDuration = \"days and time duration\",\n  Number = \"number\",\n  String = \"string\",\n  Time = \"time\",\n  YearsMonthsDuration = \"years and months duration\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogicType {\n  Undefined = \"<Undefined>\",\n  LiteralExpression = \"Literal expression\",\n  Context = \"Context\",\n  DecisionTable = \"Decision Table\",\n  Relation = \"Relation\",\n  Function = \"Function\",\n  Invocation = \"Invocation\",\n  List = \"List\",\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { Popover } from \"@patternfly/react-core\";\nimport \"./PopoverMenu.css\";\n\nexport interface PopoverMenuProps {\n  /** Title of the popover menu */\n  title: string;\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement: () => HTMLElement;\n  /** The content of the popover itself */\n  body: React.ReactNode;\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n}\n\nexport const PopoverMenu: React.FunctionComponent<PopoverMenuProps> = ({\n  arrowPlacement,\n  body,\n  title,\n  appendTo,\n}: PopoverMenuProps) => {\n  return (\n    <Popover\n      className=\"popover-menu-selector\"\n      position=\"bottom\"\n      distance={0}\n      id=\"menu-selector\"\n      reference={arrowPlacement}\n      appendTo={appendTo}\n      headerContent={<div className=\"selector-menu-title\">{title}</div>}\n      bodyContent={body}\n    />\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./EditExpressionMenu.css\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { DataType, ExpressionProps } from \"../../api\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\nimport * as _ from \"lodash\";\n\nexport interface EditExpressionMenuProps {\n  /** The node where to append the popover content */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /** A function which returns the HTMLElement where the popover's arrow should be placed */\n  arrowPlacement: () => HTMLElement;\n  /** The label for the field 'Name' */\n  nameField?: string;\n  /** The label for the field 'Data Type' */\n  dataTypeField?: string;\n  /** The title of the popover menu */\n  title?: string;\n  /** The pre-selected data type */\n  selectedDataType?: DataType;\n  /** The pre-selected expression name */\n  selectedExpressionName: string;\n  /** Function to be called when the expression gets updated, passing the most updated version of it */\n  onExpressionUpdate: (expression: ExpressionProps) => void;\n}\n\nexport const EditExpressionMenu: React.FunctionComponent<EditExpressionMenuProps> = ({\n  appendTo,\n  arrowPlacement,\n  title,\n  nameField,\n  dataTypeField,\n  selectedDataType = DataType.Undefined,\n  selectedExpressionName,\n  onExpressionUpdate,\n}: EditExpressionMenuProps) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n  title = title ?? i18n.editExpression;\n  nameField = nameField ?? i18n.name;\n  dataTypeField = dataTypeField ?? i18n.dataType;\n\n  const [dataTypeSelectIsOpen, setDataTypeSelectOpen] = useState(false);\n  const [chosenDataType, setDataType] = useState(selectedDataType);\n  const [chosenExpressionName, setExpressionName] = useState(selectedExpressionName);\n\n  const onExpressionNameChange = useCallback(\n    (event) => {\n      setExpressionName(event.target.value);\n      if (event.type === \"blur\") {\n        onExpressionUpdate({\n          name: event.target.value,\n          dataType: chosenDataType,\n        });\n      }\n    },\n    [chosenDataType, onExpressionUpdate]\n  );\n\n  const onDataTypeSelect = useCallback(\n    (event, selection) => {\n      setDataTypeSelectOpen(false);\n      setDataType(selection);\n      onExpressionUpdate({\n        name: chosenExpressionName,\n        dataType: selection,\n      });\n    },\n    [chosenExpressionName, onExpressionUpdate]\n  );\n\n  const getDataTypes = useCallback(() => {\n    return _.map(Object.values(DataType), (key) => (\n      <SelectOption key={key} value={key}>\n        {key}\n      </SelectOption>\n    ));\n  }, []);\n\n  const onDataTypeFilter = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      let input: RegExp;\n      try {\n        input = new RegExp(e.target.value, \"i\");\n      } catch (exception) {\n        return getDataTypes();\n      }\n      return e.target.value !== \"\" ? getDataTypes().filter((child) => input.test(child.props.value)) : getDataTypes();\n    },\n    [getDataTypes]\n  );\n\n  const onDataTypeSelectToggle = useCallback((isOpen) => setDataTypeSelectOpen(isOpen), []);\n\n  return (\n    <PopoverMenu\n      title={title}\n      arrowPlacement={arrowPlacement}\n      appendTo={appendTo}\n      body={\n        <div className=\"edit-expression-menu\">\n          <div className=\"expression-name\">\n            <label>{nameField}</label>\n            <input\n              type=\"text\"\n              id=\"expression-name\"\n              value={chosenExpressionName}\n              onChange={onExpressionNameChange}\n              onBlur={onExpressionNameChange}\n              className=\"form-control pf-c-form-control\"\n              placeholder=\"Expression Name\"\n            />\n          </div>\n          <div className=\"expression-data-type\">\n            <label>{dataTypeField}</label>\n            <Select\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={i18n.choose}\n              onToggle={onDataTypeSelectToggle}\n              onSelect={onDataTypeSelect}\n              onFilter={onDataTypeFilter}\n              isOpen={dataTypeSelectIsOpen}\n              selections={chosenDataType}\n              hasInlineFilter\n              inlineFilterPlaceholderText={i18n.choose}\n            >\n              {getDataTypes()}\n            </Select>\n          </div>\n        </div>\n      }\n    />\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./LiteralExpression.css\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { ExpressionProps, LiteralExpressionProps, LogicType } from \"../../api\";\nimport { TextArea } from \"@patternfly/react-core\";\nimport { EditExpressionMenu } from \"../EditExpressionMenu\";\n\nexport const LiteralExpression: React.FunctionComponent<LiteralExpressionProps> = ({\n  content,\n  dataType,\n  name,\n  onUpdatingNameAndDataType,\n  isHeadless = false,\n}: LiteralExpressionProps) => {\n  const [expressionName, setExpressionName] = useState(name);\n  const [expressionDataType, setExpressionDataType] = useState(dataType);\n  const [literalExpressionContent, setLiteralExpressionContent] = useState(content);\n\n  useEffect(() => {\n    if (window.beeApi?.broadcastLiteralExpressionDefinition) {\n      window.beeApi.broadcastLiteralExpressionDefinition({\n        name: expressionName,\n        dataType: expressionDataType,\n        logicType: LogicType.LiteralExpression,\n        content: literalExpressionContent,\n      });\n    }\n  });\n\n  const onExpressionUpdate = useCallback(\n    ({ dataType, name }: ExpressionProps) => {\n      setExpressionName(name);\n      setExpressionDataType(dataType);\n      if (onUpdatingNameAndDataType) {\n        onUpdatingNameAndDataType(name, dataType);\n      }\n    },\n    [onUpdatingNameAndDataType]\n  );\n\n  const onContentChange = useCallback((event) => {\n    const updatedContent = event.target.value;\n    setLiteralExpressionContent(updatedContent);\n  }, []);\n\n  const getEditExpressionMenuArrowPlacement = useCallback(\n    () => document.querySelector(\".literal-expression-header\")! as HTMLElement,\n    []\n  );\n\n  const renderLiteralExpressionHeader = useCallback(\n    () => (\n      <div className=\"literal-expression-header\">\n        <p className=\"expression-name\">{expressionName}</p>\n        <p className=\"expression-data-type\">({expressionDataType})</p>\n      </div>\n    ),\n    [expressionDataType, expressionName]\n  );\n\n  return (\n    <div className=\"literal-expression\">\n      {!isHeadless ? renderLiteralExpressionHeader() : null}\n      <div className=\"literal-expression-body\">\n        <TextArea\n          defaultValue={literalExpressionContent}\n          onBlur={onContentChange}\n          aria-label=\"literal-expression-content\"\n        />\n      </div>\n      <EditExpressionMenu\n        arrowPlacement={getEditExpressionMenuArrowPlacement}\n        selectedExpressionName={expressionName}\n        selectedDataType={expressionDataType}\n        onExpressionUpdate={onExpressionUpdate}\n      />\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport * as _ from \"lodash\";\nimport \"./ExpressionContainer.css\";\nimport { useBoxedExpressionEditorI18n } from \"../../i18n\";\nimport { Button, ButtonVariant, SimpleList, SimpleListItem, SimpleListItemProps } from \"@patternfly/react-core\";\nimport { PopoverMenu } from \"../PopoverMenu\";\nimport { ExpressionProps, LiteralExpressionProps, LogicType } from \"../../api\";\nimport { LiteralExpression } from \"../LiteralExpression\";\nimport { useContextMenuHandler } from \"../../hooks\";\n\nexport interface ExpressionContainerProps {\n  /** Expression properties */\n  selectedExpression: ExpressionProps;\n}\n\nexport const ExpressionContainer: ({ selectedExpression }: ExpressionContainerProps) => JSX.Element = (\n  props: ExpressionContainerProps\n) => {\n  const { i18n } = useBoxedExpressionEditorI18n();\n\n  const [logicTypeIsPresent, setLogicTypeSelected] = useState(\n    !_.isEmpty(props.selectedExpression.logicType) || props.selectedExpression.logicType === LogicType.Undefined\n  );\n  const [selectedExpression, setSelectedExpression] = useState(props.selectedExpression);\n\n  const [\n    contextMenuRef,\n    contextMenuXPos,\n    contextMenuYPos,\n    contextMenuIsVisible,\n    setContextMenuVisibility,\n  ] = useContextMenuHandler();\n\n  const onLogicTypeSelect = useCallback(\n    (currentItem: React.RefObject<HTMLButtonElement>, currentItemProps: SimpleListItemProps) => {\n      setLogicTypeSelected(true);\n      const selectedLogicType = currentItemProps.children as LogicType;\n      setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n        ...previousSelectedExpression,\n        logicType: selectedLogicType,\n      }));\n    },\n    []\n  );\n\n  const executeClearAction = useCallback(() => {\n    setLogicTypeSelected(false);\n    setContextMenuVisibility(false);\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => {\n      const updatedExpression = {\n        name: previousSelectedExpression.name,\n        dataType: previousSelectedExpression.dataType,\n        logicType: LogicType.Undefined,\n      };\n      if (window.beeApi?.resetExpressionDefinition) {\n        window.beeApi.resetExpressionDefinition(updatedExpression);\n      }\n      return updatedExpression;\n    });\n  }, [setContextMenuVisibility]);\n\n  const getLogicTypesWithoutUndefined = useCallback(() => {\n    return Object.values(LogicType).filter((logicType) => logicType !== LogicType.Undefined);\n  }, []);\n\n  const renderLogicTypeItems = useCallback(() => {\n    return _.map(getLogicTypesWithoutUndefined(), (key) => <SimpleListItem key={key}>{key}</SimpleListItem>);\n  }, [getLogicTypesWithoutUndefined]);\n\n  const getLogicSelectionArrowPlacement = useCallback(\n    () => document.querySelector(\".expression-container-box\")! as HTMLElement,\n    []\n  );\n\n  const buildLogicSelectorMenu = useCallback(() => {\n    return (\n      <PopoverMenu\n        title={i18n.selectLogicType}\n        arrowPlacement={getLogicSelectionArrowPlacement}\n        body={<SimpleList onSelect={onLogicTypeSelect}>{renderLogicTypeItems()}</SimpleList>}\n      />\n    );\n  }, [i18n.selectLogicType, getLogicSelectionArrowPlacement, onLogicTypeSelect, renderLogicTypeItems]);\n\n  const updateNameAndDataType = useCallback((updatedName, updatedDataType) => {\n    setSelectedExpression((previousSelectedExpression: ExpressionProps) => ({\n      ...previousSelectedExpression,\n      name: updatedName,\n      dataType: updatedDataType,\n    }));\n  }, []);\n\n  const renderSelectedExpression = useMemo(() => {\n    switch (selectedExpression.logicType) {\n      case LogicType.LiteralExpression:\n        return (\n          <LiteralExpression\n            onUpdatingNameAndDataType={updateNameAndDataType}\n            {...(selectedExpression as LiteralExpressionProps)}\n          />\n        );\n      case LogicType.Context:\n      case LogicType.DecisionTable:\n      case LogicType.Relation:\n      case LogicType.Function:\n      case LogicType.Invocation:\n      case LogicType.List:\n      default:\n        return selectedExpression.logicType;\n    }\n  }, [selectedExpression, updateNameAndDataType]);\n\n  const buildContextMenu = useCallback(() => {\n    return (\n      <div\n        className=\"context-menu-container\"\n        style={{\n          top: contextMenuYPos,\n          left: contextMenuXPos,\n        }}\n      >\n        <Button\n          isDisabled={!logicTypeIsPresent}\n          isSmall={true}\n          variant={ButtonVariant.primary}\n          onClick={executeClearAction}\n        >\n          {i18n.clear}\n        </Button>\n      </div>\n    );\n  }, [logicTypeIsPresent, contextMenuXPos, contextMenuYPos, executeClearAction, i18n.clear]);\n\n  return (\n    <div className=\"expression-container\">\n      <span className=\"expression-title\">{selectedExpression.name}</span>\n      <span className=\"expression-type\">({selectedExpression.logicType || LogicType.Undefined})</span>\n\n      <div\n        className={`expression-container-box ${logicTypeIsPresent ? \"logic-type-selected\" : \"logic-type-not-present\"}`}\n        ref={contextMenuRef}\n      >\n        {selectedExpression.logicType ? renderSelectedExpression : i18n.selectExpression}\n      </div>\n\n      {!logicTypeIsPresent ? buildLogicSelectorMenu() : null}\n      {contextMenuIsVisible ? buildContextMenu() : null}\n    </div>\n  );\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dispatch, RefObject, SetStateAction, useCallback, useEffect, useRef, useState } from \"react\";\n\nexport function useContextMenuHandler(): [\n  RefObject<HTMLDivElement>,\n  string,\n  string,\n  boolean,\n  Dispatch<SetStateAction<boolean>>\n] {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const [xPos, setXPos] = useState(\"0px\");\n  const [yPos, setYPos] = useState(\"0px\");\n  const [contextMenuIsVisible, setContextMenuVisibility] = useState(false);\n\n  const hideContextMenu = useCallback(() => {\n    contextMenuIsVisible && setContextMenuVisibility(false);\n  }, [contextMenuIsVisible]);\n\n  const showContextMenu = useCallback(\n    (event: MouseEvent) => {\n      if (wrapperRef.current && wrapperRef.current === event.target) {\n        event.preventDefault();\n        setXPos(`${event.pageX}px`);\n        setYPos(`${event.pageY}px`);\n        setContextMenuVisibility(true);\n      }\n    },\n    [setXPos, setYPos]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"click\", hideContextMenu);\n    document.addEventListener(\"contextmenu\", showContextMenu);\n    return () => {\n      document.removeEventListener(\"click\", hideContextMenu);\n      document.removeEventListener(\"contextmenu\", showContextMenu);\n    };\n  });\n\n  return [wrapperRef, xPos, yPos, contextMenuIsVisible, setContextMenuVisibility];\n}\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport \"@patternfly/react-core/dist/styles/base.css\";\nimport { I18nDictionariesProvider } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { ExpressionContainer, ExpressionContainerProps } from \"../ExpressionContainer\";\nimport {\n  boxedExpressionEditorDictionaries,\n  BoxedExpressionEditorI18nContext,\n  boxedExpressionEditorI18nDefaults,\n} from \"../../i18n\";\n\nexport interface BoxedExpressionEditorProps {\n  /** All expression properties used to define it */\n  expressionDefinition: ExpressionContainerProps;\n}\n\nconst BoxedExpressionEditor: (props: BoxedExpressionEditorProps) => JSX.Element = (\n  props: BoxedExpressionEditorProps\n) => (\n  <I18nDictionariesProvider\n    defaults={boxedExpressionEditorI18nDefaults}\n    dictionaries={boxedExpressionEditorDictionaries}\n    initialLocale={navigator.language}\n    ctx={BoxedExpressionEditorI18nContext}\n  >\n    <ExpressionContainer {...props.expressionDefinition} />\n  </I18nDictionariesProvider>\n);\n\nexport { BoxedExpressionEditor };\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./index.css\";\nexport * from \"./BoxedExpressionEditor\";\nexport * from \"./ExpressionContainer\";\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BoxedExpressionEditorI18n } from \"..\";\nimport { en as en_common } from \"@kogito-tooling/i18n-common-dictionary\";\n\nexport const en: BoxedExpressionEditorI18n = {\n  choose: \"Choose...\",\n  editExpression: \"Edit Expression\",\n  name: \"Name\",\n  dataType: \"Data Type\",\n  ...en_common,\n  selectExpression: \"Select expression\",\n  selectLogicType: \"Select logic type\",\n  literalExpression: \"Literal expression\",\n  context: \"Context\",\n  decisionTable: \"Decision Table\",\n  relation: \"Relation\",\n  function: \"Function\",\n  invocation: \"Invocation\",\n  list: \"List\",\n  clear: \"Clear\",\n};\n","/*\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { en } from \"./locales\";\nimport { I18nContextType } from \"@kogito-tooling/i18n/dist/react-components\";\nimport { BoxedExpressionEditorI18n } from \"./BoxedExpressionEditorI18n\";\nimport { I18nDefaults, I18nDictionaries } from \"@kogito-tooling/i18n/dist/core\";\n\nexport const boxedExpressionEditorI18nDefaults: I18nDefaults<BoxedExpressionEditorI18n> = {\n  locale: \"en\",\n  dictionary: en,\n};\nexport const boxedExpressionEditorDictionaries: I18nDictionaries<BoxedExpressionEditorI18n> = new Map([[\"en\", en]]);\nexport const BoxedExpressionEditorI18nContext = React.createContext<I18nContextType<BoxedExpressionEditorI18n>>(\n  {} as never\n);\n\nexport function useBoxedExpressionEditorI18n(): I18nContextType<BoxedExpressionEditorI18n> {\n  return useContext(BoxedExpressionEditorI18nContext);\n}\n"],"sourceRoot":""}